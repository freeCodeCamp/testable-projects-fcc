var FCC_Global =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.assert = undefined;
	exports.selectProject = selectProject;
	exports.FCCUpdateTestResult = FCCUpdateTestResult;
	exports.FCCUpdateTestProgress = FCCUpdateTestProgress;
	exports.FCCOpenTestModal = FCCOpenTestModal;
	exports.FCCCloseTestModal = FCCCloseTestModal;
	exports.FCCclickOutsideToCloseModal = FCCclickOutsideToCloseModal;
	exports.FCCRerunTests = FCCRerunTests;
	exports.FCCResetTests = FCCResetTests;
	exports.alertOnce = alertOnce;
	exports.hamburger_transform = hamburger_transform;
	exports.FCCInitTestRunner = FCCInitTestRunner;

	var _jquery = __webpack_require__(1);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _chai = __webpack_require__(2);

	var _chai2 = _interopRequireDefault(_chai);

	var _test_suite_skeleton = __webpack_require__(42);

	var _test_suite_skeleton2 = _interopRequireDefault(_test_suite_skeleton);

	var _mocha_CSS = __webpack_require__(43);

	var _mocha_CSS2 = _interopRequireDefault(_mocha_CSS);

	var _drumMachineTests = __webpack_require__(44);

	var _drumMachineTests2 = _interopRequireDefault(_drumMachineTests);

	var _markdownPreviewerTests = __webpack_require__(45);

	var _markdownPreviewerTests2 = _interopRequireDefault(_markdownPreviewerTests);

	var _calculatorTests = __webpack_require__(47);

	var _calculatorTests2 = _interopRequireDefault(_calculatorTests);

	var _pomodoroClockTests = __webpack_require__(48);

	var _pomodoroClockTests2 = _interopRequireDefault(_pomodoroClockTests);

	var _tributePageTests = __webpack_require__(49);

	var _tributePageTests2 = _interopRequireDefault(_tributePageTests);

	var _portfolioTests = __webpack_require__(50);

	var _portfolioTests2 = _interopRequireDefault(_portfolioTests);

	var _productLandingPageTests = __webpack_require__(52);

	var _productLandingPageTests2 = _interopRequireDefault(_productLandingPageTests);

	var _surveyFormTests = __webpack_require__(53);

	var _surveyFormTests2 = _interopRequireDefault(_surveyFormTests);

	var _technicalDocsTests = __webpack_require__(54);

	var _technicalDocsTests2 = _interopRequireDefault(_technicalDocsTests);

	var _barChartTests = __webpack_require__(55);

	var _barChartTests2 = _interopRequireDefault(_barChartTests);

	var _scatterPlotTests = __webpack_require__(57);

	var _scatterPlotTests2 = _interopRequireDefault(_scatterPlotTests);

	var _choroplethTests = __webpack_require__(59);

	var _choroplethTests2 = _interopRequireDefault(_choroplethTests);

	var _treeMapTests = __webpack_require__(61);

	var _treeMapTests2 = _interopRequireDefault(_treeMapTests);

	var _quoteMachineTests = __webpack_require__(62);

	var _quoteMachineTests2 = _interopRequireDefault(_quoteMachineTests);

	var _heatMapTests = __webpack_require__(64);

	var _heatMapTests2 = _interopRequireDefault(_heatMapTests);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var assert = exports.assert = _chai2.default.assert;

	// load mocha
	(function () {
	  // write mocha CSS to page head
	  //document.write(`<style>${mocha_CSS}</style>`);
	  // add a script tag to load mocha JS from a CDN
	  var mocha_cdn = document.createElement('script');
	  mocha_cdn.setAttribute('src', 'https://cdnjs.cloudflare.com/ajax/libs/mocha/3.0.2/mocha.min.js');
	  document.head.appendChild(mocha_cdn);
	})();

	// When the document is fully loaded,
	// create the "Tests" button and the corresponding modal window, jquery required)
	(0, _jquery2.default)(document).ready(function () {
	  // alert users about cross-browser compatibility issues
	  var isChrome = !!window.chrome && !!window.chrome.webstore;
	  if (isChrome === false) {
	    FCC_Global.alertOnce('Intro Alert', 'Test suites are currently optimized for Chrome. There are known issues that we are trying to work through to make these suites fully cross-browser compatible, but it is a work in progress. For the best user experience, please use Chrome until these issues are resolved. Thanks and Happy Coding!');
	  }
	  // check mocha is loaded and populate test suite
	  var mochaCheck = setInterval(function () {
	    return runCheck();
	  }, 50);

	  function runCheck() {
	    try {
	      if (mocha) {
	        clearInterval(mochaCheck);
	        mocha.setup({
	          ui: 'bdd',
	          reporter: 'spec'
	        });
	        var testDiv = document.createElement("div");
	        testDiv.style.position = "inherit";
	        testDiv.innerHTML = _test_suite_skeleton2.default;
	        document.body.appendChild(testDiv);
	        // Once testDiv is loaded:
	        var project_titleCase = localStorage.getItem('project_titleCase');
	        // project_name variable is defined in our example projects so the correct test suite is automatically
	        // loaded. This Sets default text for <option> text and project indicator in top right corner.
	        if (typeof project_name === 'undefined' && project_titleCase === null) {
	          document.getElementById('placeholder').innerHTML = '- - -';
	          document.getElementById('fcc_test_suite_indicator_wrapper').innerHTML = '';
	        } else if (typeof project_name !== 'undefined') {
	          document.getElementById('placeholder').innerHTML = '' + localStorage.getItem('example_project');
	          document.getElementById('fcc_test_suite_indicator_wrapper').innerHTML = '<span id=fcc_test_suite_indicator>FCC Test Suite: ' + localStorage.getItem('example_project') + '</span>';;
	        } else {
	          document.getElementById('placeholder').innerHTML = project_titleCase;
	          document.getElementById('fcc_test_suite_indicator_wrapper').innerHTML = '<span id=fcc_test_suite_indicator>FCC Test Suite: ' + project_titleCase + '</span>';
	        }
	      };
	    } catch (err) {
	      console.warn('mocha not loaded yet');
	    };
	  };
	  runCheck();
	});

	// UTILITY FUNCTIONS:

	// select project dropdown
	function selectProject(project) {
	  // store project_selector for initTestRunner function
	  localStorage.setItem('project_selector', project);
	  // create & store pretty-print project name for display in indicator div
	  var project_titleCase = project.replace(/-/g, ' ').split(' ').map(function (word) {
	    return word.charAt(0).toUpperCase() + word.substr(1);
	  }).join(' ');
	  document.getElementById('fcc_test_suite_indicator_wrapper').innerHTML = '<span id=fcc_test_suite_indicator>FCC Test Suite: ' + project_titleCase + '</span>';
	  localStorage.setItem('project_titleCase', project_titleCase);
	}

	// Updates the button color and text on the target project, to show how many tests passed and how many failed.
	function FCCUpdateTestResult(nbTests, nbPassed, nbFailed) {
	  var button = document.getElementById('fcc_test_button');
	  button.innerHTML = 'Tests ' + nbPassed + '/' + (nbPassed + nbFailed);
	  if (nbFailed) {
	    button.classList.add("fcc_test_btn-error");
	  } else {
	    button.classList.add("fcc_test_btn-success");
	  }
	  var stats = document.createElement('h6');
	  stats.setAttribute('class', 'stats');
	  var str = document.createTextNode('Passed: ' + nbPassed + ' Failed: ' + nbFailed);
	  stats.appendChild(str);
	  document.querySelector(".fcc_test_message-box-header").appendChild(stats);
	  var fccpassed = document.getElementsByClassName('fcc_passed');
	  function handleTestClick(e) {
	    if (e.target.style.height === 'auto') {
	      e.target.style.height = '1.3em';
	      e.target.style['white-space'] = 'nowrap';
	      e.target.querySelector('a').style.color = '#ccc';
	    } else {
	      e.target.style.height = 'auto';
	      e.target.style['white-space'] = 'normal';
	      e.target.querySelector('a').style.color = '#000';
	    }
	  }
	  [].forEach.call(fccpassed, function (e) {
	    e.addEventListener('click', handleTestClick, false);
	  });
	}

	// Updates the button text on the target project, to show how many tests were executed so far.
	function FCCUpdateTestProgress(nbTests, nbTestsExecuted) {
	  var button = document.getElementById('fcc_test_button');
	  button.classList.add('fcc_test_btn-executing');
	  button.innerHTML = 'Testing ' + nbTestsExecuted + '/' + nbTests;
	}

	// open main modal
	function FCCOpenTestModal() {
	  var modal = document.getElementById('fcc_test_message-box');
	  modal.classList.remove("fcc_test_message-box-hidden");
	  modal.classList.add("fcc_test_message-box-shown");
	}

	// close main modal
	function FCCCloseTestModal() {
	  var modal = document.getElementById('fcc_test_message-box');
	  modal.classList.remove("fcc_test_message-box-shown");
	  modal.classList.add("fcc_test_message-box-hidden");
	}

	// close modal on ESC press
	(0, _jquery2.default)(document).keyup(function (e) {
	  e = e || window.event;
	  if (e.keyCode == 27) {
	    FCCCloseTestModal();
	  }
	});

	// close modal on click outside el
	function FCCclickOutsideToCloseModal(e) {
	  if (e.target.id === 'fcc_test_message-box') {
	    FCCCloseTestModal();
	  }
	}

	// cannot reset classList with an = assignment
	// due to cross-browser conflicts
	function clearClassList(elem) {
	  var classListAsArray = new Array(elem.classList.length);

	  for (var i = 0; i < elem.classList.length; i++) {
	    classListAsArray[i] = elem.classList[i];
	  }

	  for (var i = 0; i < classListAsArray.length; i++) {
	    elem.classList.remove(classListAsArray[i]);
	  }
	}

	// run tests
	function FCCRerunTests() {
	  var button = document.getElementById('fcc_test_button');
	  button.innerHTML = typeof project_name === 'undefined' && localStorage.getItem('project_selector') === null ? 'Load Tests!' : 'Testing';
	  button.title = typeof project_name === 'undefined' && localStorage.getItem('project_selector') === null ? 'Select test suite from dropdown above' : 'CTRL + SHIFT + T';
	  clearClassList(button);
	  button.classList.add("fcc_foldout_buttons");
	  button.classList.add("fcc_test_btn-default");
	  FCCInitTestRunner();
	}

	// reset tests
	function FCCResetTests(suite) {
	  suite.tests.forEach(function (t) {
	    delete t.state;
	    t.timedOut = false;
	  });
	  suite.suites.forEach(FCCResetTests);
	}

	var count = 0;
	var str = '';
	var parentTitle;
	// Custom Reporter
	function appendTestResults(test) {
	  var testSectionNode = document.createElement('div');
	  testSectionNode.setAttribute('class', 'fcc_section');
	  var textNode;
	  var parentParentTitle = test.parent.parent.title;
	  var mainTitleNode = document.querySelector('.fcc_test_message-box-header .title');
	  mainTitleNode.innerHTML = parentParentTitle.replace('#', '');
	  var testSection;
	  if (parentTitle === undefined) {
	    parentTitle = '';
	  }

	  if (test.state === 'passed') {
	    // If passed, append an accordion-style status
	    str = ' <p class="fcc_passed"><span style="pointer-events: none;"><a href="#">' + test.title + (test.speed !== 'fast' ? ' `duration: ' + test.duration + 'ms`' : '') + '</a></span></p> ';
	  } else {
	    // If failed, append an error block status
	    if (test.err !== undefined) {
	      // msg
	      var msg;
	      var err = test.err;
	      var message;
	      if (err.message && typeof err.message.toString === 'function') {
	        message = err.message + '';
	      } else if (typeof err.inspect === 'function') {
	        message = err.inspect() + '';
	      } else {
	        message = '';
	      }
	      var stack = err.stack || message;
	      var index = message ? stack.indexOf(message) : -1;
	      var actual = err.actual;
	      var expected = err.expected;
	      var escape = true;

	      if (index === -1) {
	        msg = message;
	      } else {
	        index += message.length;
	        msg = stack.slice(0, index);
	        // remove msg from stack
	        stack = stack.slice(index + 1);
	      }
	      console.log(err.stack);
	      // uncaught
	      if (err.uncaught) {
	        msg = 'Uncaught ' + msg;
	      }
	    }
	    // concatenate error string with markdown formatting
	    var errStr = '```' + msg + ' \n ' + stack.split('\n').join('```  \n' + '  ``` ') + '```';
	    var fullTitle = test.parent.fullTitle() + ' ' + test.title;
	    // Use Mocha's grep query to enable linking to a single test-runner in a new window / tab
	    str = ' <p class="fcc_external"><span><a target="_blank" title="run single test" href="' + window.location.href + '/?grep=' + encodeURIComponent(fullTitle) + '"> ' + test.title + (test.speed !== 'fast' ? ' `duration: ' + test.duration + 'ms`' : '') + '</a></span><p class="fcc_err">' + errStr + '</p></p>';
	  }
	  if (parentTitle !== test.parent.title) {
	    // if scoped parentTitle is outdated, count up and prepare a new section
	    count++;
	    testSection = document.createElement('div');
	    parentTitle = test.parent.title;
	    testSection.innerHTML = parentTitle.replace('#', '');
	    testSectionNode.appendChild(testSection);
	    textNode = document.createElement('ol');
	    textNode.setAttribute('class', 'fcc_markdown_' + count);
	    textNode.setAttribute('markdown', '1');
	    textNode.innerHTML += str;
	    testSectionNode.appendChild(textNode);
	    document.querySelector(".fcc_test_message-box-body #mocha").appendChild(testSectionNode);
	  } else {
	    document.getElementsByClassName('fcc_markdown_' + count)[0].innerHTML += str;
	  }
	}

	// shortcut keys
	var map = [];
	onkeydown = onkeyup = function onkeyup(e) {
	  var modal = document.getElementById('fcc_test_message-box');
	  e = e || window.event;
	  map[e.keyCode] = e.type == 'keydown';
	  if (map[17] && map[16] && map[13]) {
	    // run tests: Ctrl + Shift + Enter
	    if (localStorage.getItem('project_selector') === 'markdown-previewer') {
	      alertOnce('alerted', 'Run-Test hotkey disabled for this project, please use mouse.');
	      return;
	    } else {
	      FCCRerunTests();
	    }
	  } else if (map[17] && map[16] && map[84]) {
	    // open/close modal: Ctrl + Shift + T
	    if (modal.classList.contains("fcc_test_message-box-hidden")) {
	      FCCOpenTestModal();
	    } else {
	      FCCCloseTestModal();
	    }
	  } else if (map[17] && map[16] && map[79]) {
	    // open/close foldout menu: Ctrl + Shift + O
	    document.getElementById('toggle').click();
	  }
	};

	// shortcuts interfere w/ markdown tests, disable and alert
	function alertOnce(item, message) {
	  var alerted = sessionStorage.getItem(item) || false;
	  if (alerted) {
	    return;
	  } else {
	    alert(message);
	    sessionStorage.setItem(item, true);
	  }
	}

	// hamburger menu transformation
	function hamburger_transform() {
	  if (document.getElementById('hamburger_top').classList.contains('transform_top')) {
	    document.getElementById('hamburger_top').classList.remove('transform_top');
	    document.getElementById('hamburger_middle').classList.remove('transform_middle');
	    document.getElementById('hamburger_bottom').classList.remove('transform_bottom');
	  } else {
	    document.getElementById('hamburger_top').classList.add('transform_top');
	    document.getElementById('hamburger_middle').classList.add('transform_middle');
	    document.getElementById('hamburger_bottom').classList.add('transform_bottom');
	  }
	}

	// init tests
	function FCCInitTestRunner() {
	  var testRunner = null;
	  // empty the mocha tag in case of rerun
	  document.querySelector(".fcc_test_message-box-body #mocha").innerHTML = "";
	  // empty the test suite in the mocha object
	  mocha.suite.suites = [];
	  // check for hard-coded project selector (for our example projects)
	  var hardCoded_project_name = typeof project_name === 'undefined' ? null : project_name;
	  // create tests
	  switch (hardCoded_project_name || localStorage.getItem('project_selector')) {
	    case "random-quote-machine":
	      (0, _quoteMachineTests2.default)();
	      break;
	    case "javascript-calculator":
	      (0, _calculatorTests2.default)();
	      break;
	    case "pomodoro-clock":
	      (0, _pomodoroClockTests2.default)();
	      break;
	    case "tribute-page":
	      (0, _tributePageTests2.default)();
	      break;
	    case "drum-machine":
	      (0, _drumMachineTests2.default)();
	      break;
	    case "portfolio":
	      (0, _portfolioTests2.default)();
	      break;
	    case 'product-landing-page':
	      (0, _productLandingPageTests2.default)();
	      break;
	    case 'survey-form':
	      (0, _surveyFormTests2.default)();
	      break;
	    case 'markdown-previewer':
	      (0, _markdownPreviewerTests2.default)();
	      break;
	    case 'technical-docs-page':
	      (0, _technicalDocsTests2.default)();
	      break;
	    case 'bar-chart':
	      (0, _barChartTests2.default)();
	      break;
	    case 'scatter-plot':
	      (0, _scatterPlotTests2.default)();
	      break;
	    case 'choropleth':
	      (0, _choroplethTests2.default)();
	      break;
	    case 'heat-map':
	      (0, _heatMapTests2.default)();
	      break;
	    case 'tree-map':
	      (0, _treeMapTests2.default)();
	      break;
	  };

	  // save the number of tests in the selected suite
	  var nbTests = 0;
	  mocha.suite.eachTest(function (_) {
	    return nbTests++;
	  });
	  var nbTestsExecuted = 0;
	  var nbPassed = 0;
	  var nbFailed = 0;
	  var hasPassed = function hasPassed(_) {
	    return nbPassed++;
	  };
	  var hasFailed = function hasFailed(_) {
	    return nbFailed++;
	  };
	  var updateProgress = function updateProgress(_) {
	    return FCCUpdateTestProgress(nbTests, ++nbTestsExecuted);
	  };
	  var updateEnd = function updateEnd(_) {
	    return FCCUpdateTestResult && FCCUpdateTestResult(nbTests, nbPassed, nbFailed);
	  };
	  if (testRunner) {
	    FCCResetTests(mocha.suite);
	    testRunner.abort();
	    testRunner.removeListener("pass", hasPassed);
	    testRunner.removeListener("fail", hasFailed);
	    testRunner.removeListener("test end", updateProgress);
	    testRunner.removeListener("end", updateEnd);
	    testRunner.removeListener("test end", appendTestResults);
	  };
	  // Run the test suite
	  testRunner = mocha.run();
	  testRunner.on("pass", hasPassed);
	  testRunner.on("fail", hasFailed);
	  testRunner.on("test end", updateProgress);
	  testRunner.on("end", updateEnd); // update the "tests" button caption at  the end of the overhall execution.
	  testRunner.on('test end', appendTestResults);
	};

	// polyfill for enabling NodeList.forEach() method - IE, Edge, Safari
	(function () {
	  if (typeof NodeList.prototype.forEach === "function") return false;
	  NodeList.prototype.forEach = Array.prototype.forEach;
	})();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.2.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2017-03-20T18:59Z
	 */
	( function( global, factory ) {

		"use strict";

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};



		function DOMEval( code, doc ) {
			doc = doc || document;

			var script = doc.createElement( "script" );

			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.2.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && Array.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&

				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");

		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {

		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {

				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {

					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}

					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}

				return elem.disabled === disabled;

			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}

			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};

			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );

					if ( elem ) {

						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}

						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}

					return [];
				}
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;



	function nodeName( elem, name ) {

	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Simple selector that can be filtered directly, removing non-Elements
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter( qualifier, elements );
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
	        if ( nodeName( elem, "iframe" ) ) {
	            return elem.contentDocument;
	        }

	        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
	        // Treat the template element as a regular one in browsers that
	        // don't support it.
	        if ( nodeName( elem, "template" ) ) {
	            elem = elem.content || elem;
	        }

	        return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = locked || options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject, noValue ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;



	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}

				if ( button & 2 ) {
					return 3;
				}

				if ( button & 4 ) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return jQuery( ">tbody", elem )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,

			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName( name ) {
		var ret = jQuery.cssProps[ name ];
		if ( !ret ) {
			ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
		}
		return ret;
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i,
			val = 0;

		// If we already have the right measurement, avoid augmentation
		if ( extra === ( isBorderBox ? "border" : "content" ) ) {
			i = 4;

		// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with computed style
		var valueIsBorderBox,
			styles = getStyles( elem ),
			val = curCSS( elem, name, styles ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Fall back to offsetWidth/Height when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		if ( val === "auto" ) {
			val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
		}

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name ),
				isCustomProp = rcustomProp.test( name );

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}

			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

				/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}

				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}

				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		return animation;
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function() {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnothtmlwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( Array.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				if ( val == null ) {
					return null;
				}

				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}

				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var doc, docElem, rect, win,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			doc = elem.ownerDocument;
			docElem = doc.documentElement;
			win = doc.defaultView;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {

				// Coalesce documents and windows
				var win;
				if ( jQuery.isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;
	} );


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(3);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var used = []
	  , exports = module.exports = {};

	/*!
	 * Chai version
	 */

	exports.version = '3.5.0';

	/*!
	 * Assertion Error
	 */

	exports.AssertionError = __webpack_require__(4);

	/*!
	 * Utils for plugins (not exported)
	 */

	var util = __webpack_require__(5);

	/**
	 * # .use(function)
	 *
	 * Provides a way to extend the internals of Chai
	 *
	 * @param {Function}
	 * @returns {this} for chaining
	 * @api public
	 */

	exports.use = function (fn) {
	  if (!~used.indexOf(fn)) {
	    fn(this, util);
	    used.push(fn);
	  }

	  return this;
	};

	/*!
	 * Utility Functions
	 */

	exports.util = util;

	/*!
	 * Configuration
	 */

	var config = __webpack_require__(18);
	exports.config = config;

	/*!
	 * Primary `Assertion` prototype
	 */

	var assertion = __webpack_require__(37);
	exports.use(assertion);

	/*!
	 * Core Assertions
	 */

	var core = __webpack_require__(38);
	exports.use(core);

	/*!
	 * Expect interface
	 */

	var expect = __webpack_require__(39);
	exports.use(expect);

	/*!
	 * Should interface
	 */

	var should = __webpack_require__(40);
	exports.use(should);

	/*!
	 * Assert interface
	 */

	var assert = __webpack_require__(41);
	exports.use(assert);


/***/ }),
/* 4 */
/***/ (function(module, exports) {

	/*!
	 * assertion-error
	 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
	 * MIT Licensed
	 */

	/*!
	 * Return a function that will copy properties from
	 * one object to another excluding any originally
	 * listed. Returned function will create a new `{}`.
	 *
	 * @param {String} excluded properties ...
	 * @return {Function}
	 */

	function exclude () {
	  var excludes = [].slice.call(arguments);

	  function excludeProps (res, obj) {
	    Object.keys(obj).forEach(function (key) {
	      if (!~excludes.indexOf(key)) res[key] = obj[key];
	    });
	  }

	  return function extendExclude () {
	    var args = [].slice.call(arguments)
	      , i = 0
	      , res = {};

	    for (; i < args.length; i++) {
	      excludeProps(res, args[i]);
	    }

	    return res;
	  };
	};

	/*!
	 * Primary Exports
	 */

	module.exports = AssertionError;

	/**
	 * ### AssertionError
	 *
	 * An extension of the JavaScript `Error` constructor for
	 * assertion and validation scenarios.
	 *
	 * @param {String} message
	 * @param {Object} properties to include (optional)
	 * @param {callee} start stack function (optional)
	 */

	function AssertionError (message, _props, ssf) {
	  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
	    , props = extend(_props || {});

	  // default values
	  this.message = message || 'Unspecified AssertionError';
	  this.showDiff = false;

	  // copy from properties
	  for (var key in props) {
	    this[key] = props[key];
	  }

	  // capture stack trace
	  ssf = ssf || arguments.callee;
	  if (ssf && Error.captureStackTrace) {
	    Error.captureStackTrace(this, ssf);
	  } else {
	    try {
	      throw new Error();
	    } catch(e) {
	      this.stack = e.stack;
	    }
	  }
	}

	/*!
	 * Inherit from Error.prototype
	 */

	AssertionError.prototype = Object.create(Error.prototype);

	/*!
	 * Statically set name
	 */

	AssertionError.prototype.name = 'AssertionError';

	/*!
	 * Ensure correct constructor
	 */

	AssertionError.prototype.constructor = AssertionError;

	/**
	 * Allow errors to be converted to JSON for static transfer.
	 *
	 * @param {Boolean} include stack (default: `true`)
	 * @return {Object} object that can be `JSON.stringify`
	 */

	AssertionError.prototype.toJSON = function (stack) {
	  var extend = exclude('constructor', 'toJSON', 'stack')
	    , props = extend({ name: this.name }, this);

	  // include stack if exists and not turned off
	  if (false !== stack && this.stack) {
	    props.stack = this.stack;
	  }

	  return props;
	};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Main exports
	 */

	var exports = module.exports = {};

	/*!
	 * test utility
	 */

	exports.test = __webpack_require__(6);

	/*!
	 * type utility
	 */

	exports.type = __webpack_require__(8);

	/*!
	 * expectTypes utility
	 */
	exports.expectTypes = __webpack_require__(10);

	/*!
	 * message utility
	 */

	exports.getMessage = __webpack_require__(11);

	/*!
	 * actual utility
	 */

	exports.getActual = __webpack_require__(12);

	/*!
	 * Inspect util
	 */

	exports.inspect = __webpack_require__(13);

	/*!
	 * Object Display util
	 */

	exports.objDisplay = __webpack_require__(17);

	/*!
	 * Flag utility
	 */

	exports.flag = __webpack_require__(7);

	/*!
	 * Flag transferring utility
	 */

	exports.transferFlags = __webpack_require__(19);

	/*!
	 * Deep equal utility
	 */

	exports.eql = __webpack_require__(20);

	/*!
	 * Deep path value
	 */

	exports.getPathValue = __webpack_require__(28);

	/*!
	 * Deep path info
	 */

	exports.getPathInfo = __webpack_require__(29);

	/*!
	 * Check if a property exists
	 */

	exports.hasProperty = __webpack_require__(30);

	/*!
	 * Function name
	 */

	exports.getName = __webpack_require__(14);

	/*!
	 * add Property
	 */

	exports.addProperty = __webpack_require__(31);

	/*!
	 * add Method
	 */

	exports.addMethod = __webpack_require__(32);

	/*!
	 * overwrite Property
	 */

	exports.overwriteProperty = __webpack_require__(33);

	/*!
	 * overwrite Method
	 */

	exports.overwriteMethod = __webpack_require__(34);

	/*!
	 * Add a chainable method
	 */

	exports.addChainableMethod = __webpack_require__(35);

	/*!
	 * Overwrite chainable method
	 */

	exports.overwriteChainableMethod = __webpack_require__(36);


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Chai - test utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependancies
	 */

	var flag = __webpack_require__(7);

	/**
	 * # test(object, expression)
	 *
	 * Test and object for expression.
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 * @namespace Utils
	 * @name test
	 */

	module.exports = function (obj, args) {
	  var negate = flag(obj, 'negate')
	    , expr = args[0];
	  return negate ? !expr : expr;
	};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

	/*!
	 * Chai - flag utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### flag(object, key, [value])
	 *
	 * Get or set a flag value on an object. If a
	 * value is provided it will be set, else it will
	 * return the currently set value or `undefined` if
	 * the value is not set.
	 *
	 *     utils.flag(this, 'foo', 'bar'); // setter
	 *     utils.flag(this, 'foo'); // getter, returns `bar`
	 *
	 * @param {Object} object constructed Assertion
	 * @param {String} key
	 * @param {Mixed} value (optional)
	 * @namespace Utils
	 * @name flag
	 * @api private
	 */

	module.exports = function (obj, key, value) {
	  var flags = obj.__flags || (obj.__flags = Object.create(null));
	  if (arguments.length === 3) {
	    flags[key] = value;
	  } else {
	    return flags[key];
	  }
	};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(9);


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	/*!
	 * type-detect
	 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Primary Exports
	 */

	var exports = module.exports = getType;

	/**
	 * ### typeOf (obj)
	 *
	 * Use several different techniques to determine
	 * the type of object being tested.
	 *
	 *
	 * @param {Mixed} object
	 * @return {String} object type
	 * @api public
	 */
	var objectTypeRegexp = /^\[object (.*)\]$/;

	function getType(obj) {
	  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();
	  // Let "new String('')" return 'object'
	  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';
	  // PhantomJS has type "DOMWindow" for null
	  if (obj === null) return 'null';
	  // PhantomJS has type "DOMWindow" for undefined
	  if (obj === undefined) return 'undefined';
	  return type;
	}

	exports.Library = Library;

	/**
	 * ### Library
	 *
	 * Create a repository for custom type detection.
	 *
	 * ```js
	 * var lib = new type.Library;
	 * ```
	 *
	 */

	function Library() {
	  if (!(this instanceof Library)) return new Library();
	  this.tests = {};
	}

	/**
	 * #### .of (obj)
	 *
	 * Expose replacement `typeof` detection to the library.
	 *
	 * ```js
	 * if ('string' === lib.of('hello world')) {
	 *   // ...
	 * }
	 * ```
	 *
	 * @param {Mixed} object to test
	 * @return {String} type
	 */

	Library.prototype.of = getType;

	/**
	 * #### .define (type, test)
	 *
	 * Add a test to for the `.test()` assertion.
	 *
	 * Can be defined as a regular expression:
	 *
	 * ```js
	 * lib.define('int', /^[0-9]+$/);
	 * ```
	 *
	 * ... or as a function:
	 *
	 * ```js
	 * lib.define('bln', function (obj) {
	 *   if ('boolean' === lib.of(obj)) return true;
	 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
	 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
	 *   return !! ~blns.indexOf(obj);
	 * });
	 * ```
	 *
	 * @param {String} type
	 * @param {RegExp|Function} test
	 * @api public
	 */

	Library.prototype.define = function(type, test) {
	  if (arguments.length === 1) return this.tests[type];
	  this.tests[type] = test;
	  return this;
	};

	/**
	 * #### .test (obj, test)
	 *
	 * Assert that an object is of type. Will first
	 * check natives, and if that does not pass it will
	 * use the user defined custom tests.
	 *
	 * ```js
	 * assert(lib.test('1', 'int'));
	 * assert(lib.test('yes', 'bln'));
	 * ```
	 *
	 * @param {Mixed} object
	 * @param {String} type
	 * @return {Boolean} result
	 * @api public
	 */

	Library.prototype.test = function(obj, type) {
	  if (type === getType(obj)) return true;
	  var test = this.tests[type];

	  if (test && 'regexp' === getType(test)) {
	    return test.test(obj);
	  } else if (test && 'function' === getType(test)) {
	    return test(obj);
	  } else {
	    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
	  }
	};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Chai - expectTypes utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### expectTypes(obj, types)
	 *
	 * Ensures that the object being tested against is of a valid type.
	 *
	 *     utils.expectTypes(this, ['array', 'object', 'string']);
	 *
	 * @param {Mixed} obj constructed Assertion
	 * @param {Array} type A list of allowed types for this assertion
	 * @namespace Utils
	 * @name expectTypes
	 * @api public
	 */

	var AssertionError = __webpack_require__(4);
	var flag = __webpack_require__(7);
	var type = __webpack_require__(8);

	module.exports = function (obj, types) {
	  var obj = flag(obj, 'object');
	  types = types.map(function (t) { return t.toLowerCase(); });
	  types.sort();

	  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'
	  var str = types.map(function (t, index) {
	    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';
	    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
	    return or + art + ' ' + t;
	  }).join(', ');

	  if (!types.some(function (expected) { return type(obj) === expected; })) {
	    throw new AssertionError(
	      'object tested must be ' + str + ', but ' + type(obj) + ' given'
	    );
	  }
	};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Chai - message composition utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependancies
	 */

	var flag = __webpack_require__(7)
	  , getActual = __webpack_require__(12)
	  , inspect = __webpack_require__(13)
	  , objDisplay = __webpack_require__(17);

	/**
	 * ### .getMessage(object, message, negateMessage)
	 *
	 * Construct the error message based on flags
	 * and template tags. Template tags will return
	 * a stringified inspection of the object referenced.
	 *
	 * Message template tags:
	 * - `#{this}` current asserted object
	 * - `#{act}` actual value
	 * - `#{exp}` expected value
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 * @namespace Utils
	 * @name getMessage
	 * @api public
	 */

	module.exports = function (obj, args) {
	  var negate = flag(obj, 'negate')
	    , val = flag(obj, 'object')
	    , expected = args[3]
	    , actual = getActual(obj, args)
	    , msg = negate ? args[2] : args[1]
	    , flagMsg = flag(obj, 'message');

	  if(typeof msg === "function") msg = msg();
	  msg = msg || '';
	  msg = msg
	    .replace(/#\{this\}/g, function () { return objDisplay(val); })
	    .replace(/#\{act\}/g, function () { return objDisplay(actual); })
	    .replace(/#\{exp\}/g, function () { return objDisplay(expected); });

	  return flagMsg ? flagMsg + ': ' + msg : msg;
	};


/***/ }),
/* 12 */
/***/ (function(module, exports) {

	/*!
	 * Chai - getActual utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * # getActual(object, [actual])
	 *
	 * Returns the `actual` value for an Assertion
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 * @namespace Utils
	 * @name getActual
	 */

	module.exports = function (obj, args) {
	  return args.length > 4 ? args[4] : obj._obj;
	};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	// This is (almost) directly from Node.js utils
	// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

	var getName = __webpack_require__(14);
	var getProperties = __webpack_require__(15);
	var getEnumerableProperties = __webpack_require__(16);

	module.exports = inspect;

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
	 *    properties of objects.
	 * @param {Number} depth Depth in which to descend in object. Default is 2.
	 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
	 *    output. Default is false (no coloring).
	 * @namespace Utils
	 * @name inspect
	 */
	function inspect(obj, showHidden, depth, colors) {
	  var ctx = {
	    showHidden: showHidden,
	    seen: [],
	    stylize: function (str) { return str; }
	  };
	  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
	}

	// Returns true if object is a DOM element.
	var isDOMElement = function (object) {
	  if (typeof HTMLElement === 'object') {
	    return object instanceof HTMLElement;
	  } else {
	    return object &&
	      typeof object === 'object' &&
	      object.nodeType === 1 &&
	      typeof object.nodeName === 'string';
	  }
	};

	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (value && typeof value.inspect === 'function' &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes);
	    if (typeof ret !== 'string') {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // If this is a DOM element, try to get the outer HTML.
	  if (isDOMElement(value)) {
	    if ('outerHTML' in value) {
	      return value.outerHTML;
	      // This value does not have an outerHTML attribute,
	      //   it could still be an XML element
	    } else {
	      // Attempt to serialize it
	      try {
	        if (document.xmlVersion) {
	          var xmlSerializer = new XMLSerializer();
	          return xmlSerializer.serializeToString(value);
	        } else {
	          // Firefox 11- do not support outerHTML
	          //   It does, however, support innerHTML
	          //   Use the following to render the element
	          var ns = "http://www.w3.org/1999/xhtml";
	          var container = document.createElementNS(ns, '_');

	          container.appendChild(value.cloneNode(false));
	          html = container.innerHTML
	            .replace('><', '>' + value.innerHTML + '<');
	          container.innerHTML = '';
	          return html;
	        }
	      } catch (err) {
	        // This could be a non-native DOM implementation,
	        //   continue with the normal flow:
	        //   printing the element as if it is an object.
	      }
	    }
	  }

	  // Look up the keys of the object.
	  var visibleKeys = getEnumerableProperties(value);
	  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

	  // Some type of object without properties can be shortcutted.
	  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
	  // a `stack` plus `description` property; ignore those for consistency.
	  if (keys.length === 0 || (isError(value) && (
	      (keys.length === 1 && keys[0] === 'stack') ||
	      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
	     ))) {
	    if (typeof value === 'function') {
	      var name = getName(value);
	      var nameSuffix = name ? ': ' + name : '';
	      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (typeof value === 'function') {
	    var name = getName(value);
	    var nameSuffix = name ? ': ' + name : '';
	    base = ' [Function' + nameSuffix + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    return formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  switch (typeof value) {
	    case 'undefined':
	      return ctx.stylize('undefined', 'undefined');

	    case 'string':
	      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                               .replace(/'/g, "\\'")
	                                               .replace(/\\"/g, '"') + '\'';
	      return ctx.stylize(simple, 'string');

	    case 'number':
	      if (value === 0 && (1/value) === -Infinity) {
	        return ctx.stylize('-0', 'number');
	      }
	      return ctx.stylize('' + value, 'number');

	    case 'boolean':
	      return ctx.stylize('' + value, 'boolean');
	  }
	  // For some reason typeof null is "object", so special case here.
	  if (value === null) {
	    return ctx.stylize('null', 'null');
	  }
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str;
	  if (value.__lookupGetter__) {
	    if (value.__lookupGetter__(key)) {
	      if (value.__lookupSetter__(key)) {
	        str = ctx.stylize('[Getter/Setter]', 'special');
	      } else {
	        str = ctx.stylize('[Getter]', 'special');
	      }
	    } else {
	      if (value.__lookupSetter__(key)) {
	        str = ctx.stylize('[Setter]', 'special');
	      }
	    }
	  }
	  if (visibleKeys.indexOf(key) < 0) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(value[key]) < 0) {
	      if (recurseTimes === null) {
	        str = formatValue(ctx, value[key], null);
	      } else {
	        str = formatValue(ctx, value[key], recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (typeof name === 'undefined') {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}

	function isArray(ar) {
	  return Array.isArray(ar) ||
	         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
	}

	function isRegExp(re) {
	  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
	}

	function isDate(d) {
	  return typeof d === 'object' && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return typeof e === 'object' && objectToString(e) === '[object Error]';
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	/*!
	 * Chai - getName utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * # getName(func)
	 *
	 * Gets the name of a function, in a cross-browser way.
	 *
	 * @param {Function} a function (usually a constructor)
	 * @namespace Utils
	 * @name getName
	 */

	module.exports = function (func) {
	  if (func.name) return func.name;

	  var match = /^\s?function ([^(]*)\(/.exec(func);
	  return match && match[1] ? match[1] : "";
	};


/***/ }),
/* 15 */
/***/ (function(module, exports) {

	/*!
	 * Chai - getProperties utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### .getProperties(object)
	 *
	 * This allows the retrieval of property names of an object, enumerable or not,
	 * inherited or not.
	 *
	 * @param {Object} object
	 * @returns {Array}
	 * @namespace Utils
	 * @name getProperties
	 * @api public
	 */

	module.exports = function getProperties(object) {
	  var result = Object.getOwnPropertyNames(object);

	  function addProperty(property) {
	    if (result.indexOf(property) === -1) {
	      result.push(property);
	    }
	  }

	  var proto = Object.getPrototypeOf(object);
	  while (proto !== null) {
	    Object.getOwnPropertyNames(proto).forEach(addProperty);
	    proto = Object.getPrototypeOf(proto);
	  }

	  return result;
	};


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/*!
	 * Chai - getEnumerableProperties utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### .getEnumerableProperties(object)
	 *
	 * This allows the retrieval of enumerable property names of an object,
	 * inherited or not.
	 *
	 * @param {Object} object
	 * @returns {Array}
	 * @namespace Utils
	 * @name getEnumerableProperties
	 * @api public
	 */

	module.exports = function getEnumerableProperties(object) {
	  var result = [];
	  for (var name in object) {
	    result.push(name);
	  }
	  return result;
	};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Chai - flag utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependancies
	 */

	var inspect = __webpack_require__(13);
	var config = __webpack_require__(18);

	/**
	 * ### .objDisplay (object)
	 *
	 * Determines if an object or an array matches
	 * criteria to be inspected in-line for error
	 * messages or should be truncated.
	 *
	 * @param {Mixed} javascript object to inspect
	 * @name objDisplay
	 * @namespace Utils
	 * @api public
	 */

	module.exports = function (obj) {
	  var str = inspect(obj)
	    , type = Object.prototype.toString.call(obj);

	  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
	    if (type === '[object Function]') {
	      return !obj.name || obj.name === ''
	        ? '[Function]'
	        : '[Function: ' + obj.name + ']';
	    } else if (type === '[object Array]') {
	      return '[ Array(' + obj.length + ') ]';
	    } else if (type === '[object Object]') {
	      var keys = Object.keys(obj)
	        , kstr = keys.length > 2
	          ? keys.splice(0, 2).join(', ') + ', ...'
	          : keys.join(', ');
	      return '{ Object (' + kstr + ') }';
	    } else {
	      return str;
	    }
	  } else {
	    return str;
	  }
	};


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	module.exports = {

	  /**
	   * ### config.includeStack
	   *
	   * User configurable property, influences whether stack trace
	   * is included in Assertion error message. Default of false
	   * suppresses stack trace in the error message.
	   *
	   *     chai.config.includeStack = true;  // enable stack on error
	   *
	   * @param {Boolean}
	   * @api public
	   */

	   includeStack: false,

	  /**
	   * ### config.showDiff
	   *
	   * User configurable property, influences whether or not
	   * the `showDiff` flag should be included in the thrown
	   * AssertionErrors. `false` will always be `false`; `true`
	   * will be true when the assertion has requested a diff
	   * be shown.
	   *
	   * @param {Boolean}
	   * @api public
	   */

	  showDiff: true,

	  /**
	   * ### config.truncateThreshold
	   *
	   * User configurable property, sets length threshold for actual and
	   * expected values in assertion errors. If this threshold is exceeded, for
	   * example for large data structures, the value is replaced with something
	   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
	   *
	   * Set it to zero if you want to disable truncating altogether.
	   *
	   * This is especially userful when doing assertions on arrays: having this
	   * set to a reasonable large value makes the failure messages readily
	   * inspectable.
	   *
	   *     chai.config.truncateThreshold = 0;  // disable truncating
	   *
	   * @param {Number}
	   * @api public
	   */

	  truncateThreshold: 40

	};


/***/ }),
/* 19 */
/***/ (function(module, exports) {

	/*!
	 * Chai - transferFlags utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### transferFlags(assertion, object, includeAll = true)
	 *
	 * Transfer all the flags for `assertion` to `object`. If
	 * `includeAll` is set to `false`, then the base Chai
	 * assertion flags (namely `object`, `ssfi`, and `message`)
	 * will not be transferred.
	 *
	 *
	 *     var newAssertion = new Assertion();
	 *     utils.transferFlags(assertion, newAssertion);
	 *
	 *     var anotherAsseriton = new Assertion(myObj);
	 *     utils.transferFlags(assertion, anotherAssertion, false);
	 *
	 * @param {Assertion} assertion the assertion to transfer the flags from
	 * @param {Object} object the object to transfer the flags to; usually a new assertion
	 * @param {Boolean} includeAll
	 * @namespace Utils
	 * @name transferFlags
	 * @api private
	 */

	module.exports = function (assertion, object, includeAll) {
	  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

	  if (!object.__flags) {
	    object.__flags = Object.create(null);
	  }

	  includeAll = arguments.length === 3 ? includeAll : true;

	  for (var flag in flags) {
	    if (includeAll ||
	        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {
	      object.__flags[flag] = flags[flag];
	    }
	  }
	};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(21);


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * deep-eql
	 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependencies
	 */

	var type = __webpack_require__(22);

	/*!
	 * Buffer.isBuffer browser shim
	 */

	var Buffer;
	try { Buffer = __webpack_require__(24).Buffer; }
	catch(ex) {
	  Buffer = {};
	  Buffer.isBuffer = function() { return false; }
	}

	/*!
	 * Primary Export
	 */

	module.exports = deepEqual;

	/**
	 * Assert super-strict (egal) equality between
	 * two objects of any type.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @param {Array} memoised (optional)
	 * @return {Boolean} equal match
	 */

	function deepEqual(a, b, m) {
	  if (sameValue(a, b)) {
	    return true;
	  } else if ('date' === type(a)) {
	    return dateEqual(a, b);
	  } else if ('regexp' === type(a)) {
	    return regexpEqual(a, b);
	  } else if (Buffer.isBuffer(a)) {
	    return bufferEqual(a, b);
	  } else if ('arguments' === type(a)) {
	    return argumentsEqual(a, b, m);
	  } else if (!typeEqual(a, b)) {
	    return false;
	  } else if (('object' !== type(a) && 'object' !== type(b))
	  && ('array' !== type(a) && 'array' !== type(b))) {
	    return sameValue(a, b);
	  } else {
	    return objectEqual(a, b, m);
	  }
	}

	/*!
	 * Strict (egal) equality test. Ensures that NaN always
	 * equals NaN and `-0` does not equal `+0`.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} equal match
	 */

	function sameValue(a, b) {
	  if (a === b) return a !== 0 || 1 / a === 1 / b;
	  return a !== a && b !== b;
	}

	/*!
	 * Compare the types of two given objects and
	 * return if they are equal. Note that an Array
	 * has a type of `array` (not `object`) and arguments
	 * have a type of `arguments` (not `array`/`object`).
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */

	function typeEqual(a, b) {
	  return type(a) === type(b);
	}

	/*!
	 * Compare two Date objects by asserting that
	 * the time values are equal using `saveValue`.
	 *
	 * @param {Date} a
	 * @param {Date} b
	 * @return {Boolean} result
	 */

	function dateEqual(a, b) {
	  if ('date' !== type(b)) return false;
	  return sameValue(a.getTime(), b.getTime());
	}

	/*!
	 * Compare two regular expressions by converting them
	 * to string and checking for `sameValue`.
	 *
	 * @param {RegExp} a
	 * @param {RegExp} b
	 * @return {Boolean} result
	 */

	function regexpEqual(a, b) {
	  if ('regexp' !== type(b)) return false;
	  return sameValue(a.toString(), b.toString());
	}

	/*!
	 * Assert deep equality of two `arguments` objects.
	 * Unfortunately, these must be sliced to arrays
	 * prior to test to ensure no bad behavior.
	 *
	 * @param {Arguments} a
	 * @param {Arguments} b
	 * @param {Array} memoize (optional)
	 * @return {Boolean} result
	 */

	function argumentsEqual(a, b, m) {
	  if ('arguments' !== type(b)) return false;
	  a = [].slice.call(a);
	  b = [].slice.call(b);
	  return deepEqual(a, b, m);
	}

	/*!
	 * Get enumerable properties of a given object.
	 *
	 * @param {Object} a
	 * @return {Array} property names
	 */

	function enumerable(a) {
	  var res = [];
	  for (var key in a) res.push(key);
	  return res;
	}

	/*!
	 * Simple equality for flat iterable objects
	 * such as Arrays or Node.js buffers.
	 *
	 * @param {Iterable} a
	 * @param {Iterable} b
	 * @return {Boolean} result
	 */

	function iterableEqual(a, b) {
	  if (a.length !==  b.length) return false;

	  var i = 0;
	  var match = true;

	  for (; i < a.length; i++) {
	    if (a[i] !== b[i]) {
	      match = false;
	      break;
	    }
	  }

	  return match;
	}

	/*!
	 * Extension to `iterableEqual` specifically
	 * for Node.js Buffers.
	 *
	 * @param {Buffer} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */

	function bufferEqual(a, b) {
	  if (!Buffer.isBuffer(b)) return false;
	  return iterableEqual(a, b);
	}

	/*!
	 * Block for `objectEqual` ensuring non-existing
	 * values don't get in.
	 *
	 * @param {Mixed} object
	 * @return {Boolean} result
	 */

	function isValue(a) {
	  return a !== null && a !== undefined;
	}

	/*!
	 * Recursively check the equality of two objects.
	 * Once basic sameness has been established it will
	 * defer to `deepEqual` for each enumerable key
	 * in the object.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */

	function objectEqual(a, b, m) {
	  if (!isValue(a) || !isValue(b)) {
	    return false;
	  }

	  if (a.prototype !== b.prototype) {
	    return false;
	  }

	  var i;
	  if (m) {
	    for (i = 0; i < m.length; i++) {
	      if ((m[i][0] === a && m[i][1] === b)
	      ||  (m[i][0] === b && m[i][1] === a)) {
	        return true;
	      }
	    }
	  } else {
	    m = [];
	  }

	  try {
	    var ka = enumerable(a);
	    var kb = enumerable(b);
	  } catch (ex) {
	    return false;
	  }

	  ka.sort();
	  kb.sort();

	  if (!iterableEqual(ka, kb)) {
	    return false;
	  }

	  m.push([ a, b ]);

	  var key;
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], m)) {
	      return false;
	    }
	  }

	  return true;
	}


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(23);


/***/ }),
/* 23 */
/***/ (function(module, exports) {

	/*!
	 * type-detect
	 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Primary Exports
	 */

	var exports = module.exports = getType;

	/*!
	 * Detectable javascript natives
	 */

	var natives = {
	    '[object Array]': 'array'
	  , '[object RegExp]': 'regexp'
	  , '[object Function]': 'function'
	  , '[object Arguments]': 'arguments'
	  , '[object Date]': 'date'
	};

	/**
	 * ### typeOf (obj)
	 *
	 * Use several different techniques to determine
	 * the type of object being tested.
	 *
	 *
	 * @param {Mixed} object
	 * @return {String} object type
	 * @api public
	 */

	function getType (obj) {
	  var str = Object.prototype.toString.call(obj);
	  if (natives[str]) return natives[str];
	  if (obj === null) return 'null';
	  if (obj === undefined) return 'undefined';
	  if (obj === Object(obj)) return 'object';
	  return typeof obj;
	}

	exports.Library = Library;

	/**
	 * ### Library
	 *
	 * Create a repository for custom type detection.
	 *
	 * ```js
	 * var lib = new type.Library;
	 * ```
	 *
	 */

	function Library () {
	  this.tests = {};
	}

	/**
	 * #### .of (obj)
	 *
	 * Expose replacement `typeof` detection to the library.
	 *
	 * ```js
	 * if ('string' === lib.of('hello world')) {
	 *   // ...
	 * }
	 * ```
	 *
	 * @param {Mixed} object to test
	 * @return {String} type
	 */

	Library.prototype.of = getType;

	/**
	 * #### .define (type, test)
	 *
	 * Add a test to for the `.test()` assertion.
	 *
	 * Can be defined as a regular expression:
	 *
	 * ```js
	 * lib.define('int', /^[0-9]+$/);
	 * ```
	 *
	 * ... or as a function:
	 *
	 * ```js
	 * lib.define('bln', function (obj) {
	 *   if ('boolean' === lib.of(obj)) return true;
	 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
	 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
	 *   return !! ~blns.indexOf(obj);
	 * });
	 * ```
	 *
	 * @param {String} type
	 * @param {RegExp|Function} test
	 * @api public
	 */

	Library.prototype.define = function (type, test) {
	  if (arguments.length === 1) return this.tests[type];
	  this.tests[type] = test;
	  return this;
	};

	/**
	 * #### .test (obj, test)
	 *
	 * Assert that an object is of type. Will first
	 * check natives, and if that does not pass it will
	 * use the user defined custom tests.
	 *
	 * ```js
	 * assert(lib.test('1', 'int'));
	 * assert(lib.test('yes', 'bln'));
	 * ```
	 *
	 * @param {Mixed} object
	 * @param {String} type
	 * @return {Boolean} result
	 * @api public
	 */

	Library.prototype.test = function (obj, type) {
	  if (type === getType(obj)) return true;
	  var test = this.tests[type];

	  if (test && 'regexp' === getType(test)) {
	    return test.test(obj);
	  } else if (test && 'function' === getType(test)) {
	    return test(obj);
	  } else {
	    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
	  }
	};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(25)
	var ieee754 = __webpack_require__(26)
	var isArray = __webpack_require__(27)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return (b64.length * 3 / 4) - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr((len * 3 / 4) - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0; i < l; i += 4) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ }),
/* 26 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getPathValue utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * @see https://github.com/logicalparadox/filtr
	 * MIT Licensed
	 */

	var getPathInfo = __webpack_require__(29);

	/**
	 * ### .getPathValue(path, object)
	 *
	 * This allows the retrieval of values in an
	 * object given a string path.
	 *
	 *     var obj = {
	 *         prop1: {
	 *             arr: ['a', 'b', 'c']
	 *           , str: 'Hello'
	 *         }
	 *       , prop2: {
	 *             arr: [ { nested: 'Universe' } ]
	 *           , str: 'Hello again!'
	 *         }
	 *     }
	 *
	 * The following would be the results.
	 *
	 *     getPathValue('prop1.str', obj); // Hello
	 *     getPathValue('prop1.att[2]', obj); // b
	 *     getPathValue('prop2.arr[0].nested', obj); // Universe
	 *
	 * @param {String} path
	 * @param {Object} object
	 * @returns {Object} value or `undefined`
	 * @namespace Utils
	 * @name getPathValue
	 * @api public
	 */
	module.exports = function(path, obj) {
	  var info = getPathInfo(path, obj);
	  return info.value;
	};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getPathInfo utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var hasProperty = __webpack_require__(30);

	/**
	 * ### .getPathInfo(path, object)
	 *
	 * This allows the retrieval of property info in an
	 * object given a string path.
	 *
	 * The path info consists of an object with the
	 * following properties:
	 *
	 * * parent - The parent object of the property referenced by `path`
	 * * name - The name of the final property, a number if it was an array indexer
	 * * value - The value of the property, if it exists, otherwise `undefined`
	 * * exists - Whether the property exists or not
	 *
	 * @param {String} path
	 * @param {Object} object
	 * @returns {Object} info
	 * @namespace Utils
	 * @name getPathInfo
	 * @api public
	 */

	module.exports = function getPathInfo(path, obj) {
	  var parsed = parsePath(path),
	      last = parsed[parsed.length - 1];

	  var info = {
	    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,
	    name: last.p || last.i,
	    value: _getPathValue(parsed, obj)
	  };
	  info.exists = hasProperty(info.name, info.parent);

	  return info;
	};


	/*!
	 * ## parsePath(path)
	 *
	 * Helper function used to parse string object
	 * paths. Use in conjunction with `_getPathValue`.
	 *
	 *      var parsed = parsePath('myobject.property.subprop');
	 *
	 * ### Paths:
	 *
	 * * Can be as near infinitely deep and nested
	 * * Arrays are also valid using the formal `myobject.document[3].property`.
	 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
	 *
	 * @param {String} path
	 * @returns {Object} parsed
	 * @api private
	 */

	function parsePath (path) {
	  var str = path.replace(/([^\\])\[/g, '$1.[')
	    , parts = str.match(/(\\\.|[^.]+?)+/g);
	  return parts.map(function (value) {
	    var re = /^\[(\d+)\]$/
	      , mArr = re.exec(value);
	    if (mArr) return { i: parseFloat(mArr[1]) };
	    else return { p: value.replace(/\\([.\[\]])/g, '$1') };
	  });
	}


	/*!
	 * ## _getPathValue(parsed, obj)
	 *
	 * Helper companion function for `.parsePath` that returns
	 * the value located at the parsed address.
	 *
	 *      var value = getPathValue(parsed, obj);
	 *
	 * @param {Object} parsed definition from `parsePath`.
	 * @param {Object} object to search against
	 * @param {Number} object to search against
	 * @returns {Object|Undefined} value
	 * @api private
	 */

	function _getPathValue (parsed, obj, index) {
	  var tmp = obj
	    , res;

	  index = (index === undefined ? parsed.length : index);

	  for (var i = 0, l = index; i < l; i++) {
	    var part = parsed[i];
	    if (tmp) {
	      if ('undefined' !== typeof part.p)
	        tmp = tmp[part.p];
	      else if ('undefined' !== typeof part.i)
	        tmp = tmp[part.i];
	      if (i == (l - 1)) res = tmp;
	    } else {
	      res = undefined;
	    }
	  }
	  return res;
	}


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Chai - hasProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var type = __webpack_require__(8);

	/**
	 * ### .hasProperty(object, name)
	 *
	 * This allows checking whether an object has
	 * named property or numeric array index.
	 *
	 * Basically does the same thing as the `in`
	 * operator but works properly with natives
	 * and null/undefined values.
	 *
	 *     var obj = {
	 *         arr: ['a', 'b', 'c']
	 *       , str: 'Hello'
	 *     }
	 *
	 * The following would be the results.
	 *
	 *     hasProperty('str', obj);  // true
	 *     hasProperty('constructor', obj);  // true
	 *     hasProperty('bar', obj);  // false
	 *
	 *     hasProperty('length', obj.str); // true
	 *     hasProperty(1, obj.str);  // true
	 *     hasProperty(5, obj.str);  // false
	 *
	 *     hasProperty('length', obj.arr);  // true
	 *     hasProperty(2, obj.arr);  // true
	 *     hasProperty(3, obj.arr);  // false
	 *
	 * @param {Objuect} object
	 * @param {String|Number} name
	 * @returns {Boolean} whether it exists
	 * @namespace Utils
	 * @name getPathInfo
	 * @api public
	 */

	var literals = {
	    'number': Number
	  , 'string': String
	};

	module.exports = function hasProperty(name, obj) {
	  var ot = type(obj);

	  // Bad Object, obviously no props at all
	  if(ot === 'null' || ot === 'undefined')
	    return false;

	  // The `in` operator does not work with certain literals
	  // box these before the check
	  if(literals[ot] && typeof obj !== 'object')
	    obj = new literals[ot](obj);

	  return name in obj;
	};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var config = __webpack_require__(18);
	var flag = __webpack_require__(7);

	/**
	 * ### addProperty (ctx, name, getter)
	 *
	 * Adds a property to the prototype of an object.
	 *
	 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.instanceof(Foo);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addProperty('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.be.foo;
	 *
	 * @param {Object} ctx object to which the property is added
	 * @param {String} name of property to add
	 * @param {Function} getter function to be used for name
	 * @namespace Utils
	 * @name addProperty
	 * @api public
	 */

	module.exports = function (ctx, name, getter) {
	  Object.defineProperty(ctx, name,
	    { get: function addProperty() {
	        var old_ssfi = flag(this, 'ssfi');
	        if (old_ssfi && config.includeStack === false)
	          flag(this, 'ssfi', addProperty);

	        var result = getter.call(this);
	        return result === undefined ? this : result;
	      }
	    , configurable: true
	  });
	};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var config = __webpack_require__(18);

	/**
	 * ### .addMethod (ctx, name, method)
	 *
	 * Adds a method to the prototype of an object.
	 *
	 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.equal(str);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addMethod('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(fooStr).to.be.foo('bar');
	 *
	 * @param {Object} ctx object to which the method is added
	 * @param {String} name of method to add
	 * @param {Function} method function to be used for name
	 * @namespace Utils
	 * @name addMethod
	 * @api public
	 */
	var flag = __webpack_require__(7);

	module.exports = function (ctx, name, method) {
	  ctx[name] = function () {
	    var old_ssfi = flag(this, 'ssfi');
	    if (old_ssfi && config.includeStack === false)
	      flag(this, 'ssfi', ctx[name]);
	    var result = method.apply(this, arguments);
	    return result === undefined ? this : result;
	  };
	};


/***/ }),
/* 33 */
/***/ (function(module, exports) {

	/*!
	 * Chai - overwriteProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### overwriteProperty (ctx, name, fn)
	 *
	 * Overwites an already existing property getter and provides
	 * access to previous value. Must return function to use as getter.
	 *
	 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
	 *       return function () {
	 *         var obj = utils.flag(this, 'object');
	 *         if (obj instanceof Foo) {
	 *           new chai.Assertion(obj.name).to.equal('bar');
	 *         } else {
	 *           _super.call(this);
	 *         }
	 *       }
	 *     });
	 *
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteProperty('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.be.ok;
	 *
	 * @param {Object} ctx object whose property is to be overwritten
	 * @param {String} name of property to overwrite
	 * @param {Function} getter function that returns a getter function to be used for name
	 * @namespace Utils
	 * @name overwriteProperty
	 * @api public
	 */

	module.exports = function (ctx, name, getter) {
	  var _get = Object.getOwnPropertyDescriptor(ctx, name)
	    , _super = function () {};

	  if (_get && 'function' === typeof _get.get)
	    _super = _get.get

	  Object.defineProperty(ctx, name,
	    { get: function () {
	        var result = getter(_super).call(this);
	        return result === undefined ? this : result;
	      }
	    , configurable: true
	  });
	};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

	/*!
	 * Chai - overwriteMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### overwriteMethod (ctx, name, fn)
	 *
	 * Overwites an already existing method and provides
	 * access to previous function. Must return function
	 * to be used for name.
	 *
	 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
	 *       return function (str) {
	 *         var obj = utils.flag(this, 'object');
	 *         if (obj instanceof Foo) {
	 *           new chai.Assertion(obj.value).to.equal(str);
	 *         } else {
	 *           _super.apply(this, arguments);
	 *         }
	 *       }
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteMethod('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.equal('bar');
	 *
	 * @param {Object} ctx object whose method is to be overwritten
	 * @param {String} name of method to overwrite
	 * @param {Function} method function that returns a function to be used for name
	 * @namespace Utils
	 * @name overwriteMethod
	 * @api public
	 */

	module.exports = function (ctx, name, method) {
	  var _method = ctx[name]
	    , _super = function () { return this; };

	  if (_method && 'function' === typeof _method)
	    _super = _method;

	  ctx[name] = function () {
	    var result = method(_super).apply(this, arguments);
	    return result === undefined ? this : result;
	  }
	};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addChainingMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependencies
	 */

	var transferFlags = __webpack_require__(19);
	var flag = __webpack_require__(7);
	var config = __webpack_require__(18);

	/*!
	 * Module variables
	 */

	// Check whether `__proto__` is supported
	var hasProtoSupport = '__proto__' in Object;

	// Without `__proto__` support, this module will need to add properties to a function.
	// However, some Function.prototype methods cannot be overwritten,
	// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).
	var excludeNames = /^(?:length|name|arguments|caller)$/;

	// Cache `Function` properties
	var call  = Function.prototype.call,
	    apply = Function.prototype.apply;

	/**
	 * ### addChainableMethod (ctx, name, method, chainingBehavior)
	 *
	 * Adds a method to an object, such that the method can also be chained.
	 *
	 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.equal(str);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
	 *
	 * The result can then be used as both a method assertion, executing both `method` and
	 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
	 *
	 *     expect(fooStr).to.be.foo('bar');
	 *     expect(fooStr).to.be.foo.equal('foo');
	 *
	 * @param {Object} ctx object to which the method is added
	 * @param {String} name of method to add
	 * @param {Function} method function to be used for `name`, when called
	 * @param {Function} chainingBehavior function to be called every time the property is accessed
	 * @namespace Utils
	 * @name addChainableMethod
	 * @api public
	 */

	module.exports = function (ctx, name, method, chainingBehavior) {
	  if (typeof chainingBehavior !== 'function') {
	    chainingBehavior = function () { };
	  }

	  var chainableBehavior = {
	      method: method
	    , chainingBehavior: chainingBehavior
	  };

	  // save the methods so we can overwrite them later, if we need to.
	  if (!ctx.__methods) {
	    ctx.__methods = {};
	  }
	  ctx.__methods[name] = chainableBehavior;

	  Object.defineProperty(ctx, name,
	    { get: function () {
	        chainableBehavior.chainingBehavior.call(this);

	        var assert = function assert() {
	          var old_ssfi = flag(this, 'ssfi');
	          if (old_ssfi && config.includeStack === false)
	            flag(this, 'ssfi', assert);
	          var result = chainableBehavior.method.apply(this, arguments);
	          return result === undefined ? this : result;
	        };

	        // Use `__proto__` if available
	        if (hasProtoSupport) {
	          // Inherit all properties from the object by replacing the `Function` prototype
	          var prototype = assert.__proto__ = Object.create(this);
	          // Restore the `call` and `apply` methods from `Function`
	          prototype.call = call;
	          prototype.apply = apply;
	        }
	        // Otherwise, redefine all properties (slow!)
	        else {
	          var asserterNames = Object.getOwnPropertyNames(ctx);
	          asserterNames.forEach(function (asserterName) {
	            if (!excludeNames.test(asserterName)) {
	              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
	              Object.defineProperty(assert, asserterName, pd);
	            }
	          });
	        }

	        transferFlags(this, assert);
	        return assert;
	      }
	    , configurable: true
	  });
	};


/***/ }),
/* 36 */
/***/ (function(module, exports) {

	/*!
	 * Chai - overwriteChainableMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)
	 *
	 * Overwites an already existing chainable method
	 * and provides access to the previous function or
	 * property.  Must return functions to be used for
	 * name.
	 *
	 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',
	 *       function (_super) {
	 *       }
	 *     , function (_super) {
	 *       }
	 *     );
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.have.length(3);
	 *     expect(myFoo).to.have.length.above(3);
	 *
	 * @param {Object} ctx object whose method / property is to be overwritten
	 * @param {String} name of method / property to overwrite
	 * @param {Function} method function that returns a function to be used for name
	 * @param {Function} chainingBehavior function that returns a function to be used for property
	 * @namespace Utils
	 * @name overwriteChainableMethod
	 * @api public
	 */

	module.exports = function (ctx, name, method, chainingBehavior) {
	  var chainableBehavior = ctx.__methods[name];

	  var _chainingBehavior = chainableBehavior.chainingBehavior;
	  chainableBehavior.chainingBehavior = function () {
	    var result = chainingBehavior(_chainingBehavior).call(this);
	    return result === undefined ? this : result;
	  };

	  var _method = chainableBehavior.method;
	  chainableBehavior.method = function () {
	    var result = method(_method).apply(this, arguments);
	    return result === undefined ? this : result;
	  };
	};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * http://chaijs.com
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var config = __webpack_require__(18);

	module.exports = function (_chai, util) {
	  /*!
	   * Module dependencies.
	   */

	  var AssertionError = _chai.AssertionError
	    , flag = util.flag;

	  /*!
	   * Module export.
	   */

	  _chai.Assertion = Assertion;

	  /*!
	   * Assertion Constructor
	   *
	   * Creates object for chaining.
	   *
	   * @api private
	   */

	  function Assertion (obj, msg, stack) {
	    flag(this, 'ssfi', stack || arguments.callee);
	    flag(this, 'object', obj);
	    flag(this, 'message', msg);
	  }

	  Object.defineProperty(Assertion, 'includeStack', {
	    get: function() {
	      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
	      return config.includeStack;
	    },
	    set: function(value) {
	      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
	      config.includeStack = value;
	    }
	  });

	  Object.defineProperty(Assertion, 'showDiff', {
	    get: function() {
	      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
	      return config.showDiff;
	    },
	    set: function(value) {
	      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
	      config.showDiff = value;
	    }
	  });

	  Assertion.addProperty = function (name, fn) {
	    util.addProperty(this.prototype, name, fn);
	  };

	  Assertion.addMethod = function (name, fn) {
	    util.addMethod(this.prototype, name, fn);
	  };

	  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
	    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
	  };

	  Assertion.overwriteProperty = function (name, fn) {
	    util.overwriteProperty(this.prototype, name, fn);
	  };

	  Assertion.overwriteMethod = function (name, fn) {
	    util.overwriteMethod(this.prototype, name, fn);
	  };

	  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
	    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
	  };

	  /**
	   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
	   *
	   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
	   *
	   * @name assert
	   * @param {Philosophical} expression to be tested
	   * @param {String|Function} message or function that returns message to display if expression fails
	   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
	   * @param {Mixed} expected value (remember to check for negation)
	   * @param {Mixed} actual (optional) will default to `this.obj`
	   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
	   * @api private
	   */

	  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
	    var ok = util.test(this, arguments);
	    if (true !== showDiff) showDiff = false;
	    if (true !== config.showDiff) showDiff = false;

	    if (!ok) {
	      var msg = util.getMessage(this, arguments)
	        , actual = util.getActual(this, arguments);
	      throw new AssertionError(msg, {
	          actual: actual
	        , expected: expected
	        , showDiff: showDiff
	      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
	    }
	  };

	  /*!
	   * ### ._obj
	   *
	   * Quick reference to stored `actual` value for plugin developers.
	   *
	   * @api private
	   */

	  Object.defineProperty(Assertion.prototype, '_obj',
	    { get: function () {
	        return flag(this, 'object');
	      }
	    , set: function (val) {
	        flag(this, 'object', val);
	      }
	  });
	};


/***/ }),
/* 38 */
/***/ (function(module, exports) {

	/*!
	 * chai
	 * http://chaijs.com
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	module.exports = function (chai, _) {
	  var Assertion = chai.Assertion
	    , toString = Object.prototype.toString
	    , flag = _.flag;

	  /**
	   * ### Language Chains
	   *
	   * The following are provided as chainable getters to
	   * improve the readability of your assertions. They
	   * do not provide testing capabilities unless they
	   * have been overwritten by a plugin.
	   *
	   * **Chains**
	   *
	   * - to
	   * - be
	   * - been
	   * - is
	   * - that
	   * - which
	   * - and
	   * - has
	   * - have
	   * - with
	   * - at
	   * - of
	   * - same
	   *
	   * @name language chains
	   * @namespace BDD
	   * @api public
	   */

	  [ 'to', 'be', 'been'
	  , 'is', 'and', 'has', 'have'
	  , 'with', 'that', 'which', 'at'
	  , 'of', 'same' ].forEach(function (chain) {
	    Assertion.addProperty(chain, function () {
	      return this;
	    });
	  });

	  /**
	   * ### .not
	   *
	   * Negates any of assertions following in the chain.
	   *
	   *     expect(foo).to.not.equal('bar');
	   *     expect(goodFn).to.not.throw(Error);
	   *     expect({ foo: 'baz' }).to.have.property('foo')
	   *       .and.not.equal('bar');
	   *
	   * @name not
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('not', function () {
	    flag(this, 'negate', true);
	  });

	  /**
	   * ### .deep
	   *
	   * Sets the `deep` flag, later used by the `equal` and
	   * `property` assertions.
	   *
	   *     expect(foo).to.deep.equal({ bar: 'baz' });
	   *     expect({ foo: { bar: { baz: 'quux' } } })
	   *       .to.have.deep.property('foo.bar.baz', 'quux');
	   *
	   * `.deep.property` special characters can be escaped
	   * by adding two slashes before the `.` or `[]`.
	   *
	   *     var deepCss = { '.link': { '[target]': 42 }};
	   *     expect(deepCss).to.have.deep.property('\\.link.\\[target\\]', 42);
	   *
	   * @name deep
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('deep', function () {
	    flag(this, 'deep', true);
	  });

	  /**
	   * ### .any
	   *
	   * Sets the `any` flag, (opposite of the `all` flag)
	   * later used in the `keys` assertion.
	   *
	   *     expect(foo).to.have.any.keys('bar', 'baz');
	   *
	   * @name any
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('any', function () {
	    flag(this, 'any', true);
	    flag(this, 'all', false)
	  });


	  /**
	   * ### .all
	   *
	   * Sets the `all` flag (opposite of the `any` flag)
	   * later used by the `keys` assertion.
	   *
	   *     expect(foo).to.have.all.keys('bar', 'baz');
	   *
	   * @name all
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('all', function () {
	    flag(this, 'all', true);
	    flag(this, 'any', false);
	  });

	  /**
	   * ### .a(type)
	   *
	   * The `a` and `an` assertions are aliases that can be
	   * used either as language chains or to assert a value's
	   * type.
	   *
	   *     // typeof
	   *     expect('test').to.be.a('string');
	   *     expect({ foo: 'bar' }).to.be.an('object');
	   *     expect(null).to.be.a('null');
	   *     expect(undefined).to.be.an('undefined');
	   *     expect(new Error).to.be.an('error');
	   *     expect(new Promise).to.be.a('promise');
	   *     expect(new Float32Array()).to.be.a('float32array');
	   *     expect(Symbol()).to.be.a('symbol');
	   *
	   *     // es6 overrides
	   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');
	   *
	   *     // language chain
	   *     expect(foo).to.be.an.instanceof(Foo);
	   *
	   * @name a
	   * @alias an
	   * @param {String} type
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function an (type, msg) {
	    if (msg) flag(this, 'message', msg);
	    type = type.toLowerCase();
	    var obj = flag(this, 'object')
	      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

	    this.assert(
	        type === _.type(obj)
	      , 'expected #{this} to be ' + article + type
	      , 'expected #{this} not to be ' + article + type
	    );
	  }

	  Assertion.addChainableMethod('an', an);
	  Assertion.addChainableMethod('a', an);

	  /**
	   * ### .include(value)
	   *
	   * The `include` and `contain` assertions can be used as either property
	   * based language chains or as methods to assert the inclusion of an object
	   * in an array or a substring in a string. When used as language chains,
	   * they toggle the `contains` flag for the `keys` assertion.
	   *
	   *     expect([1,2,3]).to.include(2);
	   *     expect('foobar').to.contain('foo');
	   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');
	   *
	   * @name include
	   * @alias contain
	   * @alias includes
	   * @alias contains
	   * @param {Object|String|Number} obj
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function includeChainingBehavior () {
	    flag(this, 'contains', true);
	  }

	  function include (val, msg) {
	    _.expectTypes(this, ['array', 'object', 'string']);

	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    var expected = false;

	    if (_.type(obj) === 'array' && _.type(val) === 'object') {
	      for (var i in obj) {
	        if (_.eql(obj[i], val)) {
	          expected = true;
	          break;
	        }
	      }
	    } else if (_.type(val) === 'object') {
	      if (!flag(this, 'negate')) {
	        for (var k in val) new Assertion(obj).property(k, val[k]);
	        return;
	      }
	      var subset = {};
	      for (var k in val) subset[k] = obj[k];
	      expected = _.eql(subset, val);
	    } else {
	      expected = (obj != undefined) && ~obj.indexOf(val);
	    }
	    this.assert(
	        expected
	      , 'expected #{this} to include ' + _.inspect(val)
	      , 'expected #{this} to not include ' + _.inspect(val));
	  }

	  Assertion.addChainableMethod('include', include, includeChainingBehavior);
	  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
	  Assertion.addChainableMethod('contains', include, includeChainingBehavior);
	  Assertion.addChainableMethod('includes', include, includeChainingBehavior);

	  /**
	   * ### .ok
	   *
	   * Asserts that the target is truthy.
	   *
	   *     expect('everything').to.be.ok;
	   *     expect(1).to.be.ok;
	   *     expect(false).to.not.be.ok;
	   *     expect(undefined).to.not.be.ok;
	   *     expect(null).to.not.be.ok;
	   *
	   * @name ok
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('ok', function () {
	    this.assert(
	        flag(this, 'object')
	      , 'expected #{this} to be truthy'
	      , 'expected #{this} to be falsy');
	  });

	  /**
	   * ### .true
	   *
	   * Asserts that the target is `true`.
	   *
	   *     expect(true).to.be.true;
	   *     expect(1).to.not.be.true;
	   *
	   * @name true
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('true', function () {
	    this.assert(
	        true === flag(this, 'object')
	      , 'expected #{this} to be true'
	      , 'expected #{this} to be false'
	      , this.negate ? false : true
	    );
	  });

	  /**
	   * ### .false
	   *
	   * Asserts that the target is `false`.
	   *
	   *     expect(false).to.be.false;
	   *     expect(0).to.not.be.false;
	   *
	   * @name false
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('false', function () {
	    this.assert(
	        false === flag(this, 'object')
	      , 'expected #{this} to be false'
	      , 'expected #{this} to be true'
	      , this.negate ? true : false
	    );
	  });

	  /**
	   * ### .null
	   *
	   * Asserts that the target is `null`.
	   *
	   *     expect(null).to.be.null;
	   *     expect(undefined).to.not.be.null;
	   *
	   * @name null
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('null', function () {
	    this.assert(
	        null === flag(this, 'object')
	      , 'expected #{this} to be null'
	      , 'expected #{this} not to be null'
	    );
	  });

	  /**
	   * ### .undefined
	   *
	   * Asserts that the target is `undefined`.
	   *
	   *     expect(undefined).to.be.undefined;
	   *     expect(null).to.not.be.undefined;
	   *
	   * @name undefined
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('undefined', function () {
	    this.assert(
	        undefined === flag(this, 'object')
	      , 'expected #{this} to be undefined'
	      , 'expected #{this} not to be undefined'
	    );
	  });

	  /**
	   * ### .NaN
	   * Asserts that the target is `NaN`.
	   *
	   *     expect('foo').to.be.NaN;
	   *     expect(4).not.to.be.NaN;
	   *
	   * @name NaN
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('NaN', function () {
	    this.assert(
	        isNaN(flag(this, 'object'))
	        , 'expected #{this} to be NaN'
	        , 'expected #{this} not to be NaN'
	    );
	  });

	  /**
	   * ### .exist
	   *
	   * Asserts that the target is neither `null` nor `undefined`.
	   *
	   *     var foo = 'hi'
	   *       , bar = null
	   *       , baz;
	   *
	   *     expect(foo).to.exist;
	   *     expect(bar).to.not.exist;
	   *     expect(baz).to.not.exist;
	   *
	   * @name exist
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('exist', function () {
	    this.assert(
	        null != flag(this, 'object')
	      , 'expected #{this} to exist'
	      , 'expected #{this} to not exist'
	    );
	  });


	  /**
	   * ### .empty
	   *
	   * Asserts that the target's length is `0`. For arrays and strings, it checks
	   * the `length` property. For objects, it gets the count of
	   * enumerable keys.
	   *
	   *     expect([]).to.be.empty;
	   *     expect('').to.be.empty;
	   *     expect({}).to.be.empty;
	   *
	   * @name empty
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('empty', function () {
	    var obj = flag(this, 'object')
	      , expected = obj;

	    if (Array.isArray(obj) || 'string' === typeof object) {
	      expected = obj.length;
	    } else if (typeof obj === 'object') {
	      expected = Object.keys(obj).length;
	    }

	    this.assert(
	        !expected
	      , 'expected #{this} to be empty'
	      , 'expected #{this} not to be empty'
	    );
	  });

	  /**
	   * ### .arguments
	   *
	   * Asserts that the target is an arguments object.
	   *
	   *     function test () {
	   *       expect(arguments).to.be.arguments;
	   *     }
	   *
	   * @name arguments
	   * @alias Arguments
	   * @namespace BDD
	   * @api public
	   */

	  function checkArguments () {
	    var obj = flag(this, 'object')
	      , type = Object.prototype.toString.call(obj);
	    this.assert(
	        '[object Arguments]' === type
	      , 'expected #{this} to be arguments but got ' + type
	      , 'expected #{this} to not be arguments'
	    );
	  }

	  Assertion.addProperty('arguments', checkArguments);
	  Assertion.addProperty('Arguments', checkArguments);

	  /**
	   * ### .equal(value)
	   *
	   * Asserts that the target is strictly equal (`===`) to `value`.
	   * Alternately, if the `deep` flag is set, asserts that
	   * the target is deeply equal to `value`.
	   *
	   *     expect('hello').to.equal('hello');
	   *     expect(42).to.equal(42);
	   *     expect(1).to.not.equal(true);
	   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });
	   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });
	   *
	   * @name equal
	   * @alias equals
	   * @alias eq
	   * @alias deep.equal
	   * @param {Mixed} value
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertEqual (val, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'deep')) {
	      return this.eql(val);
	    } else {
	      this.assert(
	          val === obj
	        , 'expected #{this} to equal #{exp}'
	        , 'expected #{this} to not equal #{exp}'
	        , val
	        , this._obj
	        , true
	      );
	    }
	  }

	  Assertion.addMethod('equal', assertEqual);
	  Assertion.addMethod('equals', assertEqual);
	  Assertion.addMethod('eq', assertEqual);

	  /**
	   * ### .eql(value)
	   *
	   * Asserts that the target is deeply equal to `value`.
	   *
	   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });
	   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);
	   *
	   * @name eql
	   * @alias eqls
	   * @param {Mixed} value
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertEql(obj, msg) {
	    if (msg) flag(this, 'message', msg);
	    this.assert(
	        _.eql(obj, flag(this, 'object'))
	      , 'expected #{this} to deeply equal #{exp}'
	      , 'expected #{this} to not deeply equal #{exp}'
	      , obj
	      , this._obj
	      , true
	    );
	  }

	  Assertion.addMethod('eql', assertEql);
	  Assertion.addMethod('eqls', assertEql);

	  /**
	   * ### .above(value)
	   *
	   * Asserts that the target is greater than `value`.
	   *
	   *     expect(10).to.be.above(5);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a minimum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.above(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
	   *
	   * @name above
	   * @alias gt
	   * @alias greaterThan
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertAbove (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len > n
	        , 'expected #{this} to have a length above #{exp} but got #{act}'
	        , 'expected #{this} to not have a length above #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj > n
	        , 'expected #{this} to be above ' + n
	        , 'expected #{this} to be at most ' + n
	      );
	    }
	  }

	  Assertion.addMethod('above', assertAbove);
	  Assertion.addMethod('gt', assertAbove);
	  Assertion.addMethod('greaterThan', assertAbove);

	  /**
	   * ### .least(value)
	   *
	   * Asserts that the target is greater than or equal to `value`.
	   *
	   *     expect(10).to.be.at.least(10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a minimum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.of.at.least(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);
	   *
	   * @name least
	   * @alias gte
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertLeast (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len >= n
	        , 'expected #{this} to have a length at least #{exp} but got #{act}'
	        , 'expected #{this} to have a length below #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj >= n
	        , 'expected #{this} to be at least ' + n
	        , 'expected #{this} to be below ' + n
	      );
	    }
	  }

	  Assertion.addMethod('least', assertLeast);
	  Assertion.addMethod('gte', assertLeast);

	  /**
	   * ### .below(value)
	   *
	   * Asserts that the target is less than `value`.
	   *
	   *     expect(5).to.be.below(10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a maximum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.below(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
	   *
	   * @name below
	   * @alias lt
	   * @alias lessThan
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertBelow (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len < n
	        , 'expected #{this} to have a length below #{exp} but got #{act}'
	        , 'expected #{this} to not have a length below #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj < n
	        , 'expected #{this} to be below ' + n
	        , 'expected #{this} to be at least ' + n
	      );
	    }
	  }

	  Assertion.addMethod('below', assertBelow);
	  Assertion.addMethod('lt', assertBelow);
	  Assertion.addMethod('lessThan', assertBelow);

	  /**
	   * ### .most(value)
	   *
	   * Asserts that the target is less than or equal to `value`.
	   *
	   *     expect(5).to.be.at.most(5);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a maximum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.of.at.most(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);
	   *
	   * @name most
	   * @alias lte
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertMost (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len <= n
	        , 'expected #{this} to have a length at most #{exp} but got #{act}'
	        , 'expected #{this} to have a length above #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj <= n
	        , 'expected #{this} to be at most ' + n
	        , 'expected #{this} to be above ' + n
	      );
	    }
	  }

	  Assertion.addMethod('most', assertMost);
	  Assertion.addMethod('lte', assertMost);

	  /**
	   * ### .within(start, finish)
	   *
	   * Asserts that the target is within a range.
	   *
	   *     expect(7).to.be.within(5,10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a length range. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.within(2,4);
	   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
	   *
	   * @name within
	   * @param {Number} start lowerbound inclusive
	   * @param {Number} finish upperbound inclusive
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addMethod('within', function (start, finish, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object')
	      , range = start + '..' + finish;
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len >= start && len <= finish
	        , 'expected #{this} to have a length within ' + range
	        , 'expected #{this} to not have a length within ' + range
	      );
	    } else {
	      this.assert(
	          obj >= start && obj <= finish
	        , 'expected #{this} to be within ' + range
	        , 'expected #{this} to not be within ' + range
	      );
	    }
	  });

	  /**
	   * ### .instanceof(constructor)
	   *
	   * Asserts that the target is an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , Chai = new Tea('chai');
	   *
	   *     expect(Chai).to.be.an.instanceof(Tea);
	   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);
	   *
	   * @name instanceof
	   * @param {Constructor} constructor
	   * @param {String} message _optional_
	   * @alias instanceOf
	   * @namespace BDD
	   * @api public
	   */

	  function assertInstanceOf (constructor, msg) {
	    if (msg) flag(this, 'message', msg);
	    var name = _.getName(constructor);
	    this.assert(
	        flag(this, 'object') instanceof constructor
	      , 'expected #{this} to be an instance of ' + name
	      , 'expected #{this} to not be an instance of ' + name
	    );
	  };

	  Assertion.addMethod('instanceof', assertInstanceOf);
	  Assertion.addMethod('instanceOf', assertInstanceOf);

	  /**
	   * ### .property(name, [value])
	   *
	   * Asserts that the target has a property `name`, optionally asserting that
	   * the value of that property is strictly equal to  `value`.
	   * If the `deep` flag is set, you can use dot- and bracket-notation for deep
	   * references into objects and arrays.
	   *
	   *     // simple referencing
	   *     var obj = { foo: 'bar' };
	   *     expect(obj).to.have.property('foo');
	   *     expect(obj).to.have.property('foo', 'bar');
	   *
	   *     // deep referencing
	   *     var deepObj = {
	   *         green: { tea: 'matcha' }
	   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]
	   *     };
	   *
	   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');
	   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');
	   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');
	   *
	   * You can also use an array as the starting point of a `deep.property`
	   * assertion, or traverse nested arrays.
	   *
	   *     var arr = [
	   *         [ 'chai', 'matcha', 'konacha' ]
	   *       , [ { tea: 'chai' }
	   *         , { tea: 'matcha' }
	   *         , { tea: 'konacha' } ]
	   *     ];
	   *
	   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');
	   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');
	   *
	   * Furthermore, `property` changes the subject of the assertion
	   * to be the value of that property from the original object. This
	   * permits for further chainable assertions on that property.
	   *
	   *     expect(obj).to.have.property('foo')
	   *       .that.is.a('string');
	   *     expect(deepObj).to.have.property('green')
	   *       .that.is.an('object')
	   *       .that.deep.equals({ tea: 'matcha' });
	   *     expect(deepObj).to.have.property('teas')
	   *       .that.is.an('array')
	   *       .with.deep.property('[2]')
	   *         .that.deep.equals({ tea: 'konacha' });
	   *
	   * Note that dots and bracket in `name` must be backslash-escaped when
	   * the `deep` flag is set, while they must NOT be escaped when the `deep`
	   * flag is not set.
	   *
	   *     // simple referencing
	   *     var css = { '.link[target]': 42 };
	   *     expect(css).to.have.property('.link[target]', 42);
	   *
	   *     // deep referencing
	   *     var deepCss = { '.link': { '[target]': 42 }};
	   *     expect(deepCss).to.have.deep.property('\\.link.\\[target\\]', 42);
	   *
	   * @name property
	   * @alias deep.property
	   * @param {String} name
	   * @param {Mixed} value (optional)
	   * @param {String} message _optional_
	   * @returns value of property for chaining
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addMethod('property', function (name, val, msg) {
	    if (msg) flag(this, 'message', msg);

	    var isDeep = !!flag(this, 'deep')
	      , descriptor = isDeep ? 'deep property ' : 'property '
	      , negate = flag(this, 'negate')
	      , obj = flag(this, 'object')
	      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null
	      , hasProperty = isDeep
	        ? pathInfo.exists
	        : _.hasProperty(name, obj)
	      , value = isDeep
	        ? pathInfo.value
	        : obj[name];

	    if (negate && arguments.length > 1) {
	      if (undefined === value) {
	        msg = (msg != null) ? msg + ': ' : '';
	        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));
	      }
	    } else {
	      this.assert(
	          hasProperty
	        , 'expected #{this} to have a ' + descriptor + _.inspect(name)
	        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
	    }

	    if (arguments.length > 1) {
	      this.assert(
	          val === value
	        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
	        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'
	        , val
	        , value
	      );
	    }

	    flag(this, 'object', value);
	  });


	  /**
	   * ### .ownProperty(name)
	   *
	   * Asserts that the target has an own property `name`.
	   *
	   *     expect('test').to.have.ownProperty('length');
	   *
	   * @name ownProperty
	   * @alias haveOwnProperty
	   * @param {String} name
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertOwnProperty (name, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    this.assert(
	        obj.hasOwnProperty(name)
	      , 'expected #{this} to have own property ' + _.inspect(name)
	      , 'expected #{this} to not have own property ' + _.inspect(name)
	    );
	  }

	  Assertion.addMethod('ownProperty', assertOwnProperty);
	  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

	  /**
	   * ### .ownPropertyDescriptor(name[, descriptor[, message]])
	   *
	   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.
	   *
	   *     expect('test').to.have.ownPropertyDescriptor('length');
	   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });
	   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });
	   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);
	   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');
	   *
	   * @name ownPropertyDescriptor
	   * @alias haveOwnPropertyDescriptor
	   * @param {String} name
	   * @param {Object} descriptor _optional_
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertOwnPropertyDescriptor (name, descriptor, msg) {
	    if (typeof descriptor === 'string') {
	      msg = descriptor;
	      descriptor = null;
	    }
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
	    if (actualDescriptor && descriptor) {
	      this.assert(
	          _.eql(descriptor, actualDescriptor)
	        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)
	        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)
	        , descriptor
	        , actualDescriptor
	        , true
	      );
	    } else {
	      this.assert(
	          actualDescriptor
	        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)
	        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)
	      );
	    }
	    flag(this, 'object', actualDescriptor);
	  }

	  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
	  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);

	  /**
	   * ### .length
	   *
	   * Sets the `doLength` flag later used as a chain precursor to a value
	   * comparison for the `length` property.
	   *
	   *     expect('foo').to.have.length.above(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
	   *     expect('foo').to.have.length.below(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
	   *     expect('foo').to.have.length.within(2,4);
	   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
	   *
	   * *Deprecation notice:* Using `length` as an assertion will be deprecated
	   * in version 2.4.0 and removed in 3.0.0. Code using the old style of
	   * asserting for `length` property value using `length(value)` should be
	   * switched to use `lengthOf(value)` instead.
	   *
	   * @name length
	   * @namespace BDD
	   * @api public
	   */

	  /**
	   * ### .lengthOf(value[, message])
	   *
	   * Asserts that the target's `length` property has
	   * the expected value.
	   *
	   *     expect([ 1, 2, 3]).to.have.lengthOf(3);
	   *     expect('foobar').to.have.lengthOf(6);
	   *
	   * @name lengthOf
	   * @param {Number} length
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertLengthChain () {
	    flag(this, 'doLength', true);
	  }

	  function assertLength (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).to.have.property('length');
	    var len = obj.length;

	    this.assert(
	        len == n
	      , 'expected #{this} to have a length of #{exp} but got #{act}'
	      , 'expected #{this} to not have a length of #{act}'
	      , n
	      , len
	    );
	  }

	  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
	  Assertion.addMethod('lengthOf', assertLength);

	  /**
	   * ### .match(regexp)
	   *
	   * Asserts that the target matches a regular expression.
	   *
	   *     expect('foobar').to.match(/^foo/);
	   *
	   * @name match
	   * @alias matches
	   * @param {RegExp} RegularExpression
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */
	  function assertMatch(re, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    this.assert(
	        re.exec(obj)
	      , 'expected #{this} to match ' + re
	      , 'expected #{this} not to match ' + re
	    );
	  }

	  Assertion.addMethod('match', assertMatch);
	  Assertion.addMethod('matches', assertMatch);

	  /**
	   * ### .string(string)
	   *
	   * Asserts that the string target contains another string.
	   *
	   *     expect('foobar').to.have.string('bar');
	   *
	   * @name string
	   * @param {String} string
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addMethod('string', function (str, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).is.a('string');

	    this.assert(
	        ~obj.indexOf(str)
	      , 'expected #{this} to contain ' + _.inspect(str)
	      , 'expected #{this} to not contain ' + _.inspect(str)
	    );
	  });


	  /**
	   * ### .keys(key1, [key2], [...])
	   *
	   * Asserts that the target contains any or all of the passed-in keys.
	   * Use in combination with `any`, `all`, `contains`, or `have` will affect
	   * what will pass.
	   *
	   * When used in conjunction with `any`, at least one key that is passed
	   * in must exist in the target object. This is regardless whether or not
	   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`
	   * should be used in the assertion. If neither are used, the assertion is
	   * defaulted to `all`.
	   *
	   * When both `all` and `contain` are used, the target object must have at
	   * least all of the passed-in keys but may have more keys not listed.
	   *
	   * When both `all` and `have` are used, the target object must both contain
	   * all of the passed-in keys AND the number of keys in the target object must
	   * match the number of keys passed in (in other words, a target object must
	   * have all and only all of the passed-in keys).
	   *
	   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');
	   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');
	   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');
	   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);
	   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});
	   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);
	   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});
	   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);
	   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});
	   *
	   *
	   * @name keys
	   * @alias key
	   * @param {...String|Array|Object} keys
	   * @namespace BDD
	   * @api public
	   */

	  function assertKeys (keys) {
	    var obj = flag(this, 'object')
	      , str
	      , ok = true
	      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';

	    switch (_.type(keys)) {
	      case "array":
	        if (arguments.length > 1) throw (new Error(mixedArgsMsg));
	        break;
	      case "object":
	        if (arguments.length > 1) throw (new Error(mixedArgsMsg));
	        keys = Object.keys(keys);
	        break;
	      default:
	        keys = Array.prototype.slice.call(arguments);
	    }

	    if (!keys.length) throw new Error('keys required');

	    var actual = Object.keys(obj)
	      , expected = keys
	      , len = keys.length
	      , any = flag(this, 'any')
	      , all = flag(this, 'all');

	    if (!any && !all) {
	      all = true;
	    }

	    // Has any
	    if (any) {
	      var intersection = expected.filter(function(key) {
	        return ~actual.indexOf(key);
	      });
	      ok = intersection.length > 0;
	    }

	    // Has all
	    if (all) {
	      ok = keys.every(function(key){
	        return ~actual.indexOf(key);
	      });
	      if (!flag(this, 'negate') && !flag(this, 'contains')) {
	        ok = ok && keys.length == actual.length;
	      }
	    }

	    // Key string
	    if (len > 1) {
	      keys = keys.map(function(key){
	        return _.inspect(key);
	      });
	      var last = keys.pop();
	      if (all) {
	        str = keys.join(', ') + ', and ' + last;
	      }
	      if (any) {
	        str = keys.join(', ') + ', or ' + last;
	      }
	    } else {
	      str = _.inspect(keys[0]);
	    }

	    // Form
	    str = (len > 1 ? 'keys ' : 'key ') + str;

	    // Have / include
	    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

	    // Assertion
	    this.assert(
	        ok
	      , 'expected #{this} to ' + str
	      , 'expected #{this} to not ' + str
	      , expected.slice(0).sort()
	      , actual.sort()
	      , true
	    );
	  }

	  Assertion.addMethod('keys', assertKeys);
	  Assertion.addMethod('key', assertKeys);

	  /**
	   * ### .throw(constructor)
	   *
	   * Asserts that the function target will throw a specific error, or specific type of error
	   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test
	   * for the error's message.
	   *
	   *     var err = new ReferenceError('This is a bad function.');
	   *     var fn = function () { throw err; }
	   *     expect(fn).to.throw(ReferenceError);
	   *     expect(fn).to.throw(Error);
	   *     expect(fn).to.throw(/bad function/);
	   *     expect(fn).to.not.throw('good function');
	   *     expect(fn).to.throw(ReferenceError, /bad function/);
	   *     expect(fn).to.throw(err);
	   *
	   * Please note that when a throw expectation is negated, it will check each
	   * parameter independently, starting with error constructor type. The appropriate way
	   * to check for the existence of a type of error but for a message that does not match
	   * is to use `and`.
	   *
	   *     expect(fn).to.throw(ReferenceError)
	   *        .and.not.throw(/good function/);
	   *
	   * @name throw
	   * @alias throws
	   * @alias Throw
	   * @param {ErrorConstructor} constructor
	   * @param {String|RegExp} expected error message
	   * @param {String} message _optional_
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @returns error for chaining (null if no error)
	   * @namespace BDD
	   * @api public
	   */

	  function assertThrows (constructor, errMsg, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).is.a('function');

	    var thrown = false
	      , desiredError = null
	      , name = null
	      , thrownError = null;

	    if (arguments.length === 0) {
	      errMsg = null;
	      constructor = null;
	    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {
	      errMsg = constructor;
	      constructor = null;
	    } else if (constructor && constructor instanceof Error) {
	      desiredError = constructor;
	      constructor = null;
	      errMsg = null;
	    } else if (typeof constructor === 'function') {
	      name = constructor.prototype.name;
	      if (!name || (name === 'Error' && constructor !== Error)) {
	        name = constructor.name || (new constructor()).name;
	      }
	    } else {
	      constructor = null;
	    }

	    try {
	      obj();
	    } catch (err) {
	      // first, check desired error
	      if (desiredError) {
	        this.assert(
	            err === desiredError
	          , 'expected #{this} to throw #{exp} but #{act} was thrown'
	          , 'expected #{this} to not throw #{exp}'
	          , (desiredError instanceof Error ? desiredError.toString() : desiredError)
	          , (err instanceof Error ? err.toString() : err)
	        );

	        flag(this, 'object', err);
	        return this;
	      }

	      // next, check constructor
	      if (constructor) {
	        this.assert(
	            err instanceof constructor
	          , 'expected #{this} to throw #{exp} but #{act} was thrown'
	          , 'expected #{this} to not throw #{exp} but #{act} was thrown'
	          , name
	          , (err instanceof Error ? err.toString() : err)
	        );

	        if (!errMsg) {
	          flag(this, 'object', err);
	          return this;
	        }
	      }

	      // next, check message
	      var message = 'error' === _.type(err) && "message" in err
	        ? err.message
	        : '' + err;

	      if ((message != null) && errMsg && errMsg instanceof RegExp) {
	        this.assert(
	            errMsg.exec(message)
	          , 'expected #{this} to throw error matching #{exp} but got #{act}'
	          , 'expected #{this} to throw error not matching #{exp}'
	          , errMsg
	          , message
	        );

	        flag(this, 'object', err);
	        return this;
	      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {
	        this.assert(
	            ~message.indexOf(errMsg)
	          , 'expected #{this} to throw error including #{exp} but got #{act}'
	          , 'expected #{this} to throw error not including #{act}'
	          , errMsg
	          , message
	        );

	        flag(this, 'object', err);
	        return this;
	      } else {
	        thrown = true;
	        thrownError = err;
	      }
	    }

	    var actuallyGot = ''
	      , expectedThrown = name !== null
	        ? name
	        : desiredError
	          ? '#{exp}' //_.inspect(desiredError)
	          : 'an error';

	    if (thrown) {
	      actuallyGot = ' but #{act} was thrown'
	    }

	    this.assert(
	        thrown === true
	      , 'expected #{this} to throw ' + expectedThrown + actuallyGot
	      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot
	      , (desiredError instanceof Error ? desiredError.toString() : desiredError)
	      , (thrownError instanceof Error ? thrownError.toString() : thrownError)
	    );

	    flag(this, 'object', thrownError);
	  };

	  Assertion.addMethod('throw', assertThrows);
	  Assertion.addMethod('throws', assertThrows);
	  Assertion.addMethod('Throw', assertThrows);

	  /**
	   * ### .respondTo(method)
	   *
	   * Asserts that the object or class target will respond to a method.
	   *
	   *     Klass.prototype.bar = function(){};
	   *     expect(Klass).to.respondTo('bar');
	   *     expect(obj).to.respondTo('bar');
	   *
	   * To check if a constructor will respond to a static function,
	   * set the `itself` flag.
	   *
	   *     Klass.baz = function(){};
	   *     expect(Klass).itself.to.respondTo('baz');
	   *
	   * @name respondTo
	   * @alias respondsTo
	   * @param {String} method
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function respondTo (method, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object')
	      , itself = flag(this, 'itself')
	      , context = ('function' === _.type(obj) && !itself)
	        ? obj.prototype[method]
	        : obj[method];

	    this.assert(
	        'function' === typeof context
	      , 'expected #{this} to respond to ' + _.inspect(method)
	      , 'expected #{this} to not respond to ' + _.inspect(method)
	    );
	  }

	  Assertion.addMethod('respondTo', respondTo);
	  Assertion.addMethod('respondsTo', respondTo);

	  /**
	   * ### .itself
	   *
	   * Sets the `itself` flag, later used by the `respondTo` assertion.
	   *
	   *     function Foo() {}
	   *     Foo.bar = function() {}
	   *     Foo.prototype.baz = function() {}
	   *
	   *     expect(Foo).itself.to.respondTo('bar');
	   *     expect(Foo).itself.not.to.respondTo('baz');
	   *
	   * @name itself
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('itself', function () {
	    flag(this, 'itself', true);
	  });

	  /**
	   * ### .satisfy(method)
	   *
	   * Asserts that the target passes a given truth test.
	   *
	   *     expect(1).to.satisfy(function(num) { return num > 0; });
	   *
	   * @name satisfy
	   * @alias satisfies
	   * @param {Function} matcher
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function satisfy (matcher, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    var result = matcher(obj);
	    this.assert(
	        result
	      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
	      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
	      , this.negate ? false : true
	      , result
	    );
	  }

	  Assertion.addMethod('satisfy', satisfy);
	  Assertion.addMethod('satisfies', satisfy);

	  /**
	   * ### .closeTo(expected, delta)
	   *
	   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
	   *
	   *     expect(1.5).to.be.closeTo(1, 0.5);
	   *
	   * @name closeTo
	   * @alias approximately
	   * @param {Number} expected
	   * @param {Number} delta
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function closeTo(expected, delta, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');

	    new Assertion(obj, msg).is.a('number');
	    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {
	      throw new Error('the arguments to closeTo or approximately must be numbers');
	    }

	    this.assert(
	        Math.abs(obj - expected) <= delta
	      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
	      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
	    );
	  }

	  Assertion.addMethod('closeTo', closeTo);
	  Assertion.addMethod('approximately', closeTo);

	  function isSubsetOf(subset, superset, cmp) {
	    return subset.every(function(elem) {
	      if (!cmp) return superset.indexOf(elem) !== -1;

	      return superset.some(function(elem2) {
	        return cmp(elem, elem2);
	      });
	    })
	  }

	  /**
	   * ### .members(set)
	   *
	   * Asserts that the target is a superset of `set`,
	   * or that the target and `set` have the same strictly-equal (===) members.
	   * Alternately, if the `deep` flag is set, set members are compared for deep
	   * equality.
	   *
	   *     expect([1, 2, 3]).to.include.members([3, 2]);
	   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);
	   *
	   *     expect([4, 2]).to.have.members([2, 4]);
	   *     expect([5, 2]).to.not.have.members([5, 2, 1]);
	   *
	   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);
	   *
	   * @name members
	   * @param {Array} set
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addMethod('members', function (subset, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');

	    new Assertion(obj).to.be.an('array');
	    new Assertion(subset).to.be.an('array');

	    var cmp = flag(this, 'deep') ? _.eql : undefined;

	    if (flag(this, 'contains')) {
	      return this.assert(
	          isSubsetOf(subset, obj, cmp)
	        , 'expected #{this} to be a superset of #{act}'
	        , 'expected #{this} to not be a superset of #{act}'
	        , obj
	        , subset
	      );
	    }

	    this.assert(
	        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)
	        , 'expected #{this} to have the same members as #{act}'
	        , 'expected #{this} to not have the same members as #{act}'
	        , obj
	        , subset
	    );
	  });

	  /**
	   * ### .oneOf(list)
	   *
	   * Assert that a value appears somewhere in the top level of array `list`.
	   *
	   *     expect('a').to.be.oneOf(['a', 'b', 'c']);
	   *     expect(9).to.not.be.oneOf(['z']);
	   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);
	   *
	   *     var three = [3];
	   *     // for object-types, contents are not compared
	   *     expect(three).to.not.be.oneOf([1, 2, [3]]);
	   *     // comparing references works
	   *     expect(three).to.be.oneOf([1, 2, three]);
	   *
	   * @name oneOf
	   * @param {Array<*>} list
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function oneOf (list, msg) {
	    if (msg) flag(this, 'message', msg);
	    var expected = flag(this, 'object');
	    new Assertion(list).to.be.an('array');

	    this.assert(
	        list.indexOf(expected) > -1
	      , 'expected #{this} to be one of #{exp}'
	      , 'expected #{this} to not be one of #{exp}'
	      , list
	      , expected
	    );
	  }

	  Assertion.addMethod('oneOf', oneOf);


	  /**
	   * ### .change(function)
	   *
	   * Asserts that a function changes an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val += 3 };
	   *     var noChangeFn = function() { return 'foo' + 'bar'; }
	   *     expect(fn).to.change(obj, 'val');
	   *     expect(noChangeFn).to.not.change(obj, 'val')
	   *
	   * @name change
	   * @alias changes
	   * @alias Change
	   * @param {String} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertChanges (object, prop, msg) {
	    if (msg) flag(this, 'message', msg);
	    var fn = flag(this, 'object');
	    new Assertion(object, msg).to.have.property(prop);
	    new Assertion(fn).is.a('function');

	    var initial = object[prop];
	    fn();

	    this.assert(
	      initial !== object[prop]
	      , 'expected .' + prop + ' to change'
	      , 'expected .' + prop + ' to not change'
	    );
	  }

	  Assertion.addChainableMethod('change', assertChanges);
	  Assertion.addChainableMethod('changes', assertChanges);

	  /**
	   * ### .increase(function)
	   *
	   * Asserts that a function increases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 15 };
	   *     expect(fn).to.increase(obj, 'val');
	   *
	   * @name increase
	   * @alias increases
	   * @alias Increase
	   * @param {String} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertIncreases (object, prop, msg) {
	    if (msg) flag(this, 'message', msg);
	    var fn = flag(this, 'object');
	    new Assertion(object, msg).to.have.property(prop);
	    new Assertion(fn).is.a('function');

	    var initial = object[prop];
	    fn();

	    this.assert(
	      object[prop] - initial > 0
	      , 'expected .' + prop + ' to increase'
	      , 'expected .' + prop + ' to not increase'
	    );
	  }

	  Assertion.addChainableMethod('increase', assertIncreases);
	  Assertion.addChainableMethod('increases', assertIncreases);

	  /**
	   * ### .decrease(function)
	   *
	   * Asserts that a function decreases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 5 };
	   *     expect(fn).to.decrease(obj, 'val');
	   *
	   * @name decrease
	   * @alias decreases
	   * @alias Decrease
	   * @param {String} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @namespace BDD
	   * @api public
	   */

	  function assertDecreases (object, prop, msg) {
	    if (msg) flag(this, 'message', msg);
	    var fn = flag(this, 'object');
	    new Assertion(object, msg).to.have.property(prop);
	    new Assertion(fn).is.a('function');

	    var initial = object[prop];
	    fn();

	    this.assert(
	      object[prop] - initial < 0
	      , 'expected .' + prop + ' to decrease'
	      , 'expected .' + prop + ' to not decrease'
	    );
	  }

	  Assertion.addChainableMethod('decrease', assertDecreases);
	  Assertion.addChainableMethod('decreases', assertDecreases);

	  /**
	   * ### .extensible
	   *
	   * Asserts that the target is extensible (can have new properties added to
	   * it).
	   *
	   *     var nonExtensibleObject = Object.preventExtensions({});
	   *     var sealedObject = Object.seal({});
	   *     var frozenObject = Object.freeze({});
	   *
	   *     expect({}).to.be.extensible;
	   *     expect(nonExtensibleObject).to.not.be.extensible;
	   *     expect(sealedObject).to.not.be.extensible;
	   *     expect(frozenObject).to.not.be.extensible;
	   *
	   * @name extensible
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('extensible', function() {
	    var obj = flag(this, 'object');

	    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.
	    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
	    // The following provides ES6 behavior when a TypeError is thrown under ES5.

	    var isExtensible;

	    try {
	      isExtensible = Object.isExtensible(obj);
	    } catch (err) {
	      if (err instanceof TypeError) isExtensible = false;
	      else throw err;
	    }

	    this.assert(
	      isExtensible
	      , 'expected #{this} to be extensible'
	      , 'expected #{this} to not be extensible'
	    );
	  });

	  /**
	   * ### .sealed
	   *
	   * Asserts that the target is sealed (cannot have new properties added to it
	   * and its existing properties cannot be removed).
	   *
	   *     var sealedObject = Object.seal({});
	   *     var frozenObject = Object.freeze({});
	   *
	   *     expect(sealedObject).to.be.sealed;
	   *     expect(frozenObject).to.be.sealed;
	   *     expect({}).to.not.be.sealed;
	   *
	   * @name sealed
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('sealed', function() {
	    var obj = flag(this, 'object');

	    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.
	    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
	    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
	    // The following provides ES6 behavior when a TypeError is thrown under ES5.

	    var isSealed;

	    try {
	      isSealed = Object.isSealed(obj);
	    } catch (err) {
	      if (err instanceof TypeError) isSealed = true;
	      else throw err;
	    }

	    this.assert(
	      isSealed
	      , 'expected #{this} to be sealed'
	      , 'expected #{this} to not be sealed'
	    );
	  });

	  /**
	   * ### .frozen
	   *
	   * Asserts that the target is frozen (cannot have new properties added to it
	   * and its existing properties cannot be modified).
	   *
	   *     var frozenObject = Object.freeze({});
	   *
	   *     expect(frozenObject).to.be.frozen;
	   *     expect({}).to.not.be.frozen;
	   *
	   * @name frozen
	   * @namespace BDD
	   * @api public
	   */

	  Assertion.addProperty('frozen', function() {
	    var obj = flag(this, 'object');

	    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.
	    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
	    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
	    // The following provides ES6 behavior when a TypeError is thrown under ES5.

	    var isFrozen;

	    try {
	      isFrozen = Object.isFrozen(obj);
	    } catch (err) {
	      if (err instanceof TypeError) isFrozen = true;
	      else throw err;
	    }

	    this.assert(
	      isFrozen
	      , 'expected #{this} to be frozen'
	      , 'expected #{this} to not be frozen'
	    );
	  });
	};


/***/ }),
/* 39 */
/***/ (function(module, exports) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	module.exports = function (chai, util) {
	  chai.expect = function (val, message) {
	    return new chai.Assertion(val, message);
	  };

	  /**
	   * ### .fail(actual, expected, [message], [operator])
	   *
	   * Throw a failure.
	   *
	   * @name fail
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @param {String} operator
	   * @namespace Expect
	   * @api public
	   */

	  chai.expect.fail = function (actual, expected, message, operator) {
	    message = message || 'expect.fail()';
	    throw new chai.AssertionError(message, {
	        actual: actual
	      , expected: expected
	      , operator: operator
	    }, chai.expect.fail);
	  };
	};


/***/ }),
/* 40 */
/***/ (function(module, exports) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	module.exports = function (chai, util) {
	  var Assertion = chai.Assertion;

	  function loadShould () {
	    // explicitly define this method as function as to have it's name to include as `ssfi`
	    function shouldGetter() {
	      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {
	        return new Assertion(this.valueOf(), null, shouldGetter);
	      }
	      return new Assertion(this, null, shouldGetter);
	    }
	    function shouldSetter(value) {
	      // See https://github.com/chaijs/chai/issues/86: this makes
	      // `whatever.should = someValue` actually set `someValue`, which is
	      // especially useful for `global.should = require('chai').should()`.
	      //
	      // Note that we have to use [[DefineProperty]] instead of [[Put]]
	      // since otherwise we would trigger this very setter!
	      Object.defineProperty(this, 'should', {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	    }
	    // modify Object.prototype to have `should`
	    Object.defineProperty(Object.prototype, 'should', {
	      set: shouldSetter
	      , get: shouldGetter
	      , configurable: true
	    });

	    var should = {};

	    /**
	     * ### .fail(actual, expected, [message], [operator])
	     *
	     * Throw a failure.
	     *
	     * @name fail
	     * @param {Mixed} actual
	     * @param {Mixed} expected
	     * @param {String} message
	     * @param {String} operator
	     * @namespace Should
	     * @api public
	     */

	    should.fail = function (actual, expected, message, operator) {
	      message = message || 'should.fail()';
	      throw new chai.AssertionError(message, {
	          actual: actual
	        , expected: expected
	        , operator: operator
	      }, should.fail);
	    };

	    /**
	     * ### .equal(actual, expected, [message])
	     *
	     * Asserts non-strict equality (`==`) of `actual` and `expected`.
	     *
	     *     should.equal(3, '3', '== coerces values to strings');
	     *
	     * @name equal
	     * @param {Mixed} actual
	     * @param {Mixed} expected
	     * @param {String} message
	     * @namespace Should
	     * @api public
	     */

	    should.equal = function (val1, val2, msg) {
	      new Assertion(val1, msg).to.equal(val2);
	    };

	    /**
	     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])
	     *
	     * Asserts that `function` will throw an error that is an instance of
	     * `constructor`, or alternately that it will throw an error with message
	     * matching `regexp`.
	     *
	     *     should.throw(fn, 'function throws a reference error');
	     *     should.throw(fn, /function throws a reference error/);
	     *     should.throw(fn, ReferenceError);
	     *     should.throw(fn, ReferenceError, 'function throws a reference error');
	     *     should.throw(fn, ReferenceError, /function throws a reference error/);
	     *
	     * @name throw
	     * @alias Throw
	     * @param {Function} function
	     * @param {ErrorConstructor} constructor
	     * @param {RegExp} regexp
	     * @param {String} message
	     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	     * @namespace Should
	     * @api public
	     */

	    should.Throw = function (fn, errt, errs, msg) {
	      new Assertion(fn, msg).to.Throw(errt, errs);
	    };

	    /**
	     * ### .exist
	     *
	     * Asserts that the target is neither `null` nor `undefined`.
	     *
	     *     var foo = 'hi';
	     *
	     *     should.exist(foo, 'foo exists');
	     *
	     * @name exist
	     * @namespace Should
	     * @api public
	     */

	    should.exist = function (val, msg) {
	      new Assertion(val, msg).to.exist;
	    }

	    // negation
	    should.not = {}

	    /**
	     * ### .not.equal(actual, expected, [message])
	     *
	     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
	     *
	     *     should.not.equal(3, 4, 'these numbers are not equal');
	     *
	     * @name not.equal
	     * @param {Mixed} actual
	     * @param {Mixed} expected
	     * @param {String} message
	     * @namespace Should
	     * @api public
	     */

	    should.not.equal = function (val1, val2, msg) {
	      new Assertion(val1, msg).to.not.equal(val2);
	    };

	    /**
	     * ### .throw(function, [constructor/regexp], [message])
	     *
	     * Asserts that `function` will _not_ throw an error that is an instance of
	     * `constructor`, or alternately that it will not throw an error with message
	     * matching `regexp`.
	     *
	     *     should.not.throw(fn, Error, 'function does not throw');
	     *
	     * @name not.throw
	     * @alias not.Throw
	     * @param {Function} function
	     * @param {ErrorConstructor} constructor
	     * @param {RegExp} regexp
	     * @param {String} message
	     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	     * @namespace Should
	     * @api public
	     */

	    should.not.Throw = function (fn, errt, errs, msg) {
	      new Assertion(fn, msg).to.not.Throw(errt, errs);
	    };

	    /**
	     * ### .not.exist
	     *
	     * Asserts that the target is neither `null` nor `undefined`.
	     *
	     *     var bar = null;
	     *
	     *     should.not.exist(bar, 'bar does not exist');
	     *
	     * @name not.exist
	     * @namespace Should
	     * @api public
	     */

	    should.not.exist = function (val, msg) {
	      new Assertion(val, msg).to.not.exist;
	    }

	    should['throw'] = should['Throw'];
	    should.not['throw'] = should.not['Throw'];

	    return should;
	  };

	  chai.should = loadShould;
	  chai.Should = loadShould;
	};


/***/ }),
/* 41 */
/***/ (function(module, exports) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */


	module.exports = function (chai, util) {

	  /*!
	   * Chai dependencies.
	   */

	  var Assertion = chai.Assertion
	    , flag = util.flag;

	  /*!
	   * Module export.
	   */

	  /**
	   * ### assert(expression, message)
	   *
	   * Write your own test expressions.
	   *
	   *     assert('foo' !== 'bar', 'foo is not bar');
	   *     assert(Array.isArray([]), 'empty arrays are arrays');
	   *
	   * @param {Mixed} expression to test for truthiness
	   * @param {String} message to display on error
	   * @name assert
	   * @namespace Assert
	   * @api public
	   */

	  var assert = chai.assert = function (express, errmsg) {
	    var test = new Assertion(null, null, chai.assert);
	    test.assert(
	        express
	      , errmsg
	      , '[ negation message unavailable ]'
	    );
	  };

	  /**
	   * ### .fail(actual, expected, [message], [operator])
	   *
	   * Throw a failure. Node.js `assert` module-compatible.
	   *
	   * @name fail
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @param {String} operator
	   * @namespace Assert
	   * @api public
	   */

	  assert.fail = function (actual, expected, message, operator) {
	    message = message || 'assert.fail()';
	    throw new chai.AssertionError(message, {
	        actual: actual
	      , expected: expected
	      , operator: operator
	    }, assert.fail);
	  };

	  /**
	   * ### .isOk(object, [message])
	   *
	   * Asserts that `object` is truthy.
	   *
	   *     assert.isOk('everything', 'everything is ok');
	   *     assert.isOk(false, 'this will fail');
	   *
	   * @name isOk
	   * @alias ok
	   * @param {Mixed} object to test
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isOk = function (val, msg) {
	    new Assertion(val, msg).is.ok;
	  };

	  /**
	   * ### .isNotOk(object, [message])
	   *
	   * Asserts that `object` is falsy.
	   *
	   *     assert.isNotOk('everything', 'this will fail');
	   *     assert.isNotOk(false, 'this will pass');
	   *
	   * @name isNotOk
	   * @alias notOk
	   * @param {Mixed} object to test
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotOk = function (val, msg) {
	    new Assertion(val, msg).is.not.ok;
	  };

	  /**
	   * ### .equal(actual, expected, [message])
	   *
	   * Asserts non-strict equality (`==`) of `actual` and `expected`.
	   *
	   *     assert.equal(3, '3', '== coerces values to strings');
	   *
	   * @name equal
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.equal = function (act, exp, msg) {
	    var test = new Assertion(act, msg, assert.equal);

	    test.assert(
	        exp == flag(test, 'object')
	      , 'expected #{this} to equal #{exp}'
	      , 'expected #{this} to not equal #{act}'
	      , exp
	      , act
	    );
	  };

	  /**
	   * ### .notEqual(actual, expected, [message])
	   *
	   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
	   *
	   *     assert.notEqual(3, 4, 'these numbers are not equal');
	   *
	   * @name notEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.notEqual = function (act, exp, msg) {
	    var test = new Assertion(act, msg, assert.notEqual);

	    test.assert(
	        exp != flag(test, 'object')
	      , 'expected #{this} to not equal #{exp}'
	      , 'expected #{this} to equal #{act}'
	      , exp
	      , act
	    );
	  };

	  /**
	   * ### .strictEqual(actual, expected, [message])
	   *
	   * Asserts strict equality (`===`) of `actual` and `expected`.
	   *
	   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
	   *
	   * @name strictEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.strictEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.equal(exp);
	  };

	  /**
	   * ### .notStrictEqual(actual, expected, [message])
	   *
	   * Asserts strict inequality (`!==`) of `actual` and `expected`.
	   *
	   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
	   *
	   * @name notStrictEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.notStrictEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.not.equal(exp);
	  };

	  /**
	   * ### .deepEqual(actual, expected, [message])
	   *
	   * Asserts that `actual` is deeply equal to `expected`.
	   *
	   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
	   *
	   * @name deepEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.deepEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.eql(exp);
	  };

	  /**
	   * ### .notDeepEqual(actual, expected, [message])
	   *
	   * Assert that `actual` is not deeply equal to `expected`.
	   *
	   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
	   *
	   * @name notDeepEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.notDeepEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.not.eql(exp);
	  };

	   /**
	   * ### .isAbove(valueToCheck, valueToBeAbove, [message])
	   *
	   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`
	   *
	   *     assert.isAbove(5, 2, '5 is strictly greater than 2');
	   *
	   * @name isAbove
	   * @param {Mixed} valueToCheck
	   * @param {Mixed} valueToBeAbove
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isAbove = function (val, abv, msg) {
	    new Assertion(val, msg).to.be.above(abv);
	  };

	   /**
	   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
	   *
	   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`
	   *
	   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
	   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
	   *
	   * @name isAtLeast
	   * @param {Mixed} valueToCheck
	   * @param {Mixed} valueToBeAtLeast
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isAtLeast = function (val, atlst, msg) {
	    new Assertion(val, msg).to.be.least(atlst);
	  };

	   /**
	   * ### .isBelow(valueToCheck, valueToBeBelow, [message])
	   *
	   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`
	   *
	   *     assert.isBelow(3, 6, '3 is strictly less than 6');
	   *
	   * @name isBelow
	   * @param {Mixed} valueToCheck
	   * @param {Mixed} valueToBeBelow
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isBelow = function (val, blw, msg) {
	    new Assertion(val, msg).to.be.below(blw);
	  };

	   /**
	   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
	   *
	   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`
	   *
	   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
	   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
	   *
	   * @name isAtMost
	   * @param {Mixed} valueToCheck
	   * @param {Mixed} valueToBeAtMost
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isAtMost = function (val, atmst, msg) {
	    new Assertion(val, msg).to.be.most(atmst);
	  };

	  /**
	   * ### .isTrue(value, [message])
	   *
	   * Asserts that `value` is true.
	   *
	   *     var teaServed = true;
	   *     assert.isTrue(teaServed, 'the tea has been served');
	   *
	   * @name isTrue
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isTrue = function (val, msg) {
	    new Assertion(val, msg).is['true'];
	  };

	  /**
	   * ### .isNotTrue(value, [message])
	   *
	   * Asserts that `value` is not true.
	   *
	   *     var tea = 'tasty chai';
	   *     assert.isNotTrue(tea, 'great, time for tea!');
	   *
	   * @name isNotTrue
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotTrue = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(true);
	  };

	  /**
	   * ### .isFalse(value, [message])
	   *
	   * Asserts that `value` is false.
	   *
	   *     var teaServed = false;
	   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
	   *
	   * @name isFalse
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isFalse = function (val, msg) {
	    new Assertion(val, msg).is['false'];
	  };

	  /**
	   * ### .isNotFalse(value, [message])
	   *
	   * Asserts that `value` is not false.
	   *
	   *     var tea = 'tasty chai';
	   *     assert.isNotFalse(tea, 'great, time for tea!');
	   *
	   * @name isNotFalse
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotFalse = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(false);
	  };

	  /**
	   * ### .isNull(value, [message])
	   *
	   * Asserts that `value` is null.
	   *
	   *     assert.isNull(err, 'there was no error');
	   *
	   * @name isNull
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNull = function (val, msg) {
	    new Assertion(val, msg).to.equal(null);
	  };

	  /**
	   * ### .isNotNull(value, [message])
	   *
	   * Asserts that `value` is not null.
	   *
	   *     var tea = 'tasty chai';
	   *     assert.isNotNull(tea, 'great, time for tea!');
	   *
	   * @name isNotNull
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotNull = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(null);
	  };

	  /**
	   * ### .isNaN
	   * Asserts that value is NaN
	   *
	   *    assert.isNaN('foo', 'foo is NaN');
	   *
	   * @name isNaN
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNaN = function (val, msg) {
	    new Assertion(val, msg).to.be.NaN;
	  };

	  /**
	   * ### .isNotNaN
	   * Asserts that value is not NaN
	   *
	   *    assert.isNotNaN(4, '4 is not NaN');
	   *
	   * @name isNotNaN
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */
	  assert.isNotNaN = function (val, msg) {
	    new Assertion(val, msg).not.to.be.NaN;
	  };

	  /**
	   * ### .isUndefined(value, [message])
	   *
	   * Asserts that `value` is `undefined`.
	   *
	   *     var tea;
	   *     assert.isUndefined(tea, 'no tea defined');
	   *
	   * @name isUndefined
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isUndefined = function (val, msg) {
	    new Assertion(val, msg).to.equal(undefined);
	  };

	  /**
	   * ### .isDefined(value, [message])
	   *
	   * Asserts that `value` is not `undefined`.
	   *
	   *     var tea = 'cup of chai';
	   *     assert.isDefined(tea, 'tea has been defined');
	   *
	   * @name isDefined
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isDefined = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(undefined);
	  };

	  /**
	   * ### .isFunction(value, [message])
	   *
	   * Asserts that `value` is a function.
	   *
	   *     function serveTea() { return 'cup of tea'; };
	   *     assert.isFunction(serveTea, 'great, we can have tea now');
	   *
	   * @name isFunction
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isFunction = function (val, msg) {
	    new Assertion(val, msg).to.be.a('function');
	  };

	  /**
	   * ### .isNotFunction(value, [message])
	   *
	   * Asserts that `value` is _not_ a function.
	   *
	   *     var serveTea = [ 'heat', 'pour', 'sip' ];
	   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
	   *
	   * @name isNotFunction
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotFunction = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('function');
	  };

	  /**
	   * ### .isObject(value, [message])
	   *
	   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).
	   * _The assertion does not match subclassed objects._
	   *
	   *     var selection = { name: 'Chai', serve: 'with spices' };
	   *     assert.isObject(selection, 'tea selection is an object');
	   *
	   * @name isObject
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isObject = function (val, msg) {
	    new Assertion(val, msg).to.be.a('object');
	  };

	  /**
	   * ### .isNotObject(value, [message])
	   *
	   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).
	   *
	   *     var selection = 'chai'
	   *     assert.isNotObject(selection, 'tea selection is not an object');
	   *     assert.isNotObject(null, 'null is not an object');
	   *
	   * @name isNotObject
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotObject = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('object');
	  };

	  /**
	   * ### .isArray(value, [message])
	   *
	   * Asserts that `value` is an array.
	   *
	   *     var menu = [ 'green', 'chai', 'oolong' ];
	   *     assert.isArray(menu, 'what kind of tea do we want?');
	   *
	   * @name isArray
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isArray = function (val, msg) {
	    new Assertion(val, msg).to.be.an('array');
	  };

	  /**
	   * ### .isNotArray(value, [message])
	   *
	   * Asserts that `value` is _not_ an array.
	   *
	   *     var menu = 'green|chai|oolong';
	   *     assert.isNotArray(menu, 'what kind of tea do we want?');
	   *
	   * @name isNotArray
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotArray = function (val, msg) {
	    new Assertion(val, msg).to.not.be.an('array');
	  };

	  /**
	   * ### .isString(value, [message])
	   *
	   * Asserts that `value` is a string.
	   *
	   *     var teaOrder = 'chai';
	   *     assert.isString(teaOrder, 'order placed');
	   *
	   * @name isString
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isString = function (val, msg) {
	    new Assertion(val, msg).to.be.a('string');
	  };

	  /**
	   * ### .isNotString(value, [message])
	   *
	   * Asserts that `value` is _not_ a string.
	   *
	   *     var teaOrder = 4;
	   *     assert.isNotString(teaOrder, 'order placed');
	   *
	   * @name isNotString
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotString = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('string');
	  };

	  /**
	   * ### .isNumber(value, [message])
	   *
	   * Asserts that `value` is a number.
	   *
	   *     var cups = 2;
	   *     assert.isNumber(cups, 'how many cups');
	   *
	   * @name isNumber
	   * @param {Number} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNumber = function (val, msg) {
	    new Assertion(val, msg).to.be.a('number');
	  };

	  /**
	   * ### .isNotNumber(value, [message])
	   *
	   * Asserts that `value` is _not_ a number.
	   *
	   *     var cups = '2 cups please';
	   *     assert.isNotNumber(cups, 'how many cups');
	   *
	   * @name isNotNumber
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotNumber = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('number');
	  };

	  /**
	   * ### .isBoolean(value, [message])
	   *
	   * Asserts that `value` is a boolean.
	   *
	   *     var teaReady = true
	   *       , teaServed = false;
	   *
	   *     assert.isBoolean(teaReady, 'is the tea ready');
	   *     assert.isBoolean(teaServed, 'has tea been served');
	   *
	   * @name isBoolean
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isBoolean = function (val, msg) {
	    new Assertion(val, msg).to.be.a('boolean');
	  };

	  /**
	   * ### .isNotBoolean(value, [message])
	   *
	   * Asserts that `value` is _not_ a boolean.
	   *
	   *     var teaReady = 'yep'
	   *       , teaServed = 'nope';
	   *
	   *     assert.isNotBoolean(teaReady, 'is the tea ready');
	   *     assert.isNotBoolean(teaServed, 'has tea been served');
	   *
	   * @name isNotBoolean
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotBoolean = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('boolean');
	  };

	  /**
	   * ### .typeOf(value, name, [message])
	   *
	   * Asserts that `value`'s type is `name`, as determined by
	   * `Object.prototype.toString`.
	   *
	   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
	   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
	   *     assert.typeOf('tea', 'string', 'we have a string');
	   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
	   *     assert.typeOf(null, 'null', 'we have a null');
	   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
	   *
	   * @name typeOf
	   * @param {Mixed} value
	   * @param {String} name
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.typeOf = function (val, type, msg) {
	    new Assertion(val, msg).to.be.a(type);
	  };

	  /**
	   * ### .notTypeOf(value, name, [message])
	   *
	   * Asserts that `value`'s type is _not_ `name`, as determined by
	   * `Object.prototype.toString`.
	   *
	   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
	   *
	   * @name notTypeOf
	   * @param {Mixed} value
	   * @param {String} typeof name
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.notTypeOf = function (val, type, msg) {
	    new Assertion(val, msg).to.not.be.a(type);
	  };

	  /**
	   * ### .instanceOf(object, constructor, [message])
	   *
	   * Asserts that `value` is an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , chai = new Tea('chai');
	   *
	   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
	   *
	   * @name instanceOf
	   * @param {Object} object
	   * @param {Constructor} constructor
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.instanceOf = function (val, type, msg) {
	    new Assertion(val, msg).to.be.instanceOf(type);
	  };

	  /**
	   * ### .notInstanceOf(object, constructor, [message])
	   *
	   * Asserts `value` is not an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , chai = new String('chai');
	   *
	   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
	   *
	   * @name notInstanceOf
	   * @param {Object} object
	   * @param {Constructor} constructor
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.notInstanceOf = function (val, type, msg) {
	    new Assertion(val, msg).to.not.be.instanceOf(type);
	  };

	  /**
	   * ### .include(haystack, needle, [message])
	   *
	   * Asserts that `haystack` includes `needle`. Works
	   * for strings and arrays.
	   *
	   *     assert.include('foobar', 'bar', 'foobar contains string "bar"');
	   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');
	   *
	   * @name include
	   * @param {Array|String} haystack
	   * @param {Mixed} needle
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.include = function (exp, inc, msg) {
	    new Assertion(exp, msg, assert.include).include(inc);
	  };

	  /**
	   * ### .notInclude(haystack, needle, [message])
	   *
	   * Asserts that `haystack` does not include `needle`. Works
	   * for strings and arrays.
	   *
	   *     assert.notInclude('foobar', 'baz', 'string not include substring');
	   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');
	   *
	   * @name notInclude
	   * @param {Array|String} haystack
	   * @param {Mixed} needle
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.notInclude = function (exp, inc, msg) {
	    new Assertion(exp, msg, assert.notInclude).not.include(inc);
	  };

	  /**
	   * ### .match(value, regexp, [message])
	   *
	   * Asserts that `value` matches the regular expression `regexp`.
	   *
	   *     assert.match('foobar', /^foo/, 'regexp matches');
	   *
	   * @name match
	   * @param {Mixed} value
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.match = function (exp, re, msg) {
	    new Assertion(exp, msg).to.match(re);
	  };

	  /**
	   * ### .notMatch(value, regexp, [message])
	   *
	   * Asserts that `value` does not match the regular expression `regexp`.
	   *
	   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
	   *
	   * @name notMatch
	   * @param {Mixed} value
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.notMatch = function (exp, re, msg) {
	    new Assertion(exp, msg).to.not.match(re);
	  };

	  /**
	   * ### .property(object, property, [message])
	   *
	   * Asserts that `object` has a property named by `property`.
	   *
	   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
	   *
	   * @name property
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.property = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.have.property(prop);
	  };

	  /**
	   * ### .notProperty(object, property, [message])
	   *
	   * Asserts that `object` does _not_ have a property named by `property`.
	   *
	   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
	   *
	   * @name notProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.notProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.not.have.property(prop);
	  };

	  /**
	   * ### .deepProperty(object, property, [message])
	   *
	   * Asserts that `object` has a property named by `property`, which can be a
	   * string using dot- and bracket-notation for deep reference.
	   *
	   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');
	   *
	   * @name deepProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.deepProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.have.deep.property(prop);
	  };

	  /**
	   * ### .notDeepProperty(object, property, [message])
	   *
	   * Asserts that `object` does _not_ have a property named by `property`, which
	   * can be a string using dot- and bracket-notation for deep reference.
	   *
	   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
	   *
	   * @name notDeepProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.notDeepProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.not.have.deep.property(prop);
	  };

	  /**
	   * ### .propertyVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property` with value given
	   * by `value`.
	   *
	   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
	   *
	   * @name propertyVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.propertyVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.have.property(prop, val);
	  };

	  /**
	   * ### .propertyNotVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property`, but with a value
	   * different from that given by `value`.
	   *
	   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');
	   *
	   * @name propertyNotVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.propertyNotVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.not.have.property(prop, val);
	  };

	  /**
	   * ### .deepPropertyVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property` with value given
	   * by `value`. `property` can use dot- and bracket-notation for deep
	   * reference.
	   *
	   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
	   *
	   * @name deepPropertyVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.deepPropertyVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.have.deep.property(prop, val);
	  };

	  /**
	   * ### .deepPropertyNotVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property`, but with a value
	   * different from that given by `value`. `property` can use dot- and
	   * bracket-notation for deep reference.
	   *
	   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
	   *
	   * @name deepPropertyNotVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.deepPropertyNotVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.not.have.deep.property(prop, val);
	  };

	  /**
	   * ### .lengthOf(object, length, [message])
	   *
	   * Asserts that `object` has a `length` property with the expected value.
	   *
	   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
	   *     assert.lengthOf('foobar', 6, 'string has length of 6');
	   *
	   * @name lengthOf
	   * @param {Mixed} object
	   * @param {Number} length
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.lengthOf = function (exp, len, msg) {
	    new Assertion(exp, msg).to.have.length(len);
	  };

	  /**
	   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])
	   *
	   * Asserts that `function` will throw an error that is an instance of
	   * `constructor`, or alternately that it will throw an error with message
	   * matching `regexp`.
	   *
	   *     assert.throws(fn, 'function throws a reference error');
	   *     assert.throws(fn, /function throws a reference error/);
	   *     assert.throws(fn, ReferenceError);
	   *     assert.throws(fn, ReferenceError, 'function throws a reference error');
	   *     assert.throws(fn, ReferenceError, /function throws a reference error/);
	   *
	   * @name throws
	   * @alias throw
	   * @alias Throw
	   * @param {Function} function
	   * @param {ErrorConstructor} constructor
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @namespace Assert
	   * @api public
	   */

	  assert.throws = function (fn, errt, errs, msg) {
	    if ('string' === typeof errt || errt instanceof RegExp) {
	      errs = errt;
	      errt = null;
	    }

	    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);
	    return flag(assertErr, 'object');
	  };

	  /**
	   * ### .doesNotThrow(function, [constructor/regexp], [message])
	   *
	   * Asserts that `function` will _not_ throw an error that is an instance of
	   * `constructor`, or alternately that it will not throw an error with message
	   * matching `regexp`.
	   *
	   *     assert.doesNotThrow(fn, Error, 'function does not throw');
	   *
	   * @name doesNotThrow
	   * @param {Function} function
	   * @param {ErrorConstructor} constructor
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @namespace Assert
	   * @api public
	   */

	  assert.doesNotThrow = function (fn, type, msg) {
	    if ('string' === typeof type) {
	      msg = type;
	      type = null;
	    }

	    new Assertion(fn, msg).to.not.Throw(type);
	  };

	  /**
	   * ### .operator(val1, operator, val2, [message])
	   *
	   * Compares two values using `operator`.
	   *
	   *     assert.operator(1, '<', 2, 'everything is ok');
	   *     assert.operator(1, '>', 2, 'this will fail');
	   *
	   * @name operator
	   * @param {Mixed} val1
	   * @param {String} operator
	   * @param {Mixed} val2
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.operator = function (val, operator, val2, msg) {
	    var ok;
	    switch(operator) {
	      case '==':
	        ok = val == val2;
	        break;
	      case '===':
	        ok = val === val2;
	        break;
	      case '>':
	        ok = val > val2;
	        break;
	      case '>=':
	        ok = val >= val2;
	        break;
	      case '<':
	        ok = val < val2;
	        break;
	      case '<=':
	        ok = val <= val2;
	        break;
	      case '!=':
	        ok = val != val2;
	        break;
	      case '!==':
	        ok = val !== val2;
	        break;
	      default:
	        throw new Error('Invalid operator "' + operator + '"');
	    }
	    var test = new Assertion(ok, msg);
	    test.assert(
	        true === flag(test, 'object')
	      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
	      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
	  };

	  /**
	   * ### .closeTo(actual, expected, delta, [message])
	   *
	   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
	   *
	   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
	   *
	   * @name closeTo
	   * @param {Number} actual
	   * @param {Number} expected
	   * @param {Number} delta
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.closeTo = function (act, exp, delta, msg) {
	    new Assertion(act, msg).to.be.closeTo(exp, delta);
	  };

	  /**
	   * ### .approximately(actual, expected, delta, [message])
	   *
	   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
	   *
	   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
	   *
	   * @name approximately
	   * @param {Number} actual
	   * @param {Number} expected
	   * @param {Number} delta
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.approximately = function (act, exp, delta, msg) {
	    new Assertion(act, msg).to.be.approximately(exp, delta);
	  };

	  /**
	   * ### .sameMembers(set1, set2, [message])
	   *
	   * Asserts that `set1` and `set2` have the same members.
	   * Order is not taken into account.
	   *
	   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
	   *
	   * @name sameMembers
	   * @param {Array} set1
	   * @param {Array} set2
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.sameMembers = function (set1, set2, msg) {
	    new Assertion(set1, msg).to.have.same.members(set2);
	  }

	  /**
	   * ### .sameDeepMembers(set1, set2, [message])
	   *
	   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.
	   * Order is not taken into account.
	   *
	   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');
	   *
	   * @name sameDeepMembers
	   * @param {Array} set1
	   * @param {Array} set2
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.sameDeepMembers = function (set1, set2, msg) {
	    new Assertion(set1, msg).to.have.same.deep.members(set2);
	  }

	  /**
	   * ### .includeMembers(superset, subset, [message])
	   *
	   * Asserts that `subset` is included in `superset`.
	   * Order is not taken into account.
	   *
	   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');
	   *
	   * @name includeMembers
	   * @param {Array} superset
	   * @param {Array} subset
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.includeMembers = function (superset, subset, msg) {
	    new Assertion(superset, msg).to.include.members(subset);
	  }

	  /**
	   * ### .includeDeepMembers(superset, subset, [message])
	   *
	   * Asserts that `subset` is included in `superset` - using deep equality checking.
	   * Order is not taken into account.
	   * Duplicates are ignored.
	   *
	   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');
	   *
	   * @name includeDeepMembers
	   * @param {Array} superset
	   * @param {Array} subset
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.includeDeepMembers = function (superset, subset, msg) {
	    new Assertion(superset, msg).to.include.deep.members(subset);
	  }

	  /**
	   * ### .oneOf(inList, list, [message])
	   *
	   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
	   *
	   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
	   *
	   * @name oneOf
	   * @param {*} inList
	   * @param {Array<*>} list
	   * @param {String} message
	   * @namespace Assert
	   * @api public
	   */

	  assert.oneOf = function (inList, list, msg) {
	    new Assertion(inList, msg).to.be.oneOf(list);
	  }

	   /**
	   * ### .changes(function, object, property)
	   *
	   * Asserts that a function changes the value of a property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 22 };
	   *     assert.changes(fn, obj, 'val');
	   *
	   * @name changes
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.changes = function (fn, obj, prop) {
	    new Assertion(fn).to.change(obj, prop);
	  }

	   /**
	   * ### .doesNotChange(function, object, property)
	   *
	   * Asserts that a function does not changes the value of a property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { console.log('foo'); };
	   *     assert.doesNotChange(fn, obj, 'val');
	   *
	   * @name doesNotChange
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.doesNotChange = function (fn, obj, prop) {
	    new Assertion(fn).to.not.change(obj, prop);
	  }

	   /**
	   * ### .increases(function, object, property)
	   *
	   * Asserts that a function increases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 13 };
	   *     assert.increases(fn, obj, 'val');
	   *
	   * @name increases
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.increases = function (fn, obj, prop) {
	    new Assertion(fn).to.increase(obj, prop);
	  }

	   /**
	   * ### .doesNotIncrease(function, object, property)
	   *
	   * Asserts that a function does not increase object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 8 };
	   *     assert.doesNotIncrease(fn, obj, 'val');
	   *
	   * @name doesNotIncrease
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.doesNotIncrease = function (fn, obj, prop) {
	    new Assertion(fn).to.not.increase(obj, prop);
	  }

	   /**
	   * ### .decreases(function, object, property)
	   *
	   * Asserts that a function decreases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 5 };
	   *     assert.decreases(fn, obj, 'val');
	   *
	   * @name decreases
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.decreases = function (fn, obj, prop) {
	    new Assertion(fn).to.decrease(obj, prop);
	  }

	   /**
	   * ### .doesNotDecrease(function, object, property)
	   *
	   * Asserts that a function does not decreases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 15 };
	   *     assert.doesNotDecrease(fn, obj, 'val');
	   *
	   * @name doesNotDecrease
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.doesNotDecrease = function (fn, obj, prop) {
	    new Assertion(fn).to.not.decrease(obj, prop);
	  }

	  /*!
	   * ### .ifError(object)
	   *
	   * Asserts if value is not a false value, and throws if it is a true value.
	   * This is added to allow for chai to be a drop-in replacement for Node's
	   * assert class.
	   *
	   *     var err = new Error('I am a custom error');
	   *     assert.ifError(err); // Rethrows err!
	   *
	   * @name ifError
	   * @param {Object} object
	   * @namespace Assert
	   * @api public
	   */

	  assert.ifError = function (val) {
	    if (val) {
	      throw(val);
	    }
	  };

	  /**
	   * ### .isExtensible(object)
	   *
	   * Asserts that `object` is extensible (can have new properties added to it).
	   *
	   *     assert.isExtensible({});
	   *
	   * @name isExtensible
	   * @alias extensible
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.isExtensible = function (obj, msg) {
	    new Assertion(obj, msg).to.be.extensible;
	  };

	  /**
	   * ### .isNotExtensible(object)
	   *
	   * Asserts that `object` is _not_ extensible.
	   *
	   *     var nonExtensibleObject = Object.preventExtensions({});
	   *     var sealedObject = Object.seal({});
	   *     var frozenObject = Object.freese({});
	   *
	   *     assert.isNotExtensible(nonExtensibleObject);
	   *     assert.isNotExtensible(sealedObject);
	   *     assert.isNotExtensible(frozenObject);
	   *
	   * @name isNotExtensible
	   * @alias notExtensible
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotExtensible = function (obj, msg) {
	    new Assertion(obj, msg).to.not.be.extensible;
	  };

	  /**
	   * ### .isSealed(object)
	   *
	   * Asserts that `object` is sealed (cannot have new properties added to it
	   * and its existing properties cannot be removed).
	   *
	   *     var sealedObject = Object.seal({});
	   *     var frozenObject = Object.seal({});
	   *
	   *     assert.isSealed(sealedObject);
	   *     assert.isSealed(frozenObject);
	   *
	   * @name isSealed
	   * @alias sealed
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.isSealed = function (obj, msg) {
	    new Assertion(obj, msg).to.be.sealed;
	  };

	  /**
	   * ### .isNotSealed(object)
	   *
	   * Asserts that `object` is _not_ sealed.
	   *
	   *     assert.isNotSealed({});
	   *
	   * @name isNotSealed
	   * @alias notSealed
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotSealed = function (obj, msg) {
	    new Assertion(obj, msg).to.not.be.sealed;
	  };

	  /**
	   * ### .isFrozen(object)
	   *
	   * Asserts that `object` is frozen (cannot have new properties added to it
	   * and its existing properties cannot be modified).
	   *
	   *     var frozenObject = Object.freeze({});
	   *     assert.frozen(frozenObject);
	   *
	   * @name isFrozen
	   * @alias frozen
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.isFrozen = function (obj, msg) {
	    new Assertion(obj, msg).to.be.frozen;
	  };

	  /**
	   * ### .isNotFrozen(object)
	   *
	   * Asserts that `object` is _not_ frozen.
	   *
	   *     assert.isNotFrozen({});
	   *
	   * @name isNotFrozen
	   * @alias notFrozen
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @namespace Assert
	   * @api public
	   */

	  assert.isNotFrozen = function (obj, msg) {
	    new Assertion(obj, msg).to.not.be.frozen;
	  };

	  /*!
	   * Aliases.
	   */

	  (function alias(name, as){
	    assert[as] = assert[name];
	    return alias;
	  })
	  ('isOk', 'ok')
	  ('isNotOk', 'notOk')
	  ('throws', 'throw')
	  ('throws', 'Throw')
	  ('isExtensible', 'extensible')
	  ('isNotExtensible', 'notExtensible')
	  ('isSealed', 'sealed')
	  ('isNotSealed', 'notSealed')
	  ('isFrozen', 'frozen')
	  ('isNotFrozen', 'notFrozen');
	};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// Please note making changes to the styles here might make some of the project
	// tests no longer work, or even just give a false positive. Especially if you
	// change a selector name.
	// The project tests generally try to filter out any CSS selectors that
	// contain 'fcc_test', or that contain 'mocha'. So please make sure the
	// selectors here use that naming convention.
	// See the following project tests which rely on filtering out the CSS rules
	// used here. If you find other project tests that rely on the CSS here,
	// please add them to the list:
	// - styleSheetUtils.js
	// - product-landing-page-tests.js

	var test_suite_skeleton = "\n  <style>\n    @import url('https://fonts.googleapis.com/css?family=Noto+Sans');\n\n    /* TEST/MESSAGE CENTER CSS */\n\n    #fcc_test_message-box {\n      font-size: 20px !important;\n      font-family: Noto Sans, arial, sans-serif !important;\n      position: fixed;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      text-align: center;\n      background-color: rgba(0, 0, 0, 0.8) !important;\n      transition: all .5s;\n      z-index: 100000;\n      overflow: auto;\n    }\n\n    .fcc_test_message-box-hidden {\n      visibility: hidden;\n      opacity: 0;\n      top: -300px;\n    }\n\n    .fcc_test_message-box-shown {\n      visibility: visible;\n      opacity: 1;\n      top: 0;\n    }\n\n    .fcc_test_message-box-content {\n      position: relative;\n      color: black !important;\n      background-color: white !important;\n      top: 10vh;\n      width: 80%;\n      margin: 0 auto !important;\n      text-align: initial;\n      border-radius: 10px !important;\n      display: flex;\n      flex-direction: column;\n    }\n    .fcc_test_message-box-header,\n    .fcc_test_message-box-footer{\n      position: relative;\n      flex: none;\n      box-sizing: border-box !important;\n      padding: 10px !important;\n    }\n    .fcc_test_message-box-header {\n      border-bottom: 1px solid rgb(229,229,229);\n      height: 60px;\n    }\n\n    .fcc_test_message-box-header .title {\n      float: left;\n      font-size: 30px !important;\n      line-height: 40px !important;\n      margin-left: 10px !important;\n    }\n\n    .fcc_test_message-box-body {\n      flex: 1;\n    }\n\n    .fcc_test_message-box-footer {\n      border-top: 1px solid rgb(229,229,229);\n      height: 70px;\n    }\n\n    .fcc_test_message-box-close-btn {\n      float: right;\n      color: black;\n      background-color: white;\n      border: 1px solid rgb(229,229,229);\n      border-radius: 4px;\n      padding: 10px 20px !important;\n      margin-bottom: 10px;\n      transition: all .3s;\n    }\n    .fcc_test_message-box-close-btn:hover {\n      color: white;\n      background-color: black;\n    }\n\n    #mocha {\n      margin: 10px !important;\n    }\n    #mocha .test pre {\n      background-color: rgb(245, 245, 245) !important;\n    }\n    #mocha-stats {\n      position: absolute;\n    }\n    #mocha ul {\n      max-width: initial;\n      margin: initial !important;\n      text-align: initial;\n    }\n    #mocha * {\n      font-family: Noto Sans, arial, sans-serif !important;\n      border: none !important;\n    }\n\n    div {\n      position: static;\n    }\n\n    /* FOLDOUT MENU CSS */\n\n    #fcc_foldout_menu {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 320px;\n      height: 210px;\n      border-radius: 0 !important;\n      border-bottom-right-radius: 5px !important;\n      background-color: rgba(255, 255, 204, 0.9) !important;\n      z-index: 99997;\n      font-family: Noto Sans, arial, sans-serif !important;\n      box-shadow: 1px 1px 10px rgba(128, 128, 128, 0.6) !important;\n      transition: .5s;\n    }\n    #toggle:checked ~ #fcc_foldout_menu {\n      left: -320px;\n      transition: .5s ease-in-out;\n    }\n    #fcc_foldout_menu_inner {\n      position: relative;\n    }\n    #toggle {\n      height: 24px;\n      width: 25px;\n      position: fixed;\n      top: 7px;\n      left: 20px;\n      opacity: 0;\n      cursor: pointer;\n      z-index: 99999;\n    }\n    #fcc_foldout_toggler {\n      position: absolute;\n      top: 20px;\n      left: 20px;\n      z-index: 99998;\n    }\n\n    .transform_top {\n      opacity: 1;\n      transform: rotate(45deg) translate(-2px, -1px);\n    }\n    .transform_middle {\n      opacity: 0;\n      transform: rotate(0deg) scale(0.2, 0.2);\n    }\n    .transform_bottom {\n      opacity: 1;\n      transform: rotate(-45deg) translate(-1px, -1px);\n    }\n\n    .fcc_hamburger {\n      position: relative;\n      width: 25px;\n      height: 3px;\n      display: block;\n      background: black !important;\n      border-radius: 5px !important;\n      transform-origin: 4px 0px;\n      transition: transform 0.4s ease, opacity 0.55s ease;\n    }\n    #hamburger_top {\n      position: absolute;\n      top: -6px;\n      transform-origin: 0% 80%;\n    }\n    #hamburger_bottom {\n      position: absolute;\n      bottom: -6px;\n      transform-origin: 20% 80%;\n    }\n\n    #fcc_foldout_menu label {\n      top: 38px;\n      left: 20px;\n      position: absolute;\n      font-size: 15px !important;\n      color: black !important;\n    }\n    #fcc_foldout_menu select {\n      display: block;\n      padding: 0;\n      height: auto;\n      width: auto;\n      top: 61px;\n      left: 18px;\n      position: absolute;\n      font-size: 12px !important;\n      font-family: Noto Sans, Arial, sans-serif !important;\n    }\n\n    .fcc_foldout_buttons {\n      position: absolute;\n      left: 20px;\n      height: 20px;\n      width: 110px;\n      padding: 10px !important;\n      display: block;\n      font-size: 15px !important;\n      line-height: 15px !important;\n      text-align: center;\n      border: none !important;\n      outline: none !important;\n      color: white;\n      background-color: rgba(128, 128, 128, 0.7);\n      border-radius: 4px;\n      box-sizing: content-box !important;\n      z-index: 0;\n      cursor: pointer;\n      box-shadow: 1px 1px 4px black;\n      font-family: Noto Sans, arial, sans-serif !important;\n    }\n    #fcc_test_message-box-rerun-button {\n      top: 90px;\n      transition: all .3s;\n    }\n    #fcc_test_message-box-rerun-button:hover {\n      color: white;\n      background-color: black;\n    }\n    #fcc_test_button {\n      top: 140px;\n    }\n    .fcc_test_btn-default {\n      background-color: rgba(128, 128, 128, 0.7);\n    }\n    .fcc_test_btn-executing {\n      background-color: rgba(255, 153, 0, 0.9);\n    }\n    .fcc_test_btn-error {\n      background-color: rgba(255, 0, 0, 0.7);\n    }\n    .fcc_test_btn-success {\n      background-color: rgba(81, 211, 81, 0.9);\n    }\n    #fcc_report-bug {\n      position: absolute;\n      top: 186px;\n      left: 20px;\n      width: 110px;\n      padding: 0 10px !important;\n      font-size: 12px !important;\n      text-align: center;\n    }\n\n    #fcc_legend_wrapper {\n      position: absolute;\n      top: 95px;\n      left: 160px;\n      width: 125px;\n      vertical-align: top;\n      text-align: left !important;\n      font-size: 15px !important;\n      background: none !important;\n    }\n    #fcc_legend_wrapper span {\n      height: 15px;\n      margin-top: 6px !important;\n      font-size: 12px  !important;\n      color: black !important;\n      background: none !important;\n    }\n    .key {\n      height: 15px;\n      width: 15px;\n      margin: 5px !important;\n      vertical-align: top;\n      border-radius: 0 !important;\n    }\n    .key:first-of-type {\n      background-color: rgba(255, 0, 0, 0.7);\n    }\n    .key:nth-of-type(2) {\n      background-color: rgba(81, 211, 81, 0.9);\n    }\n    .key:nth-of-type(3) {\n      background-color: rgba(255, 153, 0, 0.9);\n    }\n    .fcc_legend {\n      position: relative;\n      display: inline-block;\n    }\n\n    #fcc_test_suite_indicator_wrapper {\n      position: fixed;\n      top: 15px;\n      right: 20px;\n    }\n    #fcc_test_suite_indicator {\n      position: fixed;\n      top: 15px;\n      right: 20px;\n      font-size: 12px !important;\n      background-color: rgba(255, 255, 204, 0.9) !important;\n      color: black !important;\n      padding: 3px 5px !important;\n      border-radius: 5px !important;\n      box-shadow: 1px 1px 10px rgba(128, 128, 128, 0.6) !important;\n      font-family: Noto Sans, arial, sans-serif !important;\n    }\n  </style>\n\n  <div id=\"fcc_test_suite_indicator_wrapper\"></div>\n  <div id=\"fcc_foldout_toggler\">\n    <span id=\"hamburger_top\" class=\"fcc_hamburger transform_top\"></span>\n    <span id=\"hamburger_middle\" class=\"fcc_hamburger transform_middle\"></span>\n    <span id=\"hamburger_bottom\" class=\"fcc_hamburger transform_bottom\"></span>\n  </div>\n  <input id=\"toggle\" onclick=\"FCC_Global.hamburger_transform()\" type=\"checkbox\" title=\"CTRL + SHIFT + O\">\n  <div id=\"fcc_foldout_menu\">\n    <div id=\"fcc_foldout_menu_inner\">\n      <label for=\"test-suite-selector\">Select Test Suite: </label>\n      <select name=\"Test Suite Selector\" id=\"test-suite-selector\" onchange=\"FCC_Global.selectProject(this.value)\">\n        <option id=\"placeholder\" value=\"\">- - -</option>\n        <option value=\"tribute-page\">Tribute Page</option>\n        <option value=\"portfolio\">Personal Portfolio</option>\n        <option value=\"survey-form\">Survey Form</option>\n        <option value=\"product-landing-page\">Product Landing Page</option>\n        <option value=\"technical-docs-page\">Technical Documentation Page</option>\n        <option value=\"random-quote-machine\">Random Quote Machine</option>\n        <option value=\"markdown-previewer\">Markdown Previewer</option>\n        <option value=\"drum-machine\">Drum Machine</option>\n        <option value=\"pomodoro-clock\">Pomodoro Clock</option>\n        <option value=\"javascript-calculator\">Javascript Calculator</option>\n        <option value=\"bar-chart\">D3: Bar Chart</option>\n        <option value=\"scatter-plot\">D3: Scatter Plot</option>\n        <option value=\"heat-map\">D3: Heat Map</option>\n        <option value=\"choropleth\">D3: Choropleth</option>\n        <option value=\"tree-map\">D3: Tree Map</option>\n      </select>\n      <button id=\"fcc_test_message-box-rerun-button\" type=\"button\" class=\"fcc_foldout_buttons\" title=\"CTRL + SHIFT + ENTER\" onclick=\"FCC_Global.FCCRerunTests()\">\n        Run Tests\n      </button>\n      <button id=\"fcc_test_button\" type=\"button\" class=\"fcc_foldout_buttons fcc_test_btn-default\" title=\"CTRL + SHIFT + T\" onclick=\"FCC_Global.FCCOpenTestModal()\">\n        Tests\n      </button>\n      <div id=\"fcc_legend_wrapper\">\n        <div class=\"fcc_legend key\"></div><span class=\"fcc_legend\">Test(s) Failed</span>\n        <div class=\"fcc_legend key\"></div><span class=\"fcc_legend\">Tests Passed</span>\n        <div class=\"fcc_legend key\"></div><span class=\"fcc_legend\">Tests Executing</span>\n      </div>\n      <span id=\"fcc_report-bug\"><a href=\"https://github.com/freeCodeCamp/testable-projects-fcc/issues/new\" target=\"_blank\">Report Bug</a></span>\n    </div>\n  </div>\n  <div id=\"fcc_test_message-box\" class=\"fcc_test_message-box-hidden\" onclick=\"FCC_Global.FCCclickOutsideToCloseModal(event)\">\n    <div class=\"fcc_test_message-box-content\">\n      <div class=\"fcc_test_message-box-header\">\n        <div class=\"title\">Unit tests</div>\n      </div>\n      <div class=\"fcc_test_message-box-body\">\n        <div id=\"mocha\">Run Test Suite to See Unit Tests!</div>\n      </div>\n      <div class=\"fcc_test_message-box-footer\">\n        <div class=\"fcc_test_message-box-close-btn\" onclick=\"FCC_Global.FCCCloseTestModal()\">Close</div>\n      </div>\n    </div>\n  </div>";

	exports.default = test_suite_skeleton;

/***/ }),
/* 43 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var mocha_CSS = "@charset \"utf-8\";#mocha .test .html-error,#mocha .test pre{float:left;clear:left;word-wrap:break-word}#mocha ul,#mocha-stats li{list-style:none}#mocha h1,#mocha h2{margin:0}#mocha{font:20px/1.5 \"Helvetica Neue\",Helvetica,Arial,sans-serif;margin:60px 50px}#mocha li,#mocha ul{margin:0;padding:0}#mocha .suite,#mocha .test{margin-left:15px}#mocha h1{margin-top:15px;font-size:1em;font-weight:200}#mocha h1 a{text-decoration:none;color:inherit}#mocha h1 a:hover{text-decoration:underline}#mocha .suite .suite h1{margin-top:0;font-size:.8em}#mocha .hidden{display:none}#mocha h2{font-size:12px;font-weight:400;cursor:pointer}#mocha .test{overflow:hidden}#mocha .test.pending:hover h2::after{content:'(pending)';font-family:arial,sans-serif}#mocha .test.pass.medium .duration{background:#c09853}#mocha .test.pass.slow .duration{background:#b94a48}#mocha .test.pass::before{content:'\u2713';font-size:12px;display:block;float:left;margin-right:5px;color:#00d6b2}#mocha .test.pass .duration{font-size:9px;margin-left:5px;padding:2px 5px;color:#fff;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.2);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,.2);box-shadow:inset 0 1px 1px rgba(0,0,0,.2);-webkit-border-radius:5px;-moz-border-radius:5px;-ms-border-radius:5px;-o-border-radius:5px;border-radius:5px}#mocha .test.pass.fast .duration{display:none}#mocha .test.pending{color:#0b97c4}#mocha .test.pending::before{content:'\u25E6';color:#0b97c4}#mocha .test.fail{color:#c00}#mocha .test.fail pre{color:#000}#mocha .test.fail::before{content:'\u2716';font-size:12px;display:block;float:left;margin-right:5px;color:#c00}#mocha .test pre.error{color:#c00;max-height:300px;overflow:auto}#mocha .test .html-error{overflow:auto;color:#000;line-height:1.5;display:block;font:12px/1.5 monaco,monospace;margin:5px;padding:15px;border:1px solid #eee;max-width:85%;max-width:-webkit-calc(100% - 42px);max-width:-moz-calc(100% - 42px);max-width:calc(100% - 42px);max-height:300px;border-bottom-color:#ddd;-webkit-box-shadow:0 1px 3px #eee;-moz-box-shadow:0 1px 3px #eee;box-shadow:0 1px 3px #eee;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}#mocha .test .html-error pre.error{border:none;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;-webkit-box-shadow:0;-moz-box-shadow:0;box-shadow:0;padding:0;margin:18px 0 0;max-height:none}#mocha .test pre{display:block;font:12px/1.5 monaco,monospace;margin:5px;padding:15px;border:1px solid #eee;max-width:85%;max-width:-webkit-calc(100% - 42px);max-width:-moz-calc(100% - 42px);max-width:calc(100% - 42px);border-bottom-color:#ddd;-webkit-box-shadow:0 1px 3px #eee;-moz-box-shadow:0 1px 3px #eee;box-shadow:0 1px 3px #eee;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}#mocha .test h2{position:relative}#mocha .test a.replay{position:absolute;top:3px;right:0;text-decoration:none;vertical-align:middle;display:block;width:15px;height:15px;line-height:15px;text-align:center;background:#eee;font-size:15px;-webkit-border-radius:15px;-moz-border-radius:15px;border-radius:15px;-webkit-transition:opacity .2s;-moz-transition:opacity .2s;-o-transition:opacity .2s;transition:opacity .2s;opacity:.3;color:#888}#mocha .test:hover a.replay{opacity:1}#mocha-report.fail .test.pass,#mocha-report.pass .test.fail,#mocha-report.pending .test.fail,#mocha-report.pending .test.pass{display:none}#mocha-report.pending .test.pass.pending{display:block}#mocha-error{color:#c00;font-size:1.5em;font-weight:100;letter-spacing:1px}#mocha-stats{position:fixed;top:15px;right:10px;font-size:12px;margin:0;color:#888;z-index:1}#mocha-stats .progress{float:right;padding-top:0;height:auto;-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none;background-color:initial}#mocha-stats em{color:#000}#mocha-stats a{text-decoration:none;color:inherit}#mocha-stats a:hover{border-bottom:1px solid #eee}#mocha-stats li{display:inline-block;margin:0 5px;padding-top:11px}#mocha-stats canvas{width:40px;height:40px}#mocha code .comment{color:#ddd}#mocha code .init{color:#2f6fad}#mocha code .string{color:#5890ad}#mocha code .keyword{color:#8a6343}#mocha code .number{color:#2f6fad}@media screen and (max-device-width:480px){#mocha{margin:60px 0}#mocha #stats{position:absolute}}/*# sourceMappingURL=mocha.min.css.map */";
	exports.default = mocha_CSS;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createDrumMachineTests;

	var _chai = __webpack_require__(2);

	// DRUM MACHINE TESTS:
	function createDrumMachineTests() {

	  // I'll remove this whole function when I add the tech stack requirements.
	  // So the remaining FCC_Global is ok for now.
	  var isChrome = !!window.chrome && !!window.chrome.webstore;
	  if (isChrome === false) {
	    FCC_Global.alertOnce('Drum Machine Alert', 'Some Drum Machine tests may fail in browsers other than Chrome');
	  }

	  describe('#Drum Machine tests', function () {

	    // vars:
	    var drumPads = document.querySelectorAll('.drum-pad');
	    var audioElements = document.querySelectorAll('.drum-pad .clip');

	    // functions:
	    function __triggerKeyboardEvent(el, keyCode) {
	      var eventObj = document.createEventObject ? document.createEventObject() : document.createEvent('Events');
	      if (eventObj.initEvent) {
	        eventObj.initEvent('keydown', true, true);
	      }
	      eventObj.keyCode = keyCode;
	      eventObj.which = keyCode;
	      /* eslint no-unused-expressions: ["error", { "allowTernary": true }] */
	      el.dispatchEvent ? el.dispatchEvent(eventObj) : el.fireEvent('onkeydown', eventObj);
	    }

	    describe('#Tests', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. I should be able to see an outer container with a\n      corresponding id="drum-machine" that contains all other elements', function () {
	        _chai.assert.isNotNull(document.getElementById('drum-machine'));
	        (0, _chai.assert)(document.querySelectorAll('#drum-machine div, #drum-machine .drum-pad, #drum-machine ' + '#display, #drum-machine .clip').length, 'The #drum-machine element must contain other elements ');
	      });

	      reqNum++;
	      it(reqNum + '. Within #drum-machine I can see an element with\n      corresponding id="display".', function () {
	        _chai.assert.isNotNull(document.getElementById('display'));
	      });

	      reqNum++;
	      it(reqNum + '. Within #drum-machine I can see 9 clickable "drum pad"\n      elements, each with a class name of "drum-pad", a unique id that describes\n      the audio clip the drum pad will be set up to trigger, and an inner text\n      that corresponds to one of the following keys on the keyboard: Q, W, E, A,\n      S, D, Z, X, C. The drum pads MUST be in this order.', function () {
	        // using .isAtLeast() and .includeMembers() in this challenge so that
	        // users have the freedom to add more than 9 drum pads
	        var drumPadInnerText = [];
	        drumPads.forEach(function (pad) {
	          drumPadInnerText.push(pad.innerText.replace(/\s/g, ''));
	          _chai.assert.strictEqual(pad.hasAttribute('id'), true, 'Each .drum-pad element must have an id attribute ');
	        });
	        _chai.assert.isAtLeast(drumPads.length, 9, 'There should be at least 9 elements with the class "drum-pad" ');
	        // drumPadInnerText is the superset, the array of letters is the subset.
	        _chai.assert.includeMembers(drumPadInnerText, ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'], 'Each .drum-pad\'s inner text should be one of the following ' + 'letters (all letters must be represented): "Q", "W", "E", "A", ' + '"S", "D", "Z", "X", "C" ');
	      });

	      reqNum++;
	      it(reqNum + '. Within each .drum-pad, there should be an HTML5 <audio>\n      element which has a src attribute pointing to an audio clip, a class name\n      of "clip", and an id corresponding to the inner text of its parent\n      .drum-pad (e.g. id="Q", id="W", id="E" etc.).', function () {
	        _chai.assert.isAtLeast(audioElements.length, 9, 'Each .drum-pad should have a child element with the class of "clip" ');
	        audioElements.forEach(function (el) {
	          _chai.assert.strictEqual(el.nodeName, 'AUDIO', 'Each .clip element should be an HTML5 <audio> element ');
	          _chai.assert.strictEqual(el.hasAttribute('src'), true, 'Each <audio> element should have a "src" attribute ');
	          _chai.assert.strictEqual(el.hasAttribute('id'), true, 'Each <audio> element should have an "id" attribute ');
	          _chai.assert.strictEqual(el.id, el.parentElement.innerText.replace(/\s/g, ''), 'Each <audio> element should have an id equal to its parent ' + '.drum-pad\'s inner-text ');
	        });
	      });

	      reqNum++;
	      it(reqNum + '. When I click on a .drum-pad element, the audio clip\n      contained in its child <audio> element should be triggered.', function () {
	        _chai.assert.isAtLeast(audioElements.length, 9, 'Audio elements do not exist ');
	        audioElements.forEach(function (el) {
	          document.getElementById(el.parentElement.id).click();
	          _chai.assert.isNotOk(document.getElementById(el.id).paused, 'The <audio> element with id="' + el.id + '" does not play when the ' + el.id + ' .drum-pad is clicked ');
	        });
	      });

	      reqNum++;
	      it(reqNum + '. When I press the trigger key associated with each\n      .drum-pad, the audio clip contained in its child <audio> element should be\n      triggered (e.g. pressing the Q key should trigger the drum pad which\n      contains the string "Q", pressing the W key should trigger the drum pad\n      which contains the string "W", etc.).', function () {
	        this.timeout(900);
	        var keyCodes = [81, 87, 69, 65, 83, 68, 90, 88, 67];
	        _chai.assert.isAtLeast(audioElements.length, 9, 'Audio elements do not exist ');
	        return new Promise(function (resolve) {
	          setTimeout(function () {
	            audioElements.forEach(function (el, i) {
	              __triggerKeyboardEvent(document.getElementById(el.parentElement.id), keyCodes[i]);
	              _chai.assert.isNotOk(document.getElementById(el.id).paused, 'No audio plays when the ' + el.id + ' key is pressed ');
	            });
	            resolve();
	          }, 800);
	        });
	      });

	      reqNum++;
	      it(reqNum + '. When a .drum-pad is triggered, a string describing the\n      associated audio clip is displayed as the inner text of the #display\n      element (each string must be unique).', function () {
	        this.timeout(900);
	        var displayText = [];
	        return new Promise(function (resolve, reject) {
	          setTimeout(function () {
	            drumPads.forEach(function (pad) {
	              document.getElementById(pad.id).click();
	              displayText.push(document.getElementById('display').innerText);
	            });
	            displayText = displayText.filter(function (str, i) {
	              return displayText[0] === displayText[i];
	            });
	            if (displayText.length === 1) {
	              resolve();
	            } else {
	              reject(new Error('Each time a drum pad is triggered, a unique string should ' + 'be displayed in the element with the id "display"'));
	            }
	          }, 800);
	        });
	      });
	    });
	    // END #Tests

	    // END #DrumMachineTests
	  });

	  // END createDrumMachineTests()
	}

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createMarkdownPreviewerTests;

	var _chai = __webpack_require__(2);

	var _sharedTestStrings = __webpack_require__(46);

	function createMarkdownPreviewerTests() {

	  describe('Markdown Previewer tests', function () {

	    // Save the values of the editor and preview.
	    var editor = document.getElementById('editor');
	    var preview = document.getElementById('preview');
	    var markdownOnLoad = void 0,
	        previewOnLoad = void 0;
	    if (editor) {
	      markdownOnLoad = editor.value;
	    }
	    if (preview) {
	      previewOnLoad = preview.innerHTML;
	    }

	    // A change in the editor value won't be detected unless the correct event
	    // is dispatched.
	    function triggerChange(str) {
	      // REACT
	      var eventReact = new Event('input', { bubbles: true });
	      var eventJS = void 0;

	      editor.value = str;
	      editor.dispatchEvent(eventReact);

	      // If the React dispatch worked, we can already return.
	      if (preview.innerHTML === str) {
	        return;
	      }

	      // jQUERY OR JAVASCRIPT
	      // must be keyup to live preview
	      eventJS = new Event('keyup', { bubbles: true });
	      editor.dispatchEvent(eventJS);
	    }

	    describe('#Technology Stack', function () {
	      it(_sharedTestStrings.frontEndLibrariesStack, function () {
	        return true;
	      });
	    });

	    describe('#Tests', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. I can see a <textarea> element with corresponding\n      id="editor"', function () {
	        _chai.assert.isNotNull(editor, '#editor is not defined ');
	        _chai.assert.strictEqual(editor.nodeName, 'TEXTAREA', '#editor should be a <textarea> element ');
	      });

	      reqNum++;
	      it(reqNum + '. I can see an element with corresponding id="preview"', function () {
	        _chai.assert.isNotNull(preview, '#preview is not defined ');
	      });

	      reqNum++;
	      it(reqNum + '. When I enter text into the #editor element, the #preview\n      element is updated as I type to display the content of the textarea', function () {
	        triggerChange('a');
	        _chai.assert.strictEqual(preview.innerText.slice(0, 1), 'a', '#preview is not being updated as I type into #editor (should ' + 'update on every keyup) ');
	      });

	      reqNum++;
	      it(reqNum + '. When I enter GitHub flavored markdown into the #editor\n      element, the text is rendered as HTML in the #preview element as I type\n      (Hint: You don\'t need to parse Markdown yourself - you can import the\n      Marked library for this: https://cdnjs.com/libraries/marked)', function () {
	        var error = 'The markdown in #editor is not being interpreted ' + 'correctly and/or rendered into #preview ';
	        triggerChange('');
	        _chai.assert.strictEqual(preview.innerHTML, '', '#preview\'s only children should be those rendered by marked.js ');
	        triggerChange('testing');
	        _chai.assert.strictEqual(preview.innerHTML, '<p>testing</p>\n', error);
	        triggerChange(editor.value + ' and...');
	        _chai.assert.strictEqual(preview.innerHTML, '<p>testing and...</p>\n', error);
	        triggerChange('# h1 \n## h2');
	        _chai.assert.strictEqual(preview.innerHTML, '<h1 id="h1">h1</h1>\n<h2 id="h2">h2</h2>\n', error);
	        triggerChange('**bold**');
	        _chai.assert.strictEqual(preview.innerHTML, '<p><strong>bold</strong></p>\n', error);
	      });

	      reqNum++;
	      it(reqNum + '. When my markdown previewer first loads, the default text in\n      the #editor field should contain valid markdown that represents at least\n      one of each of the following elements: a header (H1 size), a sub header\n      (H2 size), a link, inline code, a code block, a list item, a blockquote,\n      an image, and bolded text', function () {
	        var markdown = void 0;

	        _chai.assert.notStrictEqual(markdownOnLoad, 'undefined', '#editor value is undefined ');
	        _chai.assert.notStrictEqual(markdownOnLoad, '', '#editor does not contain any text ');

	        triggerChange(markdownOnLoad);
	        markdown = editor.value;

	        // h1
	        _chai.assert.notStrictEqual(markdown.search(/#\s.+/), -1, 'write some markdown representing an <h1> ');

	        // h2
	        _chai.assert.notStrictEqual(markdown.search(/##\s.+/), -1, 'write some markdown representing an <h2> ');

	        // link
	        _chai.assert.notStrictEqual(markdown.search(/\[.+\]\(.+\..+\)/), -1, 'write some markdown representing an <a> ');

	        // inline code
	        _chai.assert.notStrictEqual(markdown.search(/`.+`/), -1, 'write some markdown representing inline <code> ');

	        // codeblock
	        _chai.assert.notStrictEqual(markdown.search(/```[^]+```/), -1, 'write some markdown representing a codeblock, i.e. <pre><code>...' + '</code></pre> ');

	        // ol or ul list item
	        _chai.assert.notStrictEqual(markdown.search(/(?:-|\d\.)\s[^|\s-*].+/), -1, 'write some markdown representing an <li> item ');

	        // blockquote
	        _chai.assert.notStrictEqual(markdown.search(/>\s.+/), -1, 'write some markdown representing a <blockquote> ');

	        // image
	        _chai.assert.notStrictEqual(markdown.search(/!\[.*\]\(.+\..+\)/), -1, 'write some markdown representing an <image> ');

	        // bold text
	        _chai.assert.notStrictEqual(markdown.search(/(\*\*|__).+\1/), -1, 'write some markdown representing <strong> text ');
	      });

	      reqNum++;
	      it(reqNum + '. When my markdown previewer first loads, the default\n      markdown in the #editor field should be rendered as HTML in the #preview\n      element', function () {
	        var markdown = editor.value;
	        var h1Text = void 0,
	            h1Match = void 0,
	            h2Text = void 0,
	            h2Match = void 0;

	        triggerChange(markdownOnLoad);
	        _chai.assert.notStrictEqual(preview.innerHTML, '', '#preview should have inner HTML ');
	        _chai.assert.strictEqual(preview.innerHTML, previewOnLoad, '#editor\'s  markdown does not render correctly on window load ');
	        // this could be significantly shortened into one test, however
	        // feedback would not be specific
	        _chai.assert.isAtLeast(document.querySelectorAll('#preview h1').length, 1, '#preview does not contain at least one <h1> ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#preview h2').length, 1, '#preview does not contain at least one <h2> ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#preview a').length, 1, '#preview does not contain at least one <a> ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#preview code').length, 1, '#preview does not contain at least one <code> ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#preview pre').length, 1, '#preview does not contain at least one <pre> ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#preview li').length, 1, '#preview does not contain at least one <li> ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#preview blockquote').length, 1, '#preview does not contain at least one <blockquote> ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#preview img').length, 1, '#preview does not contain at least one <img> ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#preview strong').length, 1, '#preview does not contain at least one <strong> ');

	        // then check a couple of elements to make sure the present elements
	        // are actually the ones represented by the markdown:

	        // find matching H1 element
	        h1Text = /#\s.*/.exec(markdown)[0].slice(2);
	        h1Match = [];
	        document.querySelectorAll('#preview h1').forEach(function (h1) {
	          if (h1.innerText === h1Text) {
	            h1Match.push(h1);
	          }
	        });
	        _chai.assert.isAtLeast(h1Match.length, 1, '#preview does not contain the H1 element represented by the ' + 'markdown in the #editor field with the inner text ' + h1Text + ' ');

	        // find matching H2 element
	        h2Text = /##\s.*/.exec(markdown)[0].slice(3);
	        h2Match = [];
	        document.querySelectorAll('#preview h2').forEach(function (h2) {
	          if (h2.innerText === h2Text) {
	            h2Match.push(h2);
	          }
	        });
	        _chai.assert.isAtLeast(h2Match.length, 1, '#preview does not contain the H2 element represented by the ' + 'markdown in the #editor field with the inner text ' + h2Text + ' ');
	      });

	      reqNum++;
	      it(reqNum + '. OPTIONAL BONUS (you do not need to make this test pass):\n      When I click a link rendered by my markdown previewer, the link is opened\n      up in a new tab (HINT: read the Marked.js docs for this one!)', function () {
	        var links = document.querySelectorAll('#preview a');
	        links.forEach(function (a) {
	          if (a.hasAttribute('target')) {
	            _chai.assert.strictEqual(a.target, '_blank');
	          }
	        });
	      });

	      reqNum++;
	      it(reqNum + '. OPTIONAL BONUS (you do not need to make this test pass):\n      My markdown previewer interprets carriage returns and renders them as <br>\n      (line break) elements', function () {
	        var brCount = void 0;

	        // This markup should produce two <br> elements.
	        triggerChange('First line.\n           Second line, same paragraph.\n           Third line, same paragraph.');

	        // Count number of <br> elements in the preview area.
	        brCount = (preview.innerHTML.match(/<br>/g) || []).length;

	        // Restore the original markdown before the assertion. This is to not
	        // surprise the Camper who all of a sudden sees something
	        // unexpected in their editor and preview areas.
	        triggerChange(markdownOnLoad);

	        _chai.assert.strictEqual(brCount, 2, 'See the marked.js options for this and other cool features ');
	      });

	      // END #Tests
	    });

	    // END Mardown Previewer tests
	  });

	  // END createMarkdownPreviewerTests()
	}

/***/ }),
/* 46 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var responsiveWebDesignStack = exports.responsiveWebDesignStack = '1. You can use HTML, JavaScript, ' + 'and CSS to complete this project. Plain CSS is recommended because that ' + 'is what the lessons have covered so far and you should get some practice ' + 'with plain CSS. You can use Bootstrap or SASS if you choose. Additional ' + 'technologies (just for example jQuery, React, Angular, or Vue) are not ' + 'recommended for this project, and using them is at your own risk. ' + 'Other projects will give you a chance to work with different technology ' + 'stacks like React. We will accept and try to fix all issue reports that ' + 'use the suggested technology stack for this project. Happy coding!';

	var frontEndLibrariesStack = exports.frontEndLibrariesStack = '1. You can use any mix of HTML, ' + 'JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete ' + 'this project. You should use a frontend framework (like React for ' + 'example) because this section is about learning frontend frameworks. ' + 'Additional technoligies not listed above are not recommended and using ' + 'them is at your own risk. We are looking at supporting other frontend ' + 'frameworks like Angular and Vue, but they are not currently supported. ' + 'We will accept and try to fix all issue reports that use the suggested ' + 'technology stack for this project. Happy coding!';

/***/ }),
/* 47 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createCalculatorTests;
	function createCalculatorTests() {

	  var _1 = 'one';
	  var _2 = 'two';
	  var _3 = 'three';
	  var _4 = 'four';
	  var _5 = 'five';
	  var _6 = 'six';
	  var _7 = 'seven';
	  var _8 = 'eight';
	  var _9 = 'nine';
	  var _0 = 'zero';
	  var _x = 'multiply';
	  var _plus = 'add';
	  var _min = 'subtract';
	  var _div = 'divide';
	  var _AC = 'clear';
	  var _eq = 'equals';
	  var _dec = 'decimal';

	  function getElements(elementIds) {
	    return elementIds.map(function (elementId) {
	      return document.getElementById(elementId);
	    });
	  }

	  function clickButtonsById(buttonIds) {
	    var keys = getElements(buttonIds);
	    keys.forEach(function (key) {
	      return key.click();
	    });
	  }

	  function clearDisplay() {
	    if (document.getElementById('clear')) clickButtonsById([_AC]);
	  }

	  describe('Calculator tests', function () {
	    beforeEach(function () {
	      clearDisplay();
	    });

	    after(function () {
	      clearDisplay();
	    });

	    describe('#Tests', function () {
	      it('1. My calculator should contain a clickable element containing an =\n      with a corresponding id="equals"', function () {
	        FCC_Global.assert.isNotNull(document.getElementById(_eq));
	      });

	      it('2. My calculator should contain 10 clickable elements containing one\n      number each from 0-9, with the following corresponding IDs: id="zero",\n      id="one", id="two", id="three", id="four", id="five", id="six",\n      id="seven", id="eight", and id="nine"', function () {
	        FCC_Global.assert.isNotNull(document.getElementById(_0), 'id="zero" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_1), 'id="one" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_2), 'id="two" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_3), 'id="three" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_4), 'id="four" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_5), 'id="five" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_6), 'id="six" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_7), 'id="seven" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_8), 'id="eight" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_9), 'id="nine" is not yet defined ');
	      });

	      it('3. My calculator should contain 4 clickable elements each containing\n      one of the 4 primary mathematical operators with the following\n      corresponding IDs: id="add", id="subtract", id="multiply",\n      id="divide"', function () {
	        FCC_Global.assert.isNotNull(document.getElementById(_plus), 'id="add" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_min), 'id="subtract" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_x), 'id="multiply" is not yet defined ');
	        FCC_Global.assert.isNotNull(document.getElementById(_div), 'id="divide" is not yet defined ');
	      });

	      it('4. My calculator should contain a clickable element containing a .\n      with a corresponding id="decimal"', function () {
	        FCC_Global.assert.isNotNull(document.getElementById(_dec), 'id="decimal" is not yet defined ');
	      });

	      it('5. My calculator should contain a clickable element with an\n      id="clear"', function () {
	        FCC_Global.assert.isNotNull(document.getElementById(_AC), 'id="clear" is not yet defined ');
	      });

	      it('6. My calculator should contain an element to display values with a\n      corresponding id="display"', function () {
	        FCC_Global.assert.isNotNull(document.getElementById('display'), 'id="display" is not yet defined ');
	      });

	      it('7. At any time, pressing the clear button clears the input and output\n      values, and returns the calculator to its initialized state; 0 should be\n      shown in the element with the id of "display"', function () {
	        clickButtonsById([_5, _x, _1, _plus, _5, _plus, _9, _2, _eq, _AC]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '0', 'Element with with id="display" should show 0 ');
	      });

	      it('8. As I input numbers, I should be able to see my input in the\n      element with the id of "display"', function () {
	        clickButtonsById([_1, _2, _3]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '123', 'Numbers do not display correctly within id="display" ');
	      });

	      it('9. In any order, I should be able to add, subtract, multiply and\n      divide a chain of numbers of any length, and when I hit =, the correct\n      result should be shown in the element with the id of "display"', function () {
	        clickButtonsById([_3, _plus, _5, _x, _6, _min, _2, _div, _4, _eq]);
	        FCC_Global.assert(document.getElementById('display').innerHTML === '32.5' || document.getElementById('display').innerHTML === '11.5', 'The expression 3 + 5 * 6 - 2 / 4 should produce 32.5 or 11.5 as an\n          answer, depending on the logic your calculator uses\n          (formula vs. immediate execution) ');
	        clearDisplay();
	        clickButtonsById([_5, _min, _9, _plus, _5, _eq]);
	        FCC_Global.assert(document.getElementById('display').innerHTML === '1', 'The expression 5 - 9 + 5 should produce a result of 1 ');
	      });

	      it('10. When inputting numbers, my calculator should not allow a number\n      to begin with multiple zeros.', function () {
	        clickButtonsById([_0, _0, _0]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '0', 'An input of 0 0 0 should display 0 ');
	      });

	      it('11. When the decimal element is clicked, a . should append to the\n      currently displayed value; two .s in one number should not be accepted', function () {
	        clickButtonsById([_5, _dec, _dec, _0]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '5.0', 'An input of 5 . . 0 should display 5.0 ');
	        clearDisplay();
	        clickButtonsById([_5, _dec, _5, _dec, _5]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '5.55', 'An input of 5 . 5 . 5 should display 5.55 ');
	      });

	      it('12. I should be able to perform any operation (+, -, *, /) on numbers\n      containing decimal points', function () {
	        clickButtonsById([_1, _0, _dec, _5, _min, _5, _dec, _5, _eq]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '5', 'The expression 10.5 - 5.5 should produce an output of 5 ');
	        clearDisplay();
	        clickButtonsById([_5, _x, _5, _dec, _5, _eq]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '27.5', 'The expression 5 * 5.5 should produce an output of 27.5 ');
	        clearDisplay();
	        clickButtonsById([_1, _0, _dec, _5, _plus, _5, _dec, _5, _eq]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '16', 'The expression 10.5 + 5.5 should produce an output of 16 ');
	        clearDisplay();
	        clickButtonsById([_1, _0, _div, _2, _dec, _5, _eq]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '4', 'The expression 10 / 2.5 should produce an output of 4 ');
	      });

	      it('13. If 2 or more operators are entered consecutively, the operation\n      performed should be the last operator entered', function () {
	        clickButtonsById([_5, _x, _min, _plus, _5, _eq]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '10', 'The sequence 5 * - + 5 = should produce an output of 10 ');
	        clearDisplay();
	        clickButtonsById([_5, _plus, _plus, _5, _eq]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '10', 'The sequence 5 + + 5 = should produce an output of 10 ');
	      });

	      it('14. Pressing an operator immediately following = should start a new\n      calculation that operates on the result of the previous evaluation', function () {
	        clickButtonsById([_5, _min, _2, _eq, _div, _2, _eq]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '1.5', 'The sequence 5 - 2 = / 2 = should produce an output of 1.5 ');
	        clearDisplay();
	        clickButtonsById([_5, _plus, _5, _eq, _plus, _3, _eq]);
	        FCC_Global.assert.strictEqual(document.getElementById('display').innerHTML, '13', 'The sequence 5 + 3 = + 3 = should produce an output of 13 ');
	      });

	      it('15. My calculator should have several decimal places of precision when\n      it comes to rounding (note that there is no exact standard, but you should\n      be able to handle calculations like 2 / 7 with reasonable precision to at\n      least 4 decimal places)', function () {
	        clickButtonsById([_2, _div, _7, _eq]);
	        FCC_Global.assert.isOk(/0?\.2857\d*/.test(document.getElementById('display').innerHTML), 'The expression 2 / 7 should produce an output number with at least 4\n          decimal places of precision ');
	      });
	    }); // END #Tests
	  }); // END Calculator Tests
	} // END createCalculatorTests()

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createPomodoroClockTests;

	var _chai = __webpack_require__(2);

	function createPomodoroClockTests() {

	  var breakMin = 'break-decrement';
	  var breakPlus = 'break-increment';
	  var seshMin = 'session-decrement';
	  var seshPlus = 'session-increment';
	  var reset = 'reset';
	  var startStop = 'start_stop';
	  var orignalTimerLabel = document.getElementById('timer-label') && document.getElementById('timer-label').innerText;

	  function getElements(elementIds) {
	    return elementIds.map(function (elementId) {
	      return document.getElementById(elementId);
	    });
	  }

	  function clickButtonsById(buttonIds) {
	    var keys = getElements(buttonIds);
	    keys.forEach(function (key) {
	      return key.click();
	    });
	  }

	  function resetTimer() {
	    clickButtonsById([reset]);
	  }

	  function getMinutes(str) {
	    var matches = /^(\d{1,4})\s?([\.:,\/]\s?\d{2}.*)?$/g.exec(str);
	    return matches[1];
	  }

	  function getSeconds(str) {
	    var matches = /^\d{1,4}\s?:\s?(\d{2})/g.exec(str);
	    return matches[1];
	  }
	  // TODO: Check all instances of observer.disconnect() to make sure it's used
	  // correctly.
	  function observeElement(elementId, callback) {
	    // select the target node
	    var target = document.getElementById(elementId);

	    // create an observer instance
	    var observer = new MutationObserver(function (mutations) {
	      mutations.forEach(function () {
	        callback();
	      });
	    });

	    // configuration of the observer:
	    var config = {
	      childList: true,
	      characterData: true,
	      subtree: true
	    };

	    // pass in the target node, as well as the observer options
	    observer.observe(target, config);

	    return observer;
	  }

	  // We "Hack" the global setTimeout and setInterval functions so time elapses 
	  // faster (delay is forced to 30ms)
	  // Note: we should consider putting these hacks in the beforeEach function 
	  // so every timed test can be done in less time
	  // The problem is that we still don't know if it's acceptable to use this 
	  // hack, because it implies forcing the campers to use setTimeout and 
	  // setInterval functions to measure time in their pomodoro.
	  var savedSetTimeout = window.setTimeout;
	  var savedSetInterval = window.setInterval;

	  function hackGlobalTimerFunctions() {
	    window.setTimeout = function (fun) {
	      return savedSetTimeout(fun, 30);
	    };
	    window.setInterval = function (fun) {
	      return savedSetInterval(fun, 30);
	    };
	  }

	  function restoreGlobalTimerFunctions() {
	    window.setTimeout = savedSetTimeout;
	    window.setInterval = savedSetInterval;
	  }

	  // Test suite
	  describe('#Pomodoro Clock tests', function () {
	    before(function () {
	      clickButtonsById([startStop]);
	    });

	    beforeEach(function () {
	      resetTimer();
	      // We "Hack" the global setTimeout and setInterval functions so time 
	      // elapses faster (delay is forced to 30ms)
	      hackGlobalTimerFunctions();
	    });

	    afterEach(function () {
	      restoreGlobalTimerFunctions();
	    });

	    after(function () {
	      resetTimer();
	      restoreGlobalTimerFunctions();
	    });

	    describe('#Tests', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. I can see an element with id="break-label" that contains a \n      string (e.g. \u201CBreak Length).', function () {
	        var breakTitle = document.getElementById('break-label');
	        _chai.assert.isAbove(breakTitle.innerText.length, 0, 'Element does not contain a string');
	      });

	      reqNum++;
	      it(reqNum + '. I can see an element with id="session-label" that contains \n      a string (e.g. "Session Length\u201D).', function () {
	        var sessionTitle = document.getElementById('session-label');
	        _chai.assert.isAbove(sessionTitle.innerText.length, 0, 'Element does not contain a string');
	      });

	      reqNum++;
	      it(reqNum + '. I can see two clickable elements with corresponding IDs: \n      id="break-decrement" and id="session-decrement".', function () {
	        _chai.assert.isNotNull(document.getElementById('break-decrement'));
	        _chai.assert.isNotNull(document.getElementById('session-decrement'));
	      });

	      reqNum++;
	      it(reqNum + '. I can see two clickable elements with corresponding IDs: \n      id="break-increment" and id="session-increment".', function () {
	        _chai.assert.isNotNull(document.getElementById('break-increment'));
	        _chai.assert.isNotNull(document.getElementById('session-increment'));
	      });

	      reqNum++;
	      it(reqNum + '. I can see an element, with corresponding id="break-length",\n      which by default (on load) displays a value of 5.', function () {
	        var breakLength = document.getElementById('break-length');
	        _chai.assert.strictEqual(breakLength.innerHTML, '5', 'A value of 5 is not displayed by default');
	      });

	      reqNum++;
	      it(reqNum + '. I can see an element, with corresponding \n      id="session-length", which by default displays a value of 25.', function () {
	        var sessionLength = document.getElementById('session-length');
	        _chai.assert.strictEqual(sessionLength.innerHTML, '25', 'A value of 25 is not displayed by default');
	      });

	      reqNum++;
	      it(reqNum + '. I can see an element, with corresponding id="timer-label",\n      that contains a string indicating a session is initialized \n      (e.g. "Session").', function () {
	        var timerLabel = document.getElementById('timer-label');
	        _chai.assert.isAbove(timerLabel.innerText.length, 0, 'Element does not contain a string');
	      });

	      reqNum++;
	      it(reqNum + '. I can see an element with corresponding id="time-left". \n      NOTE: Paused or running, the value in this field should always be \n      displayed in mm:ss format (i.e. 25:00).', function () {
	        _chai.assert.isNotNull(document.getElementById('time-left'));
	      });

	      reqNum++;
	      it(reqNum + '. I can see a clickable element with corresponding \n      id="start_stop".', function () {
	        _chai.assert.isNotNull(document.getElementById('start_stop'));
	      });

	      reqNum++;
	      it(reqNum + '. I can see a clickable element with corresponding \n      id="reset".', function () {
	        _chai.assert.isNotNull(document.getElementById('reset'));
	      });

	      reqNum++;
	      it(reqNum + '. When I click the element with the id of "reset", any \n      running timer should be stopped, the value within id="break-length" should\n      return to 5, the value within id="session-length" should return to 25, and\n      the element with id="time-left" should reset to it\'s default state.', function () {
	        this.timeout(5000);
	        // decrement session and break length
	        clickButtonsById(Array(60).fill(seshMin));
	        clickButtonsById(Array(60).fill(breakMin));
	        // start the pomodoro
	        clickButtonsById([startStop]);
	        return new Promise(function (resolve, reject) {
	          var timeLeft = document.getElementById('time-left');
	          var observer = observeElement('time-left', function () {
	            if (timeLeft.innerHTML === '00:00') {
	              // once timer has reached zero wait 1.5 seconds then reset and 
	              // see if every default value is reset
	              setTimeout(function () {
	                resetTimer();
	                var timerLabelAfterReset = document.getElementById('timer-label').innerText;
	                var secondsAfterReset = getSeconds(document.getElementById('time-left').innerHTML);

	                // see if timer label changed back
	                if (orignalTimerLabel !== timerLabelAfterReset) {
	                  reject(new Error('Default timer label was not properly reset'));
	                }

	                // wait another 1.5 seconds to be sure value has not changed 
	                // (pomodoro is stopped)
	                setTimeout(function () {
	                  var breakLenAfterResetCorrect = document.getElementById('break-length').innerHTML === '5';
	                  var sessionLenAfterResetCorrect = document.getElementById('session-length').innerHTML === '25';
	                  if (!breakLenAfterResetCorrect || !sessionLenAfterResetCorrect) {
	                    reject(new Error('Default values for break length and session' + 'length were not properly reset'));
	                    return;
	                  }
	                  var secondsAfterAWhile = getSeconds(document.getElementById('time-left').innerHTML);
	                  if (secondsAfterReset === secondsAfterAWhile) {
	                    resolve();
	                  } else {
	                    reject(new Error('Pomodoro has paused but time continued elapsing'));
	                  }
	                }, 1500);
	              }, 1500);
	              observer.disconnect();
	            }
	          });
	        });
	      });

	      reqNum++;
	      it(reqNum + '. When I click the element with the id of "break-decrement", \n      the value within id="break-length" decrements by a value of 1, and I can \n      see the updated value.', function () {
	        clickButtonsById([breakMin, breakMin, breakMin, breakMin]);
	        _chai.assert.strictEqual(document.getElementById('break-length').innerHTML, '1');
	        resetTimer();
	        clickButtonsById([breakMin]);
	        _chai.assert.strictEqual(document.getElementById('break-length').innerHTML, '4');
	      });

	      reqNum++;
	      it(reqNum + '. When I click the element with the id of "break-increment", \n      the value within id="break-length" increments by a value of 1, and I can \n      see the updated value.', function () {
	        clickButtonsById(Array(4).fill(breakPlus));
	        _chai.assert.strictEqual(document.getElementById('break-length').innerHTML, '9');
	        resetTimer();
	        clickButtonsById([breakPlus]);
	        _chai.assert.strictEqual(document.getElementById('break-length').innerHTML, '6');
	      });

	      reqNum++;
	      it(reqNum + '. When I click the element with the id of \n      "session-decrement", the value within id="session-length" decrements by a \n      value of 1, and I can see the updated value.', function () {
	        clickButtonsById(Array(4).fill(seshMin));
	        _chai.assert.strictEqual(document.getElementById('session-length').innerHTML, '21');
	        resetTimer();
	        clickButtonsById([seshMin]);
	        _chai.assert.strictEqual(document.getElementById('session-length').innerHTML, '24');
	      });

	      reqNum++;
	      it(reqNum + '. When I click the element with the id of \n      "session-increment", the value within id="session-length" increments by a \n      value of 1, and I can see the updated value.', function () {
	        clickButtonsById(Array(4).fill(seshPlus));
	        _chai.assert.strictEqual(document.getElementById('session-length').innerHTML, '29');
	        resetTimer();
	        clickButtonsById([seshPlus]);
	        _chai.assert.strictEqual(document.getElementById('session-length').innerHTML, '26');
	      });

	      reqNum++;
	      it(reqNum + '. I should not be able to set a session or break length to \n      <= 0.', function () {
	        clickButtonsById(Array(10).fill(breakMin));
	        _chai.assert.strictEqual(document.getElementById('break-length').innerHTML, '1', 'Value in element with id of "break-length" is less than 1.');
	        resetTimer();
	        clickButtonsById(Array(30).fill(seshMin));
	        _chai.assert.strictEqual(document.getElementById('session-length').innerHTML, '1', 'Value in element with id of "session-length" is less than 1.');
	      });

	      reqNum++;
	      it(reqNum + '. I should not be able to set a session or break length to \n      > 60.', function () {
	        clickButtonsById(Array(60).fill(breakPlus));
	        _chai.assert.strictEqual(document.getElementById('break-length').innerHTML, '60', 'Value in element with id of "break-length" is greater than 60.');
	        resetTimer();
	        clickButtonsById(Array(40).fill(seshPlus));
	        _chai.assert.strictEqual(document.getElementById('session-length').innerHTML, '60', 'Value in element with id of "session-length" is greater than 60.');
	      });

	      reqNum++;
	      it(reqNum + '. When I first click the element with id="start_stop", the \n      timer should begin running from the value currently displayed in \n      id="session-length", even if the value has been incremented or \n      decremented from the original value of 25.', function () {
	        clickButtonsById([startStop]);
	        _chai.assert.strictEqual(getMinutes(document.getElementById('time-left').innerHTML), document.getElementById('session-length').innerHTML);
	      });

	      reqNum++;
	      it(reqNum + '. If the timer is running, the element with the id of \n      "time-left" should display the remaining time in mm:ss format \n      (decrementing by a value of 1 and updating the display every 1000ms).', function () {
	        this.timeout(2500);
	        // start the pomodoro
	        clickButtonsById([startStop]);
	        var secondsBefore = getSeconds(document.getElementById('time-left').innerHTML);
	        return new Promise(function (resolve, reject) {
	          // wait 1.5 seconds then see if displayed time has changed 
	          // (decremented)
	          setTimeout(function () {
	            var secondsAfter = getSeconds(document.getElementById('time-left').innerHTML);
	            if (secondsAfter > secondsBefore) {
	              resolve();
	            } else {
	              reject(new Error('Pomodoro has started but time displayed is not changing'));
	            }
	          }, 1500);
	        });
	      });

	      reqNum++;
	      it(reqNum + '. If the timer is running and I click the element with \n      id="start_stop", the countdown should pause.', function () {
	        this.timeout(4000);
	        // start the pomodoro
	        clickButtonsById([startStop]);
	        var secondsBefore = getSeconds(document.getElementById('time-left').innerHTML);
	        return new Promise(function (resolve, reject) {
	          // wait 1.5 seconds then see if displayed time has changed
	          setTimeout(function () {
	            var secondsAfter = getSeconds(document.getElementById('time-left').innerHTML);
	            if (secondsAfter === secondsBefore) {
	              reject(new Error('Pomodoro has started but time displayed is not changing'));
	              return;
	            }
	            // Pause the pomodoro
	            clickButtonsById([startStop]);
	            // wait another 1.5 seconds to be sure value has not changed
	            setTimeout(function () {
	              var secondsAfterPause = getSeconds(document.getElementById('time-left').innerHTML);
	              if (secondsAfter === secondsAfterPause) {
	                resolve();
	              } else {
	                reject(new Error('Pomodoro has paused but time continued elapsing'));
	              }
	            }, 1500);
	          }, 1500);
	        });
	      });

	      reqNum++;
	      it(reqNum + '. If the timer is paused and I click the element with \n      id="start_stop", the countdown should resume running from the point at \n      which it was paused.', function () {
	        this.timeout(5000);
	        // start the pomodoro
	        clickButtonsById([startStop]);
	        var secondsBefore = getSeconds(document.getElementById('time-left').innerHTML);
	        return new Promise(function (resolve, reject) {
	          // wait 1.5 seconds then see if displayed time has changed
	          setTimeout(function () {
	            var secondsAfter = getSeconds(document.getElementById('time-left').innerHTML);
	            if (secondsAfter === secondsBefore) {
	              reject(new Error('Pomodoro has started but time displayed is not changing'));
	              return;
	            }
	            // Pause the pomodoro
	            clickButtonsById([startStop]);
	            // wait another 1.5 seconds to be sure value has not changed
	            setTimeout(function () {
	              var secondsAfterPause = getSeconds(document.getElementById('time-left').innerHTML);
	              if (secondsAfter !== secondsAfterPause) {
	                reject(new Error('Pomodoro has paused but time continued elapsing'));
	                return;
	              }
	              // Resume the pomodoro
	              clickButtonsById([startStop]);
	              // wait another 1.5 seconds to be sure time is decrementing again
	              setTimeout(function () {
	                var secondsAfterResume = getSeconds(document.getElementById('time-left').innerHTML);
	                if (secondsAfterPause > secondsAfterResume) {
	                  resolve();
	                } else {
	                  reject(new Error('Pomodoro has resumed but displayed time is not changing'));
	                }
	              }, 1500);
	            }, 1500);
	          }, 1500);
	        });
	      });

	      reqNum++;
	      it(reqNum + '. When a session countdown reaches zero (NOTE: timer MUST \n      reach 00:00), and a new countdown begins, the element with the id of \n      "timer-label" should display a string indicating a break has begun.', function () {
	        this.timeout(5000);
	        // we decrement session time to the minimum (1 minute)
	        clickButtonsById(Array(60).fill(seshMin));
	        // start the pomodoro
	        clickButtonsById([startStop]);
	        return new Promise(function (resolve, reject) {
	          var timeLeft = document.getElementById('time-left');
	          var breakLength = document.getElementById('break-length');
	          // Save label to test that it has changed below
	          var tLabelA = document.getElementById('timer-label').innerHTML;
	          var shouldBeInBreak = false;
	          var observer = observeElement('time-left', function () {
	            if (timeLeft.innerHTML === '00:00') {
	              shouldBeInBreak = true;
	            } else if (parseInt(timeLeft.innerHTML.slice(0, 2), 10) > 5) {
	              reject(new Error('Test timed out because Break time didn\'t start with the ' + 'correct value: ' + (parseInt(getMinutes(timeLeft.innerHTML), 10) + 1) + ' instead of ' + breakLength.innerHTML));
	              observer.disconnect();
	            } else if (shouldBeInBreak) {
	              var tLabelB = document.getElementById('timer-label').innerHTML;
	              if (tLabelB !== tLabelA) {
	                resolve();
	              } else {
	                reject(new Error('Timer has reached zero but didn\'t switch to Break time'));
	              }
	              observer.disconnect();
	            }
	          });
	        });
	      });

	      reqNum++;
	      it(reqNum + '. When a session countdown reaches zero (NOTE: timer MUST \n      reach 00:00), a new break countdown should begin, counting down from the \n      value currently displayed in the id="break-length" element.', function () {
	        this.timeout(5000);
	        // we decrement session time to the minimum (1 minute)
	        clickButtonsById(Array(60).fill(seshMin));
	        // start the pomodoro
	        clickButtonsById([startStop]);
	        return new Promise(function (resolve, reject) {
	          var timeLeft = document.getElementById('time-left');
	          var shouldBeInBreak = false;
	          // Since not requiring specific labels, save the 'session' label to a 
	          // variable, then test within observer function that label has changed
	          // to know when in break
	          var sessionLabel = document.getElementById('timer-label').innerHTML;
	          var observer = observeElement('time-left', function () {
	            var currentTimer = document.getElementById('timer-label');
	            var breakLength = document.getElementById('break-length');
	            if (timeLeft.innerHTML === '00:00') {
	              shouldBeInBreak = true;
	            } else if (parseInt(timeLeft.innerHTML.slice(0, 2), 10) > 5) {
	              reject(new Error('Timer has switched to Break time, but it didn\'t start ' + 'with the correct value: ' + (parseInt(getMinutes(timeLeft.innerHTML), 10) + 1) + ' instead of ' + breakLength.innerHTML));
	              observer.disconnect();
	            } else if (shouldBeInBreak) {
	              if (currentTimer.innerHTML !== sessionLabel) {
	                var getTimeLeftHTML = +getMinutes(timeLeft.innerHTML);
	                if (getTimeLeftHTML === +breakLength.innerHTML) {
	                  resolve();
	                } else {
	                  reject(new Error('Timer has switched to Break time, but it didn\'t ' + 'start with the correct value: ' + getMinutes(timeLeft.innerHTML) + ' instead of ' + breakLength.innerHTML));
	                  observer.disconnect();
	                }
	              } else {
	                reject(new Error('Timer has reached zero but didn\'t switch to Break time'));
	              }
	              observer.disconnect();
	            }
	          });
	        });
	      });

	      reqNum++;
	      it(reqNum + '. When a break countdown reaches zero (NOTE: timer MUST reach\n      00:00), and a new countdown begins, the element with the id of \n      "timer-label" should display a string indicating a session has begun.', function () {
	        this.timeout(5000);
	        // decrement session length and break length to the minimum (1 minute)
	        clickButtonsById(Array(60).fill(seshMin));
	        clickButtonsById(Array(60).fill(breakMin));
	        // start the pomodoro
	        clickButtonsById([startStop]);
	        return new Promise(function (resolve, reject) {
	          var timeLeft = document.getElementById('time-left');
	          var shouldBeInBreak = false;
	          var shouldBeInSessionAgain = false;
	          var breakLabel = void 0;
	          var observer = observeElement('time-left', function () {
	            if (timeLeft.innerHTML === '00:00') {
	              if (!shouldBeInBreak && !shouldBeInSessionAgain) {
	                shouldBeInBreak = true;
	              } else {
	                shouldBeInSessionAgain = true;
	                shouldBeInBreak = false;
	                // when in break, save 'break' label to var, then test below 
	                // that label has changed
	                breakLabel = document.getElementById('timer-label').innerHTML;
	              }
	            } else if (shouldBeInSessionAgain) {
	              var timerLabel = document.getElementById('timer-label').innerHTML;
	              if (timerLabel !== breakLabel) {
	                resolve();
	              } else {
	                reject(new Error('Timer has reached zero but didn\'t switch back to ' + 'Session time'));
	              }
	              observer.disconnect();
	            }
	          });
	        });
	      });

	      reqNum++;
	      it(reqNum + '. When a break countdown reaches zero (NOTE: timer MUST \n      reach 00:00), a new session countdown should begin, counting down from \n      the value currently displayed in the id="session-length" element.', function () {
	        this.timeout(5000);
	        // decrement session length and break length to the minimum (1 minute)
	        clickButtonsById(Array(60).fill(seshMin));
	        clickButtonsById(Array(60).fill(breakMin));
	        // start the pomodoro
	        clickButtonsById([startStop]);
	        return new Promise(function (resolve, reject) {
	          var timeLeft = document.getElementById('time-left');
	          var shouldBeInBreak = false;
	          var shouldBeInSessionAgain = false;
	          var breakLabel = void 0;
	          var observer = observeElement('time-left', function () {
	            if (timeLeft.innerHTML === '00:00') {
	              if (!shouldBeInBreak && !shouldBeInSessionAgain) {
	                shouldBeInBreak = true;
	              } else {
	                shouldBeInSessionAgain = true;
	                shouldBeInBreak = false;
	                // when in break, save 'break' label to var, then test below 
	                // that label has changed
	                breakLabel = document.getElementById('timer-label').innerHTML;
	              }
	            } else if (shouldBeInSessionAgain) {
	              var currentTimer = document.getElementById('timer-label');
	              var sessionLength = document.getElementById('session-length');
	              if (currentTimer.innerHTML !== breakLabel) {
	                var getTimeLeftHTML = +getMinutes(timeLeft.innerHTML);
	                if (getTimeLeftHTML === +sessionLength.innerHTML) {
	                  resolve();
	                } else {
	                  reject(new Error('Timer has switched back to Session time, but it ' + 'didn\'t start with the correct value: ' + getMinutes(timeLeft.innerHTML) + ' instead of ' + sessionLength.innerHTML));
	                }
	              } else {
	                reject(new Error('Timer has reached zero but didn\'t switch back to ' + 'Session time'));
	              }
	              observer.disconnect();
	            }
	          });
	        });
	      });

	      reqNum++;
	      it(reqNum + '. When a countdown reaches zero (NOTE: timer MUST reach \n      00:00), a sound indicating that time is up should play. This should \n      utilize an HTML5 <audio> tag and have a corresponding id="beep".', function () {
	        this.timeout(5000);
	        // decrement session time to the minimum (1 minute)
	        clickButtonsById(Array(60).fill(seshMin));
	        // start the pomodoro
	        clickButtonsById([startStop]);
	        return new Promise(function (resolve, reject) {
	          var timeLeft = document.getElementById('time-left');
	          var breakLength = document.getElementById('break-length');
	          var observer = observeElement('time-left', function () {
	            if (parseInt(timeLeft.innerHTML.slice(0, 2), 10) > 5) {
	              reject(new Error('Test timed out because Break time didn\'t start with ' + 'the correct value: ' + (parseInt(getMinutes(timeLeft.innerHTML), 10) + 1) + ' instead of ' + breakLength.innerHTML));
	            } else if (timeLeft.innerHTML === '00:00') {
	              // note: sound has to be longer than 200 ms, or the test will 
	              // fail if the sound stops before the test actually happens
	              savedSetTimeout(function () {
	                var audioElem = document.getElementById('beep');

	                if (audioElem && !audioElem.paused) {
	                  resolve();
	                } else {
	                  reject(new Error('Timer has reached zero but, either there is not ' + 'audio tag with ID "beep" on the page, or it\'s not ' + 'playing while it should.'));
	                }
	              }, 200);
	              observer.disconnect();
	            }
	          });
	        });
	      });

	      reqNum++;
	      it(reqNum + '. The audio element with id="beep" must be 1 second or \n      longer.', function () {
	        _chai.assert.isAbove(document.getElementById('beep').duration, 1, 'Audio element with id="beep" is not at least 1 second long.');
	      });

	      reqNum++;
	      it(reqNum + '. The audio element with id of "beep" must stop playing and \n      be rewound to the beginning when the element with the id of "reset" is\n      clicked.', function () {
	        var audioElem = document.getElementById('beep');

	        audioElem.play();
	        resetTimer();

	        _chai.assert.isTrue(audioElem.paused, 'Audio element was not stopped when reset was clicked.');

	        _chai.assert.equal(0, audioElem.currentTime, 'Audio element was not rewound when reset was clicked. HINT: use ' + 'the currentTime property of the audio element to rewind.');
	      });
	      // END #Tests
	    });
	    // END #PomodoroClockTests
	  });
	  // END createPomodoroClockTests()
	}

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createTributePageTests;

	var _chai = __webpack_require__(2);

	var _jquery = __webpack_require__(1);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _sharedTestStrings = __webpack_require__(46);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createTributePageTests() {

	  function getPropValue(el, prop) {
	    return window.getComputedStyle(el).getPropertyValue(prop);
	  }

	  describe('#Tribute Page tests', function () {

	    describe('#Technology Stack', function () {
	      it(_sharedTestStrings.responsiveWebDesignStack, function () {
	        _chai.assert.ok(true);
	      });
	    });

	    describe('#Content', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. My tribute page should have an element with corresponding\n      id="main", which contains all other elements.', function () {
	        _chai.assert.isNotNull(document.getElementById('main'));
	        (0, _chai.assert)(document.querySelectorAll('#main div, #main a, #main h1, #main img').length, 'element with id="main" must contain other elements');
	      });

	      reqNum++;
	      it(reqNum + '. I should see an element with corresponding id="title",\n      which contains a string (i.e. text) that describes the subject of the\n      tribute page (e.g. "Dr. Norman Borlaug").', function () {
	        _chai.assert.isNotNull(document.getElementById('title'));
	        var titleText = document.getElementById('title').innerText;
	        _chai.assert.isAbove(titleText.length, 0, 'Element does not contain any text');
	      });

	      reqNum++;
	      it(reqNum + '. I should see a <div> element with corresponding\n      id="img-div".', function () {
	        _chai.assert.isNotNull(document.getElementById('img-div'));
	      });

	      reqNum++;
	      it(reqNum + '. Within the "img-div" element, I should see an <img> element\n      with a corresponding id="image".', function () {
	        _chai.assert.isNotNull(document.getElementById('image'));
	        _chai.assert.strictEqual((0, _jquery2.default)('#img-div').find('#image').length, 1, 'Element is not a child of id="img-div" ');
	      });

	      reqNum++;
	      it(reqNum + '. Within the "img-div" element, I should see an element with\n      a corresponding id="img-caption" that contains textual content describing\n      the image shown in "img-div".', function () {
	        _chai.assert.isNotNull(document.getElementById('img-caption'));
	        _chai.assert.strictEqual((0, _jquery2.default)('#img-div').find('#img-caption').length, 1, 'Element is not a child of id="img-div" ');
	        var captionContents = document.getElementById('img-caption').innerText;
	        _chai.assert.isAbove(captionContents.length, 0, 'Element does not have any content ');
	      });

	      reqNum++;
	      it(reqNum + '. I should see an element with a corresponding\n      id="tribute-info", which contains textual content describing the subject\n      of the tribute page.', function () {
	        _chai.assert.isNotNull(document.getElementById('tribute-info'));
	        var infoContents = document.getElementById('tribute-info').innerText;
	        _chai.assert.isAbove(infoContents.length, 0, 'Element does not have any content ');
	      });

	      reqNum++;
	      it(reqNum + '. I should see an <a> element with a corresponding\n      id="tribute-link", which links to an outside site that contains additional\n      information about the subject of the tribute page. HINT: You must give\n      your element an attribute of target and set it to "_blank" in order for\n      your link to open in a new tab (i.e. target="_blank").', function () {
	        var tributeLink = document.getElementById('tribute-link');
	        _chai.assert.isNotNull(tributeLink);
	        (0, _chai.assert)(tributeLink.hasAttribute('href'), '<a> element with id="tribute-link" must contain an href attribute ');
	        (0, _chai.assert)(tributeLink.hasAttribute('target'), '<a> element with id="tribute-link" must contain a target' + ' attribute ');
	        _chai.assert.strictEqual(tributeLink.getAttribute('target'), '_blank', 'The target attribute should be set to "_blank", in order for the' + 'link to open in a new tab ');
	      });

	      // END #Content
	    });

	    describe('#Layout', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. The <img> element should responsively resize, relative to\n      the width of its parent element, without exceeding its original size.', function () {
	        var img = document.getElementById('image');
	        var maxWidthValue = getPropValue(img, 'max-width');
	        var displayValue = getPropValue(img, 'display');
	        var heightValue = void 0;
	        _chai.assert.notStrictEqual(maxWidthValue, 'none', 'Try using the "max-width" style property ');
	        _chai.assert.equal(displayValue, 'block', 'Use the "display" style property with a value of "block" for' + 'responsive images.');
	        // In order to determine if the height style is "auto", we
	        // need to use a little trick. If we use getComputedStyle and the
	        // element has an actual size we will get the actual pixels. So we
	        // temporarily set the "display" style to "none", which will tell
	        // us if the height is "auto".
	        img.style.display = 'none';
	        heightValue = getPropValue(img, 'height');
	        _chai.assert.equal(heightValue, 'auto', 'Use the "height" style property with a value of "auto" for' + 'responsive images.');
	        img.style.display = displayValue;
	      });

	      reqNum++;
	      it(reqNum + '. The <img> element should be centered within its parent\n      element.', function () {
	        var img = document.getElementById('image'),
	            imgParent = document.getElementById('image').parentElement,
	            imgLeft = img.getBoundingClientRect().left,
	            imgRight = img.getBoundingClientRect().right,
	            parentLeft = imgParent.getBoundingClientRect().left,
	            parentRight = imgParent.getBoundingClientRect().right;
	        _chai.assert.approximately(imgLeft - parentLeft, parentRight - imgRight, 11, 'Image is not centered');
	      });

	      // END #Layout
	    });

	    // END #TributePageTests
	  });

	  // END createTributePageTests()
	}

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createPortfolioTests;

	var _sharedTestStrings = __webpack_require__(46);

	var _styleSheetUtils = __webpack_require__(51);

	var _chai = __webpack_require__(2);

	function createPortfolioTests() {

	  describe('#Portfolio tests', function () {

	    describe('#Technology Stack', function () {
	      it(_sharedTestStrings.responsiveWebDesignStack, function () {
	        return true;
	      });
	    });

	    describe('#Content', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. My portfolio should have a Welcome section with an id of\n      "welcome-section".', function () {
	        _chai.assert.isNotNull(document.getElementById('welcome-section'));
	      });

	      reqNum++;
	      it(reqNum + '. The welcome section should have an h1 element that contains\n      text.', function () {

	        _chai.assert.isAbove(document.querySelectorAll('#welcome-section h1').length, 0, 'Welcome section should contain an h1 element ');

	        _chai.assert.isAbove(document.querySelectorAll('#welcome-section h1')[0].innerText.length, 0, 'h1 element in welcome section should contain your name or camper ' + 'name ');
	      });

	      reqNum++;
	      it(reqNum + '. My portfolio should have a projects section with an id of\n      "projects".', function () {
	        _chai.assert.isNotNull(document.getElementById('projects'));
	      });

	      reqNum++;
	      it(reqNum + '. The projects section should contain at least one element\n      with a class of "project-tile" to hold a project.', function () {
	        _chai.assert.isAbove(document.querySelectorAll('#projects .project-tile').length, 0);
	      });

	      reqNum++;
	      it(reqNum + '. The projects section should contain at least one link to a\n      project.', function () {
	        _chai.assert.isAbove(document.querySelectorAll('#projects a').length, 0);
	      });

	      reqNum++;
	      it(reqNum + '. My portfolio should have a navbar with an id of "navbar".', function () {
	        var navbar = document.getElementById('navbar');

	        _chai.assert.isNotNull(navbar);
	      });

	      reqNum++;
	      it(reqNum + '. The navbar should contain at least one link that I can\n      click on to navigate to different sections of the page.', function () {
	        var links = Array.from(document.querySelectorAll('#navbar a'));
	        var didScroll = false;

	        _chai.assert.isAbove(document.querySelectorAll('#navbar a').length, 0, 'Navbar should contain a link ');

	        window.scroll(0, 0);
	        didScroll = links.some(function (link) {
	          link.click();
	          // Returning a true value ends the loop, so we continue until the
	          // window Y position is other than 0.
	          return window.scrollY !== 0;
	        });

	        // Test passes succesfully if the window scrolled, so we end the test.
	        if (didScroll) {
	          _chai.assert.ok(true);
	          window.scroll(0, 0);
	          return;
	        }

	        // No scroll yet, so move window to bottom and try again.
	        window.scroll(0, document.body.scrollHeight);
	        var bottomPositionY = window.scrollY;

	        didScroll = links.some(function (link) {
	          link.click();
	          var distanceFromBottom = bottomPositionY - window.scrollY;
	          // if distance from bottom is not 0, clicking a link made it move,
	          // so we end the loop.
	          return distanceFromBottom !== 0;
	        });

	        // Test passes succesfully if the window scrolled, so we end the test.
	        if (didScroll) {
	          _chai.assert.ok(true);
	          window.scroll(0, 0);
	          return;
	        }

	        // If we got here, none of the links changed the scroll position.
	        window.scroll(0, 0);
	        _chai.assert.ok(false, 'At least one navbar link should move the page position when clicked ');

	        return;
	      });

	      reqNum++;
	      it(reqNum + '. My portfolio should have a link with an id of\n      "profile-link", which opens my GitHub or FCC profile in a new tab.', function () {
	        var profileLink = document.getElementById('profile-link');

	        _chai.assert.isNotNull(profileLink);

	        _chai.assert.equal(profileLink.nodeName, 'A');

	        _chai.assert.strictEqual(profileLink.hasAttribute('target'), true, '#profile-link should have a target attribute ');

	        _chai.assert.equal(profileLink.target, '_blank', 'Clicking #profile-link should cause a link to open in a new tab ');
	      });

	      // END #Content
	    });

	    describe('#Layout', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. My portfolio should have at least one media query.', function () {

	        // Filter to get only media queries.
	        var queryRules = (0, _styleSheetUtils.allCSSRulesAsArray)(document.styleSheets).filter(function (rule) {
	          return rule.type === CSSRule.MEDIA_RULE;
	        });

	        // Filter out our test suite and Mocha CSS rules. This may be trickier
	        // than looks. The reason we can use allCSSRulesAsArray is because
	        // media rules have a cssRules attribute.
	        var cssMediaRules = (0, _styleSheetUtils.allCSSRulesAsArray)(queryRules).filter(function (rule) {
	          return !(0, _styleSheetUtils.isTestSuiteRule)(rule);
	        });

	        _chai.assert.isAbove(cssMediaRules.length, 0, 'No media queries detected ');
	      });

	      reqNum++;
	      it(reqNum + '. The height of the welcome section should be equal to the\n      height of the viewport.', function () {
	        _chai.assert.equal(document.getElementById('welcome-section').offsetHeight, window.innerHeight, 'The height of #welcome-section is not equal to the height of the ' + 'viewport ');
	      });

	      reqNum++;
	      it(reqNum + '. The navbar should always be at the top of the viewport.', function (done) {
	        var navbar = document.getElementById('navbar');
	        _chai.assert.approximately(navbar.getBoundingClientRect().top, 0, 15, 'Navbar\'s parent should be body and it should be at the top of ' + 'the viewport ');

	        window.scroll(0, 500);
	        // This timeout is to allow page layout to happen after the
	        // window.scroll. Without it the getBoundingClientRect can sometimes
	        // report the wrong value while the page is still laying out, when using
	        // CSS position:sticky. This is apparently a bug with Chrome.
	        // See https://bugs.chromium.org/p/chromium/issues/detail?id=672457
	        setTimeout(function () {
	          _chai.assert.approximately(navbar.getBoundingClientRect().top, 0, 15, 'Navbar should be at the top of the viewport even after scrolling ');
	          window.scroll(0, 0);
	          done();
	        }, 1);
	      });

	      // END #Layout
	    });

	    // END #PortfolioTests
	  });

	  // END createPortfolioTests()
	}

/***/ }),
/* 51 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	/*
	 * Given a list of styleSheet-like objects, it returns an array of CSSStyleRule
	 * objects.
	 *
	 * You can use the returned array to easily filter the CSS rules used on a
	 * page. For example, the following could be used to find all CSS media rules,
	 * and is much shorter than the corresponding code using nested "for loops":
	 *
	 * ```
	 * const queryRules = allCSSRulesAsArray(document.styleSheets)
	     .filter(rule => rule.type === CSSRule.MEDIA_RULE);
	 * ```
	 *
	 * The styleSheets parameter accepts any array or array-like list, as long as
	 * each object has a cssRules attribute. A StyleSheetList would fit this
	 * requirement.
	 * See https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList
	 *
	 * For example, `document.styleSheets` returns a StyleSheetList.
	 *
	 * The cssRules attribute is another array-like list.
	 * See https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList
	 *
	 */
	var allCSSRulesAsArray = exports.allCSSRulesAsArray = function allCSSRulesAsArray(styleSheets) {
	  // Convert to an array, and then use reduce.
	  return [].slice.call(styleSheets).reduce(function (prev, styleSheet) {

	    // The styleSheet might not contain any rules.
	    if (styleSheet.cssRules) {
	      // Convert the list of rules into an array.
	      var rulesAsArray = [].slice.call(styleSheet.cssRules);
	      // Use the spread operator to push each individual element onto the
	      // return array.
	      prev.push.apply(prev, _toConsumableArray(rulesAsArray));
	    }

	    return prev;
	  }, []);
	};

	/*
	 * Given a CSS Style Rule it will determine if the rule is one of our internal
	 * test suite UI rules.
	 *
	 * There is a small chance a student could use a selector that includes
	 * the text we are using below to determine if it's our CSS. In the off chance
	 * that happens, it's best to just ask them to rename it differently.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule
	 *
	 */
	var isTestSuiteRule = exports.isTestSuiteRule = function isTestSuiteRule(cssStyleRule) {
	  if (typeof cssStyleRule.selectorText !== 'undefined' && (cssStyleRule.selectorText.includes('fcc_test') || cssStyleRule.selectorText.includes('mocha'))) {
	    return true;
	  }

	  return false;
	};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createProductLandingPageTests;

	var _sharedTestStrings = __webpack_require__(46);

	var _styleSheetUtils = __webpack_require__(51);

	var _chai = __webpack_require__(2);

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function createProductLandingPageTests() {
	  describe('#Product Landing Page tests', function () {

	    describe('#Technology Stack', function () {
	      it(_sharedTestStrings.responsiveWebDesignStack, function () {
	        _chai.assert.ok(true);
	      });
	    });

	    describe('#Content', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. My product landing page should have a <header> element with\n      corresponding id="header".', function () {
	        _chai.assert.isNotNull(document.getElementById('header'), '#header is not defined ');
	      });

	      reqNum++;
	      it(reqNum + '. I can see an image within the #header element with a\n      corresponding id="header-img". A company logo would make a good image\n      here. ', function () {
	        var img = document.getElementById('header-img');
	        _chai.assert.isNotNull(img, '#header-img is not defined ');
	        _chai.assert.strictEqual(img.nodeName, 'IMG', '#header-img is not an <img> element ');
	        _chai.assert.strictEqual(document.querySelectorAll('#header #header-img').length, 1, '#header-img is not a child of #header element ');
	        _chai.assert.strictEqual(img.hasAttribute('src'), true, '#header-img must have a src attribute ');
	        _chai.assert.include(img.src, 'http', 'The src attribute\'s value should be a url (http...) ');
	      });

	      reqNum++;
	      it(reqNum + '. Within the <header> element I can see a <nav> element with\n      corresponding id="nav-bar".\'', function () {
	        _chai.assert.isNotNull(document.getElementById('nav-bar'), '#nav-bar is not defined ');
	        _chai.assert.strictEqual(document.getElementById('nav-bar').nodeName, 'NAV', 'The #nav-bar element is not a <nav> element ');
	        _chai.assert.strictEqual(document.querySelectorAll('#header #nav-bar').length, 1, '#nav-bar is not a child of #header ');
	      });

	      reqNum++;
	      it(reqNum + '. I can see at least three clickable elements inside the nav\n      element, each with the class "nav-link".', function () {
	        _chai.assert.isAtLeast(document.querySelectorAll('#nav-bar .nav-link').length, 3, 'There are not at least 3 elements with a class of "nav-link" ' + 'within the #nav-bar element ');
	      });

	      reqNum++;
	      it(reqNum + '. When I click a .nav-link button in the nav element, I am\n      taken to the corresponding section of the landing page.\'', function () {
	        var navLinks = document.querySelectorAll('#nav-bar .nav-link');
	        navLinks.forEach(function (link) {
	          _chai.assert.isNotNull(link);
	          _chai.assert.strictEqual(link.hasAttribute('href'), true, 'Each .nav-link element should have an href attribute ');
	          var linkDestination = link.getAttribute('href').slice(1);
	          _chai.assert.isNotNull(document.getElementById(linkDestination), 'The .nav-link with href="' + link.getAttribute('href') + '" is not linked to a corresponding element on the page ');
	        });
	      });

	      reqNum++;
	      it(reqNum + '. I can watch an embedded product video with id="video".', function () {
	        var video = document.getElementById('video');
	        _chai.assert.isNotNull(video, '#video is not defined ');
	        (0, _chai.assert)(video.nodeName === 'VIDEO' || video.nodeName === 'IFRAME', '#video should be an <iframe> or <video> element ');
	        _chai.assert.strictEqual(video.hasAttribute('src'), true, '#video should have a scr attribute ');
	      });

	      reqNum++;
	      it(reqNum + '. My landing page has a <form> element with a corresponding\n      id="form".\'', function () {
	        _chai.assert.isNotNull(document.getElementById('form'), '#form is not defined ');
	        _chai.assert.strictEqual(document.getElementById('form').nodeName, 'FORM', '#form should be a <form> element ');
	      });

	      reqNum++;
	      it(reqNum + '. Within the form, there is an <input> field with id="email"\n      where I can enter an email address.', function () {
	        _chai.assert.isNotNull(document.getElementById('email'), '#email is not defined ');
	        _chai.assert.strictEqual(document.querySelectorAll('#form #email').length, 1, '#email should be a child of the #form element ');
	        _chai.assert.strictEqual(document.getElementById('email').nodeName, 'INPUT', '#email should be an <input> element ');
	      });

	      reqNum++;
	      it(reqNum + '. The #email input field should have placeholder text to let\n      the user know what the field is for.', function () {
	        var emailElem = document.getElementById('email');
	        _chai.assert.strictEqual(emailElem.hasAttribute('placeholder'), true, 'The #email input field does not have placeholder text ');
	        _chai.assert.isAbove(emailElem.getAttribute('placeholder').length, 0, 'The #email placeholder attribute should have some text ');
	      });

	      reqNum++;
	      it(reqNum + '. The #email input field uses HTML5 validation to confirm\n      that the entered text is an email address.', function () {
	        var emailElem = document.getElementById('email');
	        _chai.assert.strictEqual(emailElem.type, 'email', 'The #email input element should use HTML5 validation ');
	      });

	      reqNum++;
	      it(reqNum + '. Within the form, there is a submit <input> with\n      corresponding id="submit".', function () {
	        var submitButton = document.getElementById('submit');
	        _chai.assert.isNotNull(submitButton, '#submit is not defined ');
	        _chai.assert.strictEqual(document.querySelectorAll('#form #submit').length, 1, '#submit should be a child of the #form element ');
	        _chai.assert.strictEqual(submitButton.nodeName, 'INPUT', '#submit should be an <input> element ');
	        _chai.assert.strictEqual(submitButton.type, 'submit', 'The #submit element input type is incorrect ');
	      });

	      reqNum++;
	      it(reqNum + '. When I click the #submit element, the email is submitted to\n      a static page (use this mock URL:\n      https://www.freecodecamp.com/email-submit) that confirms the email address\n      was entered (and that it posted successfully).', function () {
	        var emailElem = document.getElementById('email');
	        var formElem = document.getElementById('form');
	        _chai.assert.strictEqual(formElem.hasAttribute('action'), true, 'The #form should have an action attribute ');
	        _chai.assert.include(formElem.action, 'http', 'The action attribute\'s value should be a url (http...) ');
	        _chai.assert.strictEqual(emailElem.hasAttribute('name'), true, 'The #email input should have a name attribute ');
	        _chai.assert.strictEqual(emailElem.name, 'email', 'The #email element\'s name attribute should have a value of "email" ');
	      });

	      // END #Content
	    });

	    describe('#Layout', function () {
	      var reqNum = 0;

	      // TODO: Most of this function should be extracted to a utility that
	      // can be reused.
	      reqNum++;
	      it(reqNum + '. The navbar should always be at the top of the viewport.', function () {
	        var header = document.getElementById('header');
	        var headerChildren = header.children;
	        // array of all potential elements serving as a navbar
	        var navbarCandidates = [header].concat(_toConsumableArray(headerChildren));

	        // get the 'top' position value from the element whose value is closest
	        // to 0
	        function getNavbarPosition(candidates) {
	          // by default, set to first candidate's top value
	          var candidatePosition = Math.abs(candidates[0].getBoundingClientRect().top);
	          for (var i = 1; i < candidates.length; i++) {
	            // if another candidate has a top value closer to 0, replace the
	            // old value
	            var currentCandidatePosition = Math.abs(candidates[i].getBoundingClientRect().top);
	            if (currentCandidatePosition < candidatePosition) {
	              candidatePosition = currentCandidatePosition;
	            }
	          }
	          return candidatePosition;
	        }

	        _chai.assert.approximately(getNavbarPosition(navbarCandidates), 0, 15, '#header or one of its children should be at the top of the viewport ');
	        window.scroll(0, 500);
	        _chai.assert.approximately(getNavbarPosition(navbarCandidates), 0, 15, '#header or one of its children should be at the top of the ' + 'viewport even after scrolling ');
	        window.scroll(0, 0);
	      });

	      reqNum++;
	      it(reqNum + '. My product landing page should have at least one media\n      query.', function () {

	        // Filter to get only media queries.
	        var queryRules = (0, _styleSheetUtils.allCSSRulesAsArray)(document.styleSheets).filter(function (rule) {
	          return rule.type === CSSRule.MEDIA_RULE;
	        });

	        // Filter out our test suite and Mocha CSS rules. This may be trickier
	        // than looks. The reason we can use allCSSRulesAsArray is because
	        // media rules have a cssRules attribute.
	        var cssMediaRules = (0, _styleSheetUtils.allCSSRulesAsArray)(queryRules).filter(function (rule) {
	          return !(0, _styleSheetUtils.isTestSuiteRule)(rule);
	        });

	        _chai.assert.isAbove(cssMediaRules.length, 0, 'No media queries detected ');
	      });

	      reqNum++;
	      it(reqNum + '. My product landing page should utilize CSS flexbox at least\n      once.', function () {
	        // Find CSS rules that use flexbox.
	        var flexRules = (0, _styleSheetUtils.allCSSRulesAsArray)(document.styleSheets).filter(function (rule) {
	          // Eliminate any CSS Rules that are part of our test suite UI.
	          if ((0, _styleSheetUtils.isTestSuiteRule)(rule)) {
	            return false;
	          }

	          // Only include flexbox rules.
	          return typeof rule.style !== 'undefined' && typeof rule.style.display !== 'undefined' && (rule.style.display === 'flex' || rule.style.display === 'inline-flex');
	        });

	        _chai.assert.isAbove(flexRules.length, 0, 'We do not detect a display property set to flex or inline-flex ' + 'anywhere in your CSS ');
	      });

	      // END #Layout
	    });

	    // END #ProductLadingPageTests
	  });

	  // END createProductLandingPageTests()
	}

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createSurveyFormTests;

	var _chai = __webpack_require__(2);

	var _sharedTestStrings = __webpack_require__(46);

	function createSurveyFormTests() {

	  describe('Survey Form tests', function () {

	    describe('#Technology Stack', function () {
	      it(_sharedTestStrings.responsiveWebDesignStack, function () {
	        _chai.assert.ok(true);
	      });
	    });

	    describe('#Content', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. I can see a title with id="title" in H1 sized text.', function () {
	        var title = document.getElementById('title');
	        _chai.assert.isNotNull(title, 'There should be an element with id="title" ');
	        _chai.assert.strictEqual(title.tagName, 'H1', '#title should be in H1 sized text ');
	        _chai.assert.isAbove(title.innerText.length, 0, '#title should contain some text ');
	      });

	      reqNum++;
	      it(reqNum + '. I can see a short explanation with id="description" in P\n      sized text.', function () {
	        var description = document.getElementById('description');
	        _chai.assert.isNotNull(description, 'There should be an element with id="description" ');
	        _chai.assert.strictEqual(description.tagName, 'P', '#description should be in P sized text ');
	        _chai.assert.isAbove(description.innerText.length, 0, '#description should contain some text ');
	      });

	      reqNum++;
	      it(reqNum + '. I can see a <form> with id="survey-form".', function () {
	        var form = document.getElementById('survey-form');
	        _chai.assert.isNotNull(form, 'There should be an element with id="survey-form" ');
	        _chai.assert.strictEqual(form.tagName, 'FORM', '#survey-form should be a <form>-element ');
	      });

	      reqNum++;
	      it(reqNum + '. Inside the form element, I am required to enter my name in\n      a field with id="name".', function () {
	        var name = document.getElementById('name');
	        _chai.assert.isNotNull(name, 'There should be an input text field with id="name" ');
	        _chai.assert.strictEqual(name.type, 'text', 'input field with id="name" should be a text field ');
	        _chai.assert.isOk(name.required, 'Name input field should be required ');
	        _chai.assert.isAbove(document.querySelectorAll('#survey-form #name').length, 0, 'The field with id="name" is not inside the form element ');
	      });

	      reqNum++;
	      it(reqNum + '. Inside the form element, I am required to enter an email in\n      a field with id="email".', function () {
	        var email = document.getElementById('email');
	        _chai.assert.isNotNull(email, 'There should be an input text field with id="email" ');
	        _chai.assert.isOk(email.required, 'Email input field should be required ');
	        _chai.assert.isAbove(document.querySelectorAll('#survey-form #email').length, 0, 'The field with id="email" is not inside the form element ');
	      });

	      reqNum++;
	      it(reqNum + '. If I enter an email that is not formatted correctly, I will\n      see an HTML5 validation error.', function () {
	        var email = document.getElementById('email');
	        _chai.assert.strictEqual(email.type, 'email', 'Email field should be HTML5 validated ');
	      });

	      reqNum++;
	      it(reqNum + '. Inside the form, I can enter a number in a field with\n      id="number".', function () {
	        var number = document.getElementById('number');
	        _chai.assert.isNotNull(number, 'There should be an input text field with id="number" ');
	        _chai.assert.isAbove(document.querySelectorAll('#survey-form #number').length, 0, 'The field with id="number" is not inside the form element ');
	      });

	      reqNum++;
	      it(reqNum + '. If I enter non-numbers in the number input, I will see an\n      HTML5 validation error.', function () {
	        var number = document.getElementById('number');
	        _chai.assert.strictEqual(number.type, 'number', 'Number field should be HTML5 validated ');
	      });

	      reqNum++;
	      it(reqNum + '. If I enter numbers outside the range of the number input, I\n      will see an HTML5 validation error.\'', function () {
	        var number = document.getElementById('number');
	        _chai.assert.isNotNaN(parseInt(number.min, 10), 'Minimum number should be defined ');
	        _chai.assert.isNotNaN(parseInt(number.max, 10), 'Maximum number should be defined ');
	      });

	      reqNum++;
	      it(reqNum + '. For the name, email, and number input fields inside the\n      form I can see corresponding labels that describe the purpose of each\n      field with the following ids: id="name-label", id="email-label", and\n      id="number-label".', function () {
	        var nameLabel = document.getElementById('name-label');
	        var emailLabel = document.getElementById('email-label');
	        var numberLabel = document.getElementById('number-label');
	        _chai.assert.isNotNull(nameLabel, '#name-label is not defined ');
	        _chai.assert.strictEqual(nameLabel.nodeName, 'LABEL', '#name-label should be a <label> element ');
	        _chai.assert.isAbove(nameLabel.innerText.length, 0, '#name-label should contain some text ');
	        _chai.assert.isNotNull(emailLabel, '#email-label is not defined ');
	        _chai.assert.strictEqual(emailLabel.nodeName, 'LABEL', '#email-label should be a <label> element ');
	        _chai.assert.isAbove(emailLabel.innerText.length, 0, '#email-label should contain some text ');
	        _chai.assert.isNotNull(numberLabel, '#number-label is not defined ');
	        _chai.assert.strictEqual(numberLabel.nodeName, 'LABEL', '#number-label should be a <label> element ');
	        _chai.assert.isAbove(numberLabel.innerText.length, 0, '#number-label should contain some text ');
	        _chai.assert.isAbove(document.querySelectorAll('#survey-form #name-label').length, 0, 'The label with id="name-label" is not inside the form element ');
	        _chai.assert.isAbove(document.querySelectorAll('#survey-form #email-label').length, 0, 'The label with id="email-label" is not inside the form element ');
	        _chai.assert.isAbove(document.querySelectorAll('#survey-form #number-label').length, 0, 'The label with id="number-label" is not inside the form element ');
	      });

	      reqNum++;
	      it(reqNum + '. For the name, email, and number input fields, I can see\n      placeholder text that gives me a description or instructions for each\n      field.\'', function () {
	        _chai.assert.strictEqual(document.getElementById('name').hasAttribute('placeholder'), true, 'The name input field should have a placeholder attribute ');
	        _chai.assert.isAbove(document.getElementById('name').placeholder.length, 0, 'The name input field\'s placeholder attribute should have ' + 'some text for its value');
	        _chai.assert.strictEqual(document.getElementById('email').hasAttribute('placeholder'), true, 'The email input field should have a placeholder attribute ');
	        _chai.assert.isAbove(document.getElementById('email').placeholder.length, 0, 'The email input field\'s placeholder attribute should have ' + 'some text for its value');
	        _chai.assert.strictEqual(document.getElementById('number').hasAttribute('placeholder'), true, 'The number input field should have a placeholder attribute ');
	        _chai.assert.isAbove(document.getElementById('number').placeholder.length, 0, 'The number input field\'s placeholder attribute should have ' + 'some text for its value ');
	      });

	      reqNum++;
	      it(reqNum + '. Inside the form element, I can select an option from a\n      dropdown that has corresponding id="dropdown".\'', function () {
	        var dropdown = document.getElementById('dropdown');
	        var dropdownTag = dropdown.tagName;
	        var inputSibling = null;
	        var inputName = null;
	        if (dropdownTag === 'DATALIST') {
	          inputSibling = dropdown.previousElementSibling;
	          inputName = inputSibling.getAttribute('list');
	          _chai.assert.strictEqual(inputName, 'dropdown', 'When using the datalist tag, the accompanying input tag must ' + 'contain a name attribute matching the datalist id.');
	        }
	        _chai.assert.isNotNull(dropdown, 'There should be a select field with id="dropdown" ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#dropdown option:not([disabled])').length, 2, 'Select should contain at least 2 selectable options ');
	        _chai.assert.isAbove(document.querySelectorAll('#survey-form #dropdown').length, 0, 'The select field with id="dropdown" is not inside the form element ');
	      });

	      reqNum++;
	      it(reqNum + '. Inside the form element, I can select a field from one or\n      more groups of radio buttons. Each group should be grouped using the name\n      attribute.', function () {
	        var groups = void 0;
	        // [].slice.call converts to array.
	        var radioButtons = [].slice.call(document.querySelectorAll('input[type="radio"]'));

	        _chai.assert.isAtLeast(radioButtons.length, 2, 'There should be at least 2 radio buttons ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#survey-form input[type="radio"]').length, 2, 'There should be at least 2 radio buttons inside the #survey-form ');
	        _chai.assert.strictEqual(radioButtons.length, document.querySelectorAll('input[value][type="radio"]:not([value=""])').length, 'All your radio-buttons must have a value attribute ');

	        _chai.assert.strictEqual(radioButtons.length, document.querySelectorAll('input[name][type="radio"]:not([name=""])').length, 'All your radio-buttons need a name attribute ');

	        // Count the number of radio buttons per group.
	        groups = radioButtons.reduce(function (groups, radioButton) {
	          if (groups.hasOwnProperty(radioButton.name)) {
	            groups[radioButton.name]++;
	          } else {
	            groups[radioButton.name] = 1;
	          }
	          return groups;
	        }, {});

	        // Make sure each group has at least two radio buttons.
	        for (var group in groups) {
	          if (Object.prototype.hasOwnProperty.call(groups, group)) {
	            console.log(groups[group]);
	            _chai.assert.isAtLeast(groups[group], 2, 'Every radio-button group should have at least 2 radio buttons ');
	          }
	        }
	      });

	      reqNum++;
	      it(reqNum + '. Inside the form element, I can select several fields from a\n      series of checkboxes, each of which must have a value attribute.', function () {
	        var checkboxes = document.querySelectorAll('#survey-form input[type="checkbox"]');
	        _chai.assert.isAtLeast(checkboxes.length, 2, 'There should be at least 2 checkboxes inside the form ');
	        _chai.assert.strictEqual(checkboxes.length, document.querySelectorAll('#survey-form input[value][type="checkbox"]:not([value=""]').length, 'All your checkboxes must have a value attribute ');
	      });

	      reqNum++;
	      it(reqNum + '. Inside the form element, I am presented with a <textarea>\n      at the end for additional comments.\'', function () {
	        var textareas = document.getElementsByTagName('textarea');
	        _chai.assert.isAtLeast(textareas.length, 1, 'There should be at least 1 <textarea> ');
	        _chai.assert.isAbove(document.querySelectorAll('#survey-form textarea').length, 0, 'The textarea is not inside the form element ');
	      });

	      reqNum++;
	      it(reqNum + '. Inside the form element, I am presented with a button with\n      id="submit" to submit all my inputs.', function () {
	        var button = document.getElementById('submit');
	        _chai.assert.isNotNull(button, 'There should be a button with id="submit" ');
	        if (button.nodeName === 'INPUT') {
	          _chai.assert.strictEqual(button.hasAttribute('type'), true, 'If you are using an <input> element for your button you need to ' + 'define a type attribute ');
	        }
	        _chai.assert.strictEqual(button.type, 'submit', 'Your button\'s type attribute should have a value of "submit" ');
	        _chai.assert.isAbove(document.querySelectorAll('#survey-form #submit').length, 0, 'The button with id="submit" is not inside the form element ');
	      });

	      // END #Content
	    });

	    // END Survery Form tests
	  });

	  // END createSurveyFormTests()
	}

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createTechnicalDocsPageTests;

	var _chai = __webpack_require__(2);

	var _sharedTestStrings = __webpack_require__(46);

	var _styleSheetUtils = __webpack_require__(51);

	function createTechnicalDocsPageTests() {

	  var classArray = function classArray(className) {
	    return Array.from(document.getElementsByClassName(className));
	  };

	  var sharedHeaderTest = function sharedHeaderTest(classQty) {
	    var firstChildHeaderQty = classArray('main-section').filter(function (el) {
	      return el.firstElementChild.nodeName === 'HEADER';
	    });
	    _chai.assert.strictEqual(firstChildHeaderQty.length, classQty, 'Not all elements with the class \'main-section\' have a <header> ' + 'element as a first element child ');
	  };

	  describe('Technical Documentation Page tests', function () {

	    describe('#Technology Stack', function () {
	      it(_sharedTestStrings.responsiveWebDesignStack, function () {
	        return true;
	      });
	    });

	    describe('#Content', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. I can see a <main> element with a corresponding\n      id="main-doc", which contains the page\'s main content (technical\n      documentation).', function () {
	        _chai.assert.isNotNull(document.getElementById('main-doc'), 'There is no element with an id of \'main-doc\' ');
	        _chai.assert.strictEqual(document.getElementById('main-doc').nodeName, 'MAIN', 'The \'main-doc\' element should be a <main> ');
	      });

	      reqNum++;
	      it(reqNum + '. Within the #main-doc ( <main> ) element, I can see several\n      <section> elements, each with a class of "main-section". There should be\n      a minimum of 5.', function () {
	        var classQty = classArray('main-section').length;
	        var typeQty = classArray('main-section').filter(function (el) {
	          return el.nodeName === 'SECTION';
	        });
	        _chai.assert.isAbove(document.querySelectorAll('#main-doc .main-section').length, 0, 'There are no .main-section elements within #main-doc ');
	        _chai.assert.isAtLeast(document.querySelectorAll('#main-doc .main-section').length, 5, 'There are not at least 5 elements with the class of "main-section" ');
	        _chai.assert.strictEqual(document.querySelectorAll('.main-section').length, document.querySelectorAll('#main-doc .main-section').length, 'All of the page\'s .main-section elements should be within ' + '#main-doc ');
	        _chai.assert.strictEqual(typeQty.length, classQty, 'Not all of the elements with the class of "main-section" are ' + '<section> elements ');
	      });

	      reqNum++;
	      it(reqNum + '. The first element within each .main-section should be a\n      <header> element which contains text that describes the topic of that\n      section.', function () {
	        var classQty = classArray('main-section').length;
	        var mustContainText = classArray('main-section').filter(function (el) {
	          return el.firstElementChild.innerText.length > 0;
	        });
	        _chai.assert.isAbove(classQty, 0, 'No elements with the class "main-section" are defined ');
	        sharedHeaderTest(classQty);
	        _chai.assert.strictEqual(mustContainText.length, classQty, 'Not all first-child <header> elements within "main-section" ' + 'elements contain text ');
	      });

	      reqNum++;
	      it(reqNum + '. Each <section> element with the class of "main-section"\n      should also have an id that corresponds with the text of each <header>\n      contained within it. Any spaces should be replaced with underscores (e.g.\n      The <section> that contains the header "Javascript and Java" should have a\n      corresponding id="Javascript_and_Java").', function () {

	        var mainSections = classArray('main-section');
	        _chai.assert.isAbove(mainSections.length, 0, 'No elements with the class "main-section" are defined ');

	        sharedHeaderTest(mainSections.length);

	        var headerText = mainSections.map(function (el) {
	          _chai.assert.isAbove(el.firstElementChild.innerText.length, 0, 'All headers must contain text ');
	          // remove leading / trailing spaces  in headerText and then replace
	          // all other spaces with underscores.
	          return el.firstElementChild.innerText.trim().replace(/\s/g, '_');
	        });

	        var mainSectionIDs = mainSections.map(function (el) {
	          _chai.assert.strictEqual(el.hasAttribute('id'), true, 'Each \'main-section\' should have an id attribute ');
	          return el.id;
	        });

	        var remainder = headerText.filter(function (str) {
	          return mainSectionIDs.indexOf(str) === -1;
	        });
	        _chai.assert.strictEqual(remainder.length, 0, 'Some "main-section" elements are missing the following ids ' + '(don\'t forget to replace spaces with underscores!) : ' + remainder + ' ');
	      });

	      reqNum++;
	      it(reqNum + '. The .main-section elements should contain at least 10 <p>\n      elements total (not each).', function () {
	        _chai.assert.isAtLeast(document.querySelectorAll('.main-section p').length, 10, 'There are not at least 10 <p> elements throughout all of the ' + 'elements with the class of \'main-section\' ');
	      });

	      reqNum++;
	      it(reqNum + '. The .main-section elements should contain at least 5 <code>\n      elements total (not each).', function () {
	        _chai.assert.isAtLeast(document.querySelectorAll('.main-section code').length, 5, 'There are not at least 5 <code> elements throughout all of the ' + 'elements with the class of \'main-section\' ');
	      });

	      reqNum++;
	      it(reqNum + '. The .main-section elements should contain at least 5 <li>\n      items total (not each).', function () {
	        _chai.assert.isAtLeast(document.querySelectorAll('.main-section li').length, 5, 'There are not at least 5 <li> elements throughout all of the ' + 'elements with the class of \'main-section\' ');
	      });

	      reqNum++;
	      it(reqNum + '. I can see a <nav> element with a corresponding\n      id="navbar".', function () {
	        _chai.assert.isNotNull(document.getElementById('navbar'), 'There is no element with the id of \'navbar\'.');
	        _chai.assert.strictEqual(document.getElementById('navbar').nodeName, 'NAV', 'The element with the id of "navbar" is not a <nav> element ');
	      });

	      reqNum++;
	      it(reqNum + '. The navbar element should contain one <header> element\n      which contains text that describes the topic of the technical\n      documentation.', function () {
	        _chai.assert.strictEqual(document.getElementById('navbar').getElementsByTagName('header').length, 1, 'The navbar element should contain only one <header> element.');
	      });

	      reqNum++;
	      it(reqNum + '. Additionally, the navbar should contain link (<a>) elements\n      with the class of "nav-link". There should be one for every element with\n      the class "main-section".', function () {
	        var mainSectionQty = document.querySelectorAll('#main-doc .main-section').length;
	        var navLinkQty = document.querySelectorAll('#navbar .nav-link').length;
	        var typeQty = classArray('nav-link').filter(function (el) {
	          return el.nodeName === 'A';
	        });
	        _chai.assert.isAbove(navLinkQty, 0, 'The element with the id of "navbar" does not contain any elements ' + 'with the class of "nav-link" ');
	        _chai.assert.strictEqual(navLinkQty, mainSectionQty, 'There should be one .nav-link for every element with the class of ' + '"main-section", and every .nav-link should be within #navbar ');
	        _chai.assert.strictEqual(typeQty.length, navLinkQty, 'Not all of the elements with the class of "nav-link" are <a> ' + 'elements ');
	      });

	      reqNum++;
	      it(reqNum + '. The <header> element in the navbar must come before any\n      link (<a>) elements in the navbar.', function () {
	        var navLinks = document.querySelectorAll('#navbar a.nav-link');
	        var header = document.querySelectorAll('#navbar header').item(0);
	        var allAbove = true;

	        navLinks.forEach(function (navLink) {
	          /* eslint no-bitwise: ["error", { "allow": ["&"] }] */
	          if (!(header.compareDocumentPosition(navLink) & Node.DOCUMENT_POSITION_FOLLOWING)) {
	            allAbove = false;
	          }
	        });

	        _chai.assert.strictEqual(allAbove, true, 'The <header> element contained by the navbar must be come before ' + 'any link (<a>) elements contained by the navbar');
	      });

	      reqNum++;
	      it(reqNum + '. Each element with the class of "nav-link" should contain\n      text that corresponds to the <header> text within each <section> (e.g. if\n      you have a "Hello world" section/header, your navbar should have an\n      element which contains the text "Hello world").', function () {
	        _chai.assert.isAbove(classArray('nav-link').length, 0, 'No elements with the class "nav-link" have been defined ');
	        var headerText = classArray('main-section').map(function (el) {
	          return el.firstElementChild.innerText.trim();
	        });
	        var linkText = classArray('nav-link').map(function (el) {
	          return (/[^\n\t\f\r\v]+/.exec(el.innerText)[0]
	          );
	        });
	        // use indexOf instead of matching index for index, in case for some
	        // reason they have them out of order
	        var remainder = headerText.filter(function (str) {
	          return linkText.indexOf(str) === -1;
	        });
	        _chai.assert.strictEqual(remainder.length, 0, 'Check that these headers have corresponding .nav-link elements ' + 'and be mindful of case! : ' + remainder + ' ');
	      });

	      reqNum++;
	      it(reqNum + '. When I click on a navbar element, the page should navigate\n      to the corresponding section of the "main-doc" element (e.g. If I click on\n      a "nav-link" element that contains the text "Hello world", the page\n      navigates to a <section> element that has that id and contains the\n      corresponding <header>.', function () {
	        var navLinkQty = document.getElementsByClassName('nav-link').length;
	        _chai.assert.isAbove(navLinkQty, 0, 'No elements with the class "nav-link" have been defined ');
	        var hasHref = classArray('nav-link').filter(function (el) {
	          return el.hasAttribute('href');
	        });
	        var hrefValues = classArray('nav-link').map(function (el) {
	          return el.getAttribute('href');
	        });
	        var mainSectionIDs = classArray('main-section').map(function (el) {
	          return el.id;
	        });
	        var missingHrefValues = mainSectionIDs.filter(function (str) {
	          return hrefValues.indexOf('#' + str) === -1;
	        });
	        _chai.assert.strictEqual(hasHref.length, navLinkQty, 'Every .nav-link does not have an href attribute.');
	        _chai.assert.strictEqual(missingHrefValues.length, 0, 'Every .nav-link should have an href value that links it to its ' + 'corresponding .main-section (e.g. href="#Introduction"). Check ' + 'that these .main-section ids have corresponding href values : ' + missingHrefValues + ' ');
	      });

	      // END #Content
	    });

	    describe('#Layout', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. On regular sized devices (laptops, desktops), the element\n      with id="navbar" should be shown on the left side of the screen and should\n      always be visible to the user.', function () {
	        var windowWidth = document.documentElement.clientWidth || window.innerWidth;
	        _chai.assert.isAbove(windowWidth, 850, 'Please run this test in a larger window (before any media queries) ');
	        var navbar = document.getElementById('navbar');
	        _chai.assert.approximately(navbar.getBoundingClientRect().left, 0, 10, 'Left of bounding rectangle is not correct.');
	        _chai.assert.approximately(navbar.getBoundingClientRect().top, 0, 10, 'Top of bounding rectangle is not correct.');
	        window.scroll(0, 1000);
	        _chai.assert.approximately(navbar.getBoundingClientRect().left, 0, 10, 'After scroll: Left of bounding rectangle is not correct.');
	        _chai.assert.approximately(navbar.getBoundingClientRect().top, 0, 10, 'After scroll: Top of bounding rectangle is not correct.');
	        window.scroll(0, 0);
	      });

	      reqNum++;
	      it(reqNum + '. My Technical Documentation page should use at least one\n      media query.', function () {

	        // Filter to get only media queries.
	        var queryRules = (0, _styleSheetUtils.allCSSRulesAsArray)(document.styleSheets).filter(function (rule) {
	          return rule.type === CSSRule.MEDIA_RULE;
	        });

	        // Filter out our test suite and Mocha CSS rules. This may be trickier
	        // than looks. The reason we can use allCSSRulesAsArray is because
	        // media rules have a cssRules attribute.
	        var cssMediaRules = (0, _styleSheetUtils.allCSSRulesAsArray)(queryRules).filter(function (rule) {
	          return !(0, _styleSheetUtils.isTestSuiteRule)(rule);
	        });

	        _chai.assert.isAbove(cssMediaRules.length, 0, 'No media queries detected ');
	      });

	      // END #Layout
	    });

	    // end Technical Docs Page Tests
	  });

	  // end createTechnicalDocsPageTests()
	}

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createBarChartTests;

	var _chai = __webpack_require__(2);

	var _globalD3Tests = __webpack_require__(56);

	var _jquery = __webpack_require__(1);

	var _jquery2 = _interopRequireDefault(_jquery);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createBarChartTests() {

	  describe('#BarChartTests', function () {
	    var reqNum = 0;

	    reqNum++;
	    it(reqNum + '. My chart should have a title with a corresponding\n    id="title"', function () {
	      _chai.assert.isNotNull(document.getElementById('title'), 'Could not find element with id="title" ');
	    });

	    reqNum++;
	    it(reqNum + '. My Chart should have an x-axis with a corresponding\n    id="x-axis"', function () {
	      _chai.assert.isNotNull(document.getElementById('x-axis'), 'Could not find element with id="x-axis" ');
	      _chai.assert.isAbove(document.querySelectorAll('g#x-axis').length, 0, 'x-axis should be a <g> SVG element ');
	    });

	    reqNum++;
	    it(reqNum + '. My Chart should have a y-axis with a corresponding\n    id="y-axis"', function () {
	      _chai.assert.isNotNull(document.getElementById('y-axis'), 'Could not find element with id="y-axis" ');

	      _chai.assert.isAbove(document.querySelectorAll('g#y-axis').length, 0, 'y-axis should be a <g> SVG element ');
	    });

	    reqNum++;
	    it(reqNum + '. Both axes should contain multiple tick labels', function () {
	      _chai.assert.isAbove((0, _jquery2.default)('#x-axis .tick').length, 1, 'There are not enough tick labels on the x-axis ');
	      _chai.assert.isAbove((0, _jquery2.default)('#y-axis .tick').length, 1, 'There are not enough tick labels on the y-axis ');
	    });

	    reqNum++;
	    it(reqNum + '. My Chart should have a bar for each data point with a\n    corresponding class="bar" displaying the data', function () {
	      _chai.assert.isAbove(document.querySelectorAll('rect.bar').length, 0, 'Could not find any elements with class="bar" ');
	      _chai.assert.equal(document.querySelectorAll('rect.bar').length, 275, 'The number of bars is not equal to the number of data points ');
	    });

	    reqNum++;
	    it(reqNum + '. Each bar should have the properties "data-date" and\n    "data-gdp" containing date and GDP values', function () {
	      var bars = document.getElementsByClassName('bar');
	      _chai.assert.isAtLeast(bars.length, 1, 'no elements with the class of "bar" are detected ');
	      for (var i = 0; i < bars.length; i++) {
	        var bar = bars[i];
	        _chai.assert.isNotNull(bar.getAttribute('data-date'), 'Could not find property "data-date" in bar ');
	        _chai.assert.isNotNull(bar.getAttribute('data-gdp'), 'Could not find property "data-gdp" in bar ');
	      }
	    });

	    reqNum++;
	    it(reqNum + '. The "data-date" properties should match the order of the\n    provided data', function (done) {
	      _jquery2.default.getJSON('https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/' + 'master/GDP-data.json', function (res) {
	        try {
	          var bars = document.getElementsByClassName('bar');
	          _chai.assert.isAtLeast(bars.length, 1, 'no elements with the class of "bar" are detected ');
	          for (var i = 0; i < bars.length; i++) {
	            var currentBarDate = bars[i].getAttribute('data-date');
	            _chai.assert.equal(currentBarDate, res.data[i][0], 'Bars should have date data in the same order as the ' + 'provided data ');
	          }
	          done();
	        } catch (e) {
	          done(e);
	        }
	      });
	    });

	    reqNum++;
	    it(reqNum + '. The "data-gdp" properties should match the order of the\n    provided data', function (done) {
	      _jquery2.default.getJSON('https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/' + 'master/GDP-data.json', function (res) {
	        try {
	          var bars = document.getElementsByClassName('bar');
	          _chai.assert.isAtLeast(bars.length, 1, 'no elements with the class of "bar" are detected ');
	          for (var i = 0; i < bars.length; i++) {
	            var currentBarGdp = bars[i].getAttribute('data-gdp');
	            _chai.assert.equal(currentBarGdp, res.data[i][1], 'Bars should have gdp data in the same order as the ' + 'provided data ');
	          }
	          done();
	        } catch (e) {
	          done(e);
	        }
	      });
	    });

	    reqNum++;
	    it(reqNum + '. Each bar\'s height should accurately represent the data\'s\n    corresponding GDP', function () {
	      var bars = document.querySelectorAll('rect.bar');
	      // get the ratio of the first data point to the height of the first bar
	      var firstRatio = bars[0].getAttribute('data-gdp') / bars[0].getAttribute('height');
	      /* iterate through each bar and make sure that its height is consistent
	      with its corresponding data point using the first ratio */
	      /* this test completely validates the bars, but isn\'t very useful to the
	      user, so data-date and data-gdp tests were added for clarity */
	      for (var i = 0; i < bars.length; i++) {
	        var dataValue = bars[i].getAttribute('data-gdp');
	        var barHeight = bars[i].getAttribute('height');
	        var ratio = dataValue / barHeight;
	        _chai.assert.equal(firstRatio.toFixed(3), ratio.toFixed(3), 'The heights of the bars should correspond to the data values ');
	      }
	    });
	  });

	  (0, _globalD3Tests.testToolTip)(document.querySelectorAll('.bar'), 'data-date', 'data-date');
	}

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.testToolTip = testToolTip;

	var _jquery = __webpack_require__(1);

	var _jquery2 = _interopRequireDefault(_jquery);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isToolTipHidden(tooltip) {
	  // jQuery's :hidden selector checks if the element or its parents have a display of none, a type of hidden, or height/width set to 0
	  // if the element is hidden with opacity=0 or visibility=hidden, jQuery's :hidden will return false because it takes up space in the DOM
	  // this test combines jQuery's :hidden with tests for opacity and visbility to cover most use cases (z-index and potentially others are not tested)
	  return (0, _jquery2.default)(tooltip).is(':hidden') || tooltip.style.opacity === '0' || tooltip.style.visibility === 'hidden';
	}

	function getRandomIndex(max) {
	  return Math.floor(Math.random() * max);
	}

	/**
	  JQuery's mouseevents don't work for non IE browsers in these tests.  
	  This is a workaround to handle IE and non IE mouse events
	**/
	function triggerMouseEvent(area, mouseEvent) {
	  var event;
	  if (document.createEvent) {
	    // Internet Explorer
	    event = document.createEvent("MouseEvent");
	    event.initMouseEvent(mouseEvent, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	  } else {
	    // Non IE browser
	    event = new MouseEvent(mouseEvent);
	  }
	  area.dispatchEvent(event);
	}

	/**
	  Mouses over random areas to see if a tooltip appears
	**/
	function testToolTip(areas, toolTipDataName, areaDataName) {

	  describe('#TooltipTests', function () {
	    it('1. I can mouse over an area and see a tooltip with a corresponding id="tooltip" which displays more information about the area ', function () {
	      var firstRequestTimeout = 500;
	      var secondRequestTimeout = 2000;
	      this.timeout(firstRequestTimeout + secondRequestTimeout + 1000);
	      FCC_Global.assert.isNotNull(document.getElementById('tooltip'), 'There should be an element with id="tooltip"');

	      var tooltip = document.getElementById('tooltip');

	      // place mouse on random bar and check if tooltip is visible
	      var randomIndex = getRandomIndex(areas.length);
	      var randomArea = areas[randomIndex];
	      triggerMouseEvent(randomArea, "mouseover");
	      triggerMouseEvent(randomArea, "mousemove");
	      triggerMouseEvent(randomArea, "mouseenter");

	      // promise is used to prevent test from ending prematurely
	      return new Promise(function (resolve, reject) {
	        // timeout is used to accomodate tooltip transitions
	        setTimeout(function (_) {
	          if (isToolTipHidden(tooltip)) {
	            reject(new Error('Tooltip should be visible when mouse is on an area'));
	          }

	          // remove mouse from cell and check if tooltip is hidden again  
	          triggerMouseEvent(randomArea, "mouseout");
	          setTimeout(function (_) {
	            if (!isToolTipHidden(tooltip)) {
	              reject(new Error('Tooltip should be hidden when mouse is not on an area'));
	            } else {
	              resolve();
	            }
	          }, secondRequestTimeout);
	        }, firstRequestTimeout);
	      });
	    });
	    it('2. My tooltip should have a "' + toolTipDataName + '" property that corresponds to the "' + areaDataName + '" of the active area.', function () {
	      var tooltip = document.getElementById('tooltip');
	      FCC_Global.assert.isNotNull(tooltip.getAttribute(toolTipDataName), 'Could not find property "' + toolTipDataName + '" in tooltip ');
	      var randomIndex = getRandomIndex(areas.length);

	      var randomArea = areas[randomIndex];

	      triggerMouseEvent(randomArea, "mouseover");
	      triggerMouseEvent(randomArea, "mousemove");
	      triggerMouseEvent(randomArea, "mouseenter");

	      FCC_Global.assert.equal(tooltip.getAttribute(toolTipDataName), randomArea.getAttribute(areaDataName), 'Tooltip\'s \"' + toolTipDataName + '\" property should be equal to the active area\'s \"' + areaDataName + '\" property');

	      //clear out tooltip
	      triggerMouseEvent(randomArea, "mouseout");
	    });
	  });
	};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createScatterPlotTests;

	var _alignmentD3Tests = __webpack_require__(58);

	var _chai = __webpack_require__(2);

	var _globalD3Tests = __webpack_require__(56);

	function createScatterPlotTests() {

	  describe('#ScatterPlotTests', function () {
	    var MIN_YEAR = 1990;
	    var MAX_YEAR = 2020;
	    var MIN_MINUTES = 36;
	    var MAX_MINUTES = 40;

	    describe('#Content', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. I can see a title element that has a corresponding\n      id="title".', function () {
	        _chai.assert.isNotNull(document.getElementById('title'), 'Could not find element with id="title" ');
	      });

	      reqNum++;
	      it(reqNum + '. I can see an x-axis that has a corresponding id="x-axis".', function () {
	        _chai.assert.isNotNull(document.getElementById('x-axis'), 'There should be an element with id="x-axis" ');
	        _chai.assert.isAbove(document.querySelectorAll('g#x-axis').length, 0, 'x-axis should be a <g> SVG element ');
	      });

	      reqNum++;
	      it(reqNum + '. I can see a y-axis that has a corresponding id="y-axis".', function () {
	        _chai.assert.isNotNull(document.getElementById('y-axis'), 'There should be an element with id="y-axis" ');
	        _chai.assert.isAbove(document.querySelectorAll('g#y-axis').length, 0, 'y-axis should be a <g> SVG element');
	      });

	      reqNum++;
	      it(reqNum + '. I can see dots, that each have a class of "dot", which\n      represent the data being plotted.', function () {
	        _chai.assert.isAbove(document.querySelectorAll('circle.dot').length, 0, 'Could not find any <circle> SVG elements with class="dot" ');
	      });

	      reqNum++;
	      it(reqNum + '. Each dot should have the properties "data-xvalue" and\n      "data-yvalue" containing their corresponding x and y values.', function () {
	        var dots = document.getElementsByClassName('dot');
	        _chai.assert.isAbove(dots.length, 0, 'there are no elements with the class of "dot" ');
	        for (var i = 0; i < dots.length; i++) {
	          var dot = dots[i];
	          _chai.assert.isNotNull(dot.getAttribute('data-xvalue'), 'Could not find property "data-xvalue" in dot ');
	          _chai.assert.isNotNull(dot.getAttribute('data-yvalue'), 'Could not find property "data-yvalue" in dot ');
	        }
	      });

	      reqNum++;
	      it(reqNum + '. The data-xvalue and data-yvalue of each dot should be\n      within the range of the actual data and in the correct data format. For\n      data-xvalue, integers (full years) or Date objects are acceptable for test\n      evaluation. For data-yvalue (minutes), use Date objects. ', function () {
	        var MIN_X_VALUE = MIN_YEAR;
	        var MAX_X_VALUE = MAX_YEAR;

	        var dotsCollection = document.getElementsByClassName('dot');
	        // convert to array
	        var dots = [].slice.call(dotsCollection);
	        _chai.assert.isAbove(dots.length, 0, 'there are no elements with the class of "dot" ');

	        dots.forEach(function (dot) {
	          var xYear = new Date(dot.getAttribute('data-xvalue'));
	          _chai.assert.isAtLeast(xYear.getFullYear(), MIN_X_VALUE, 'The data-xvalue of a dot is below the range of the actual data ');
	          _chai.assert.isAtMost(xYear.getFullYear(), MAX_X_VALUE, 'The data-xvalue of a dot is above the range of the actual data ');

	          // compare just the minutes for a good approximation
	          var yDate = new Date(dot.getAttribute('data-yvalue'));
	          _chai.assert.isAtLeast(yDate.getMinutes(), MIN_MINUTES, 'The minutes data-yvalue of a dot is below the range of the actual\n            minutes data ');
	          _chai.assert.isAtMost(yDate.getMinutes(), MAX_MINUTES, 'The minutes data-yvalue of a dot is above the range of the actual\n            minutes data ');
	        });
	      });

	      reqNum++;
	      it(reqNum + '. The data-xvalue and its corresponding dot should align\n      with the corresponding point/value on the x-axis.', function () {
	        var dotsCollection = document.getElementsByClassName('dot');
	        _chai.assert.isAbove(dotsCollection.length, 0, 'there are no elements with the class of "dot" ');

	        var dataAttr = 'data-xvalue';
	        var coordAttr = 'cx';
	        // construct an object with information about axis and data-type
	        var xAxisInfo = (0, _alignmentD3Tests.getXAxisInfo)(document.querySelector('#x-axis'), dataAttr, coordAttr);
	        _chai.assert.isTrue((0, _alignmentD3Tests.isAxisAlignedWithDataPoints)(xAxisInfo, dotsCollection, _alignmentD3Tests.getXMisalignmentCount, _alignmentD3Tests.getFeatureValueInteger, _alignmentD3Tests.getTickValueInteger), 'x values don\'t line up with x locations ');
	      });

	      reqNum++;
	      it(reqNum + '. The data-yvalue and its corresponding dot should align\n      with the corresponding point/value on the y-axis.', function () {
	        var dotsCollection = document.getElementsByClassName('dot');
	        _chai.assert.isAbove(dotsCollection.length, 0, 'there are no elements with the class of "dot" ');

	        var dataAttr = 'data-yvalue';
	        var coordAttr = 'cy';
	        // construct an object with information about axis and data-type
	        var yAxisInfo = (0, _alignmentD3Tests.getYAxisInfo)(document.querySelector('#y-axis'), dataAttr, coordAttr);

	        _chai.assert.isTrue((0, _alignmentD3Tests.isAxisAlignedWithDataPoints)(yAxisInfo, dotsCollection, _alignmentD3Tests.getYMisalignmentCount, _alignmentD3Tests.getFeatureValueMinutes, _alignmentD3Tests.getTickValueMinutes), 'y values don\'t line up with y locations ');
	      });

	      reqNum++;
	      it(reqNum + '. I can see multiple tick labels on the y-axis with "%M:%S"\n      time format.', function () {
	        var yAxisTickLabels = document.querySelectorAll('#y-axis .tick');
	        _chai.assert.isAbove(yAxisTickLabels.length, 0, 'Could not find tick labels on the y axis ');
	        yAxisTickLabels.forEach(function (label) {
	          // match "%M:%S" d3 time format
	          _chai.assert.match(label.textContent, /[0-5][0-9]:[0-5][0-9]/, 'Y-axis tick labels aren\'t in the "%M:%S" d3 time format ');
	        });
	      });

	      reqNum++;
	      it(reqNum + '. I can see multiple tick labels on the x-axis that show the\n      year.', function () {
	        var xAxisTickLabels = document.querySelectorAll('#x-axis .tick');
	        _chai.assert.isAbove(xAxisTickLabels.length, 0, 'Could not find tick labels on the x axis ');
	        xAxisTickLabels.forEach(function (label) {
	          // match check if this is a year
	          _chai.assert.match(label.textContent, /[1-2][0-9][0-9][0-9]/, 'X-axis tick labels do not show the year ');
	        });
	      });

	      reqNum++;
	      it(reqNum + '. I can see that the range of the x-axis labels are within\n      the range of the actual x-axis data.', function () {
	        var xAxisTickLabels = document.querySelectorAll('#x-axis .tick');
	        var MIN_YEAR = 1994;
	        var MAX_YEAR = 2016;
	        _chai.assert.isAbove(xAxisTickLabels.length, 0, 'Could not find tick labels on the x axis ');

	        xAxisTickLabels.forEach(function (label) {
	          _chai.assert.isAtLeast(label.textContent, MIN_YEAR, 'x axis labels are below the range of the actual data ');
	          _chai.assert.isAtMost(label.textContent, MAX_YEAR, 'x axis labels are above the range of the actual data ');
	        });
	      });

	      reqNum++;
	      it(reqNum + '. I can see that the range of the y-axis labels are within\n      the range of the actual y-axis data.', function () {
	        var yAxisTickLabels = document.querySelectorAll('#y-axis .tick');
	        var MIN_TIME = new Date(0, 0, 0, 0, MIN_MINUTES, 0, 0);
	        var MAX_TIME = new Date(0, 0, 0, 0, MAX_MINUTES, 0, 0);
	        _chai.assert.isAbove(yAxisTickLabels.length, 0, 'Could not find tick labels on the y axis ');
	        yAxisTickLabels.forEach(function (label) {
	          var timeArr = label.textContent.split(':');
	          var mins = timeArr[0];
	          var secs = timeArr[1];
	          var date = new Date(0, 0, 0, 0, mins, secs, 0);
	          _chai.assert.isAtLeast(date, MIN_TIME, 'y axis labels are below the range of the actual data ');
	          _chai.assert.isAtMost(date, MAX_TIME, 'y axis labels are above the range of the actual data ');
	        });
	      });

	      reqNum++;
	      it(reqNum + '. I can see a legend containing descriptive text that has\n      id="legend".', function () {
	        _chai.assert.isNotNull(document.getElementById('legend'), 'There should be an element with id="legend" ');
	        // A legend may be built with D3 svg <text> elements or with plain html
	        var legendText;
	        if (document.querySelector('#legend text') !== null) {
	          legendText = document.querySelector('#legend text').innerHTML;
	        } else {
	          legendText = document.getElementById('legend').innerText;
	        }
	        _chai.assert.isNotNull(legendText, 'The legend should contain text ');
	      });
	    });

	    (0, _globalD3Tests.testToolTip)(document.querySelectorAll('.dot'), 'data-year', 'data-xvalue');
	  });
	}

/***/ }),
/* 58 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getYAxisInfo = getYAxisInfo;
	exports.getXAxisInfo = getXAxisInfo;
	exports.getTickValueMinutes = getTickValueMinutes;
	exports.getTickValueInteger = getTickValueInteger;
	exports.getTickValueMonths = getTickValueMonths;
	exports.getFeatureValueMinutes = getFeatureValueMinutes;
	exports.getFeatureValueInteger = getFeatureValueInteger;
	exports.getFeatureValueMonths = getFeatureValueMonths;
	exports.isAxisAlignedWithDataPoints = isAxisAlignedWithDataPoints;
	exports.getXMisalignmentCount = getXMisalignmentCount;
	exports.getYMisalignmentCount = getYMisalignmentCount;
	/**
	 * @module alignmentD3Tests
	 */

	/**
	 * Given the below path description example, we are trying to extract
	 * M(1), which is 0.5, or the y coordinate at the top of the y axis.
	 * @function
	 * @param {String} pathDesc - d attribute. Ex: "M-6,0.5H0.5V500.5H-6"

	 * @returns {Number} y coordinate at top of y axis
	 */
	var getYBegin = function getYBegin(pathDesc) {
	  var begin = pathDesc.split(',')[1].split('H')[0];
	  return parseFloat(begin - 0.5);
	};

	/**
	 * Given the below path description example, we are trying to extract
	 * V, which is 500.5 (pixels), or the y coordinate at the bottom of the
	 * y axis.
	 * @function
	 * @param {String} pathDesc - d attribute. Ex: "M-6,0.5H0.5V500.5H-6"

	 * @returns {Number} y coordinate at bottom of y axis
	 */
	var getYEnd = function getYEnd(pathDesc) {
	  var end = pathDesc.split(',')[1].split('V')[1].split('H')[0];
	  return parseFloat(end + 0.5);
	};

	/**
	 * Given the below path description example, we are trying to extract
	 * M(0), which is 0.5 (pixels), or the x coordinate at the beginning
	 * (left side) of the x axis.
	 * @function
	 * @param {String} pathDesc - d attribute. Ex: "M0.5,6V0.5H840.5V6"

	 * @returns {Number} x coordinate at beginning of x axis
	 */
	var getXBegin = function getXBegin(pathDesc) {
	  var begin = pathDesc.split(',')[0].split('M')[1];
	  return parseFloat(begin - 0.5);
	};

	/**
	 * Given the below path description example, we are trying to extract
	 * H, which is 840.5 (pixels), or the x coordinate at the end
	 * (right side) of the x axis.
	 * @function
	 * @param {String} pathDesc - d attribute. Ex: "M0.5,6V0.5H840.5V6"

	 * @returns {Number} x coordinate at end of x axis
	 */
	var getXEnd = function getXEnd(pathDesc) {
	  var end = pathDesc.split(',')[1].split('H')[1].split('V')[0];
	  return parseFloat(end + 0.5);
	};

	/**
	 * Given axis x or y, return an object with size info, tick elements, labels,
	 * and indicators for getting feature data attributes and coordinates.
	 * @function
	 * @param {HTMLElement} axis - HTMLElement g from
	 * Ex. document.querySelector('#y-axis')
	 * @param {String} dataAttr - data attribute to check: Ex. "data-yvalue"
	 * @param {String} coordAttr - respective feature coordinate attribute: Ex. "cy"
	 * @param {Function} getBegin - pass getBegin function (getXBegin or getYBegin)
	 * @param {Function} getEnd - pass getEnd function (getXEnd or getYEnd)

	 * @returns {Object} Size, begin and end coordinates, tick and text NodeLists
	 */
	var getAxisInfo = function getAxisInfo(axis, dataAttr, coordAttr, getBegin, getEnd, units) {
	  var pathDesc = axis.querySelector('path').getAttribute('d'),
	      begin = getBegin(pathDesc),
	      end = getEnd(pathDesc);
	  return {
	    size: end - begin,
	    begin: begin,
	    end: end,
	    ticks: axis.querySelectorAll('.tick'),
	    text: axis.querySelectorAll('.tick text'),
	    dataAttr: dataAttr,
	    coordAttr: coordAttr,
	    units: units ? units : ''
	  };
	};

	/**
	 * Run getAxisInfo with y axis specified.
	 * @function
	 * @param {HTMLElement} yAxis - HTMLElement g for y axis
	 * @param {String} dataAttr - feature data attribute to check: Ex. "data-yvalue"
	 * @param {String} coordAttr - feature y coordinate attribute: Ex. "cy"

	 * @returns {function} with y axis specified
	 */
	function getYAxisInfo(yAxis, dataAttr, coordAttr) {
	  return getAxisInfo(yAxis, dataAttr, coordAttr, getYBegin, getYEnd);
	}

	/**
	 * Run getAxisInfo with x axis specified.
	 * @function
	 * @param {HTMLElement} xAxis - HTMLElement g for x axis
	 * @param {String} dataAttr - feature data attribute to check: Ex. "data-xvalue"
	 * @param {String} coordAttr - feature x coordinate attribute: Ex. "cx"

	 * @returns {function} with x axis specified
	 */
	function getXAxisInfo(xAxis, dataAttr, coordAttr) {
	  return getAxisInfo(xAxis, dataAttr, coordAttr, getXBegin, getXEnd);
	}

	/**
	 * Get y coordinate of tick
	 * @function
	 * @param {HTMLElement} tick - HTMLElement g for given tick iterated from
	 * axis.querySelectorAll('.tick') in getAxisInfo

	 * @returns {Number} pixel value of y translate coordinate
	 */
	var getYTickLocation = function getYTickLocation(tick) {
	  return tick.getAttribute('transform').split(',')[1].split(')')[0];
	};

	/**
	 * Get x coordinate of tick
	 * @function
	 * @param {HTMLElement} tick - HTMLElement g for given tick iterated from
	 * axis.querySelectorAll('.tick') in getAxisInfo

	 * @returns {Number} pixel value of x translate coordinate
	 */
	var getXTickLocation = function getXTickLocation(tick) {
	  return tick.getAttribute('transform').split(',')[0].split('(')[1];
	};

	/**
	 * Convert one axis tick's label innerHTML from mm:ss to decimal
	 * @function
	 * @param {String} axisTick - innerHTML from text of a single tick. Ex: "37:00"
	 * from axis.querySelectorAll('.tick text') in getAxisInfo

	 * @returns {Number} float
	 */
	function getTickValueMinutes(axisTick) {
	  return parseInt(axisTick.split(':')[0], 10) + parseInt(axisTick.split(':')[1], 10) / 60;
	};

	/**
	 * Parse one axis tick's label innerHTML
	 * @function
	 * @param {String} axisTick - innerHTML from text of single tick. Ex: "1990"
	 * from axis.querySelectorAll('.tick text') in getAxisInfo

	 * @returns {Number} integer
	 */
	function getTickValueInteger(axisTick) {
	  return parseInt(axisTick, 10);
	};

	/**
	 * Convert one axis tick's label innerHTML from month string to index
	 * @function
	 * @param {String} axisTick - innerHTML from text of a single tick. Ex: "March"
	 * from axis.querySelectorAll('.tick text') in getAxisInfo

	 * @returns {Number} integer
	 */
	function getTickValueMonths(axisTick, axis) {
	  var label = axisTick.toLowerCase();
	  return axis.units.indexOf(label);
	};

	/**
	 * Convert feature data-* attribute from date object to to decimal minutes
	 * @function
	 * @param {HTMLElement} feature - HTMLElement iterated from HTMLCollection from
	 * project test, Ex. document.querySelectorAll('.cell').item(i) via
	 * getMisalignmentCount
	 * @param {Object} axis - constructed in getAxisInfo

	 * @returns {Number} float
	 */
	function getFeatureValueMinutes(feature, axis) {
	  var value = feature.getAttribute(axis.dataAttr);

	  return new Date(value).getMinutes() + new Date(value).getSeconds() / 60;
	};

	/**
	 * Parse feature data-* or data-year attribute
	 * @function
	 * @param {HTMLElement} feature - HTMLElement iterated from HTMLCollection from
	 * project test, Ex. document.querySelectorAll('.cell').item(i) via
	 * getMisalignmentCount
	 * @param {Object} axis - constructed in getAxisInfo

	 * @returns {Number} integer
	 */
	function getFeatureValueInteger(feature, axis) {
	  var value = feature.getAttribute(axis.dataAttr);

	  return parseInt(value, 10);
	};

	/**
	 * Get feature data-* attribute
	 * @function
	 * @param {HTMLElement} feature - HTMLElement iterated from HTMLCollection from
	 * project test, Ex. document.querySelectorAll('.cell').item(i) via
	 * getMisalignmentCount
	 * @param {Object} axis - constructed in getAxisInfo

	 * @returns {Number} integer
	 */
	function getFeatureValueMonths(feature, axis) {
	  var value = parseInt(feature.getAttribute(axis.dataAttr), 10);
	  if (isNaN(value)) {
	    value = feature.getAttribute(axis.dataAttr).toLowerCase();
	    return axis.units.indexOf(value);
	  } else {
	    return value;
	  }
	};

	/**
	 * Compare feature coordinate to tick[i] and tick[i+1] and return true if
	 * feature coordinate is greater than or equal to the coordinate for tick[i]
	 * and less than the coordinate for tick[i+1]
	 * @function
	 * @param {Number} featureCoord - x or y pixel coordinate per feature per axis
	 * @param {Object} axis - Object constructed from getAxisInfo
	 * @param {Number} tickPxCur - Coordinate (x or y) for tick[i]
	 * @param {Number} tickPxNext - Coordinate (x or y) for tick[i+1]

	 * @returns {Boolean} true if feature position is between tick[i] (inclusive)
	 * and tick[i+1] (exclusive)
	 */
	var isFeatureAligned = function isFeatureAligned(featureCoord, axis, tickPxCur, tickPxNext) {
	  // Determine lower / higher coordinate size between two ticks
	  // This is to account for reverse tick order (see issue #70)
	  var minTickCoord = Math.min(tickPxCur, tickPxNext);
	  var maxTickCoord = Math.max(tickPxCur, tickPxNext);
	  // getMisalignmentCount checked whether the feature's attribute data-xvalue or
	  // data-yvalue is between (inclusive) two ticks' labeled values.
	  // If that is true, the feature's pixel coordinates should also be between
	  // (inclusive) the two ticks' axis coordinates, plus-or-minus 1px.
	  // Codepen and regular browser had 0.5px differences for these coordinates,
	  // hence the 1px buffer.
	  return featureCoord >= minTickCoord - 1 && featureCoord <= maxTickCoord + 1;
	};

	/**
	 * For given tick i and i+1, get features whose associated values are
	 * between (inclusive) tick i and i+1 values and runs isFeatureAligned on each.
	 * @param {Object} axis - object created from getAxisInfo
	 * @param {Array} collection - HTMLCollection of features from project test,
	 * Ex. document.querySelectorAll('.cell')
	 * @param {Function} getFeatureValueFunc - via getMisalignmentCountCaller
	 * @param {Number} tickPxCur - Coordinate (x or y) for tick[i]
	 * @param {Number} tickPxNext - Coordinate (x or y) for tick[i+1]
	 * @param {Number} tickValCur - parsed from getTickValue(getTickText())
	 * @param {Number} tickValNext - parsed from getTickValue(getTickText())

	 * @return {Number} Count of misaligned features via isFeatureAligned
	*/
	var getMisalignmentCount = function getMisalignmentCount(axis, collection, getFeatureValueFunc, tickPxCur, tickPxNext, tickValCur, tickValNext) {
	  var count = 0;

	  for (var j = 0; j < collection.length - 1; j++) {
	    // get values for given feature (j)
	    var featureVal = getFeatureValueFunc(collection.item(j), axis),
	        featureCoord = getFeatureCoord(collection.item(j), axis);
	    if (featureVal >= tickValCur && featureVal < tickValNext) {
	      if (!isFeatureAligned(featureCoord, axis, tickPxCur, tickPxNext)) {
	        count++;
	      }
	    }
	  }
	  return count;
	};

	/**
	 * Get x or y coordinate of given feature
	 * @function
	 * @param {HTMLElement} feature - HTMLElement (circle or rect) iterated from
	 * collection of features in getMisalignmentCount
	 * @param {Object} axis - constructed in getAxisInfo

	 * @returns {Number} float
	 */
	var getFeatureCoord = function getFeatureCoord(feature, axis) {
	  //var type = feature.tagName;
	  var coord;
	  if (axis.coordAttr === 'cx' || axis.coordAttr === 'cy') {
	    coord = parseFloat(feature.getAttribute(axis.coordAttr));
	  } else {
	    // the x, y attributes for each rect are from the top-left of the shape.
	    // compute the mid-value for a coordinate to compare to axis tick
	    var half;
	    if (axis.coordAttr === 'x') {
	      half = parseFloat(feature.getAttribute('width')) / 2;
	    } else {
	      half = parseFloat(feature.getAttribute('height')) / 2;
	    }
	    coord = parseFloat(feature.getAttribute(axis.coordAttr)) + half;
	  }
	  return coord;
	};

	/**
	 * get innerHTML from text element inside a given <g class=".tick">
	 * @function
	 * @param {HTMLElement} axisTick - HTMLElement g (.tick) iterated from
	 * axis in getMisalignmentCountCaller

	 * @returns {String} Label from axis
	 */
	var getTickText = function getTickText(axisTick) {
	  return axisTick.querySelector('text').innerHTML;
	};

	/**
	 * Run getMisalignmentCount with parameters for either x or y axis /
	 * x or y feature coordinate
	 * @function
	 * @param {Object} axis - constructed in getAxisInfo
	 * @param {Array}  collection - HTMLCollection of features from project test,
	 * Ex. document.querySelectorAll('.cell') or document.querySelectorAll('.dot')
	 * @param {Function} getFeatureValueFunc - getFeatureValueInteger or
	 * getFeatureValueMinutes
	 * @param {Function} getTickLocationFunc - getXTickLocation or getYTickLocation
	 * @param {Function} getTickValueFunc - getTickValueInteger,
	 * getTickValueMinutes, or getTickValueMonths
	 * @param {Number} i - index of axis tick

	 * @returns {Function} getMisAlignmentCount with specified parameters
	 */
	var getMisalignmentCountCaller = function getMisalignmentCountCaller(axis, collection, getFeatureValueFunc, getTickLocationFunc, getTickValueFunc, i) {
	  var tickValCur = getTickValueFunc(getTickText(axis.ticks[i]), axis),
	      tickValNext = getTickValueFunc(getTickText(axis.ticks[i + 1]), axis),

	  // d3 adds 0.5px to ends of axes, so subtract 0.5 to accurately compare
	  // position to feature position.
	  tickPxCur = getTickLocationFunc(axis.ticks[i]) - 0.5,
	      tickPxNext = getTickLocationFunc(axis.ticks[i + 1]) - 0.5;
	  return getMisalignmentCount(axis, collection, getFeatureValueFunc, tickPxCur, tickPxNext, tickValCur, tickValNext);
	};

	/**
	 * Run either getXMisalignmentCount or getYMisalignmentCount for all ticks on
	 * that axis and keep a count
	 * @function
	 * @param {Object} axis - constructed in getAxisInfo
	 * @param {Array}  collection - HTMLCollection of features from project test,
	 * Ex. document.querySelectorAll('.cell') or document.querySelectorAll('.dot')
	 * @param {Function} getMisalignmentCountFunc -
	 * passes either getXMisalignmentCount or getYMisalignmentCount
	 * @param {Function} getFeatureValueFunc - getFeatureValueInteger or
	 * getFeatureValueMinutes
	 * @param {Function} getTickValueFunc - getTickValueInteger,
	 * getTickValueMinutes, or getTickValueMonths

	 * @returns {Boolean} true if no misalignments are counted
	 */
	function isAxisAlignedWithDataPoints(axis, collection, getMisalignmentCountFunc, getFeatureValueFunc, getTickValueFunc) {
	  var count = 0;
	  for (var i = 0; i < axis.ticks.length - 1; i++) {
	    count += getMisalignmentCountFunc(axis, collection, getFeatureValueFunc, getTickValueFunc, i);
	  }

	  return count === 0;
	}

	/**
	 * Call getMisAlignmentCount via isAxisAlignedWithDataPoints
	 * for a tick on the x axis
	 * @function
	 * @param {Object} axis - constructed in getAxisInfo
	 * @param {Array}  collection - HTMLCollection of features from project test,
	 * Ex. document.querySelectorAll('.cell') or document.querySelectorAll('.dot')
	 * @param {Function} getFeatureValueFunc - getFeatureValueInteger or
	 * getFeatureValueMinutes
	 * @param {Function} getTickValueFunc - getTickValueInteger,
	 * getTickValueMinutes, or getTickValueMonths
	 * @param {Number} i - index of axis tick

	 * @returns {Number} Count of misalignments
	 */
	function getXMisalignmentCount(axis, collection, getFeatureValueFunc, getTickValueFunc, i) {
	  var count = getMisalignmentCountCaller(axis, collection, getFeatureValueFunc, getXTickLocation, getTickValueFunc, i);

	  return count;
	}

	/**
	 * Call getMisAlignmentCount via isAxisAlignedWithDataPoints
	 * for a tick on the y axis
	 * @function
	 * @param {Object} axis - HTMLElement
	 * @param {Array}  collection - HTMLCollection of features from project test,
	 * Ex. document.querySelectorAll('.cell') or document.querySelectorAll('.dot')
	 * @param {Function} getFeatureValueFunc - getFeatureValueInteger or
	 * getFeatureValueMinutes
	 * @param {Function} getTickValueFunc - getTickValueInteger,
	 * getTickValueMinutes, or getTickValueMonths
	 * @param {Number} i - index of axis tick

	 * @returns {Number} Count of misalignments
	 */
	function getYMisalignmentCount(axis, collection, getFeatureValueFunc, getTickValueFunc, i) {
	  var count = getMisalignmentCountCaller(axis, collection, getFeatureValueFunc, getYTickLocation, getTickValueFunc, i);

	  return count;
	}

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createChoroplethTests;

	var _chai = __webpack_require__(2);

	var _education = __webpack_require__(60);

	var _education2 = _interopRequireDefault(_education);

	var _globalD3Tests = __webpack_require__(56);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createChoroplethTests() {

	  describe('#ChoroplethTests', function () {

	    describe('#Content', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. My Choropleth should have a title with a corresponding\n      id="title"', function () {
	        _chai.assert.isNotNull(document.getElementById('title'), 'Could not find an element with id="title" ');
	      });

	      reqNum++;
	      it(reqNum + '. My Choropleth should have a description element with a\n      corresponding id="description"', function () {
	        _chai.assert.isNotNull(document.getElementById('description'), 'Could not find element with id="description" ');
	      });

	      reqNum++;
	      it(reqNum + '. My Choropleth should have counties with a corresponding\n      class="county" that represent the data', function () {
	        _chai.assert.isAbove(document.querySelectorAll('.county').length, 0, 'Could not find any elements with class="county" ');
	      });

	      reqNum++;
	      it(reqNum + '. There should be at least 4 different fill colors used for\n      the counties', function () {
	        var counties = document.querySelectorAll('.county');
	        var uniqueColors = [];

	        for (var i = 0; i < counties.length; i++) {
	          var countyColor = counties[i].style.fill || counties[i].getAttribute('fill');

	          // If the current color isn't in the uniqueColors arr, push it.
	          if (uniqueColors.indexOf(countyColor) === -1) {
	            uniqueColors.push(countyColor);
	          }
	        }

	        _chai.assert.isAtLeast(uniqueColors.length, 4, 'There should be at least four fill colors used for the counties ');
	      });

	      reqNum++;
	      it(reqNum + '. My counties should each have "data-fips" and\n      "data-education" properties containing their corresponding fips and\n      education values', function () {
	        var counties = document.querySelectorAll('.county');
	        _chai.assert.isAbove(counties.length, 0, 'Could not find any elements with a class="counties" ');

	        for (var i = 0; i < counties.length; i++) {
	          var county = counties[i];
	          _chai.assert.isNotNull(county.getAttribute('data-fips'), 'Could not find property "data-fips" in county ');
	          _chai.assert.isNotNull(county.getAttribute('data-education'), 'Could not find property "data-education" in county ');
	        }
	      });

	      reqNum++;
	      it(reqNum + '. My Choropleth should have a county for each provided data\n      point', function () {
	        var counties = document.querySelectorAll('.county');

	        _chai.assert.equal(counties.length, _education2.default.length);
	      });

	      reqNum++;
	      it(reqNum + '. The counties should have data-fips and data-education\n      values that match the sample data', function () {
	        var counties = document.querySelectorAll('.county');
	        var educationDataFips = _education2.default.map(function (item) {
	          return item.fips;
	        });
	        var uniqueFipsFromChoropleth = [];
	        // Check for any duplicate fips values.
	        for (var i = 0; i < counties.length; i++) {
	          var fips = counties[i].getAttribute('data-fips');

	          _chai.assert.equal(uniqueFipsFromChoropleth.indexOf(fips), -1, 'There should be no duplicate fips values ');
	          uniqueFipsFromChoropleth.push(+fips);
	        }

	        // Iterate through each data point and make sure all given data appears
	        // on the Choropleth, and that the Choropleth doesn't contain extra
	        // data.
	        for (var j = 0; j < _education2.default.length; j++) {
	          // Test that every value in the sample data is in the Choropleth.
	          _chai.assert.notEqual(uniqueFipsFromChoropleth.indexOf(educationDataFips[j]), -1, 'Choropleth does not contain all fips from sample data ');

	          // Test that every value in the Choropleth is in the sample data.
	          _chai.assert.notEqual(educationDataFips.indexOf(uniqueFipsFromChoropleth[j]), -1, 'Choropleth contains fips data not found in sample data ');
	        }

	        // Index educationData by fips.
	        var educationDataByFips = _education2.default.reduce(function (data, item) {
	          data[item.fips] = item;
	          return data;
	        }, {});

	        // Check if the counties on the Choropleth have data-education values
	        // that correspond to the correct data-fips value.
	        for (var k = 0; k < counties.length; k++) {
	          var countyFips = +counties[k].getAttribute('data-fips');
	          var countyEducation = counties[k].getAttribute('data-education');
	          var sampleEducation = educationDataByFips[countyFips].bachelorsOrHigher;

	          _chai.assert.equal(countyEducation, sampleEducation, 'County fips and education data does not match ');
	        }
	      });

	      reqNum++;
	      it(reqNum + '. My Choropleth should have a legend with a corresponding\n      id="legend"', function () {
	        _chai.assert.isNotNull(document.getElementById('legend'), 'Could not find element with id="legend" ');
	      });

	      reqNum++;
	      it(reqNum + '. There should be at least 4 different fill colors used for\n      the legend', function () {
	        var rects = document.querySelectorAll('#legend rect');
	        var uniqueColors = [];

	        for (var i = 0; i < rects.length; i++) {
	          var rectColor = rects[i].style.fill || rects[i].getAttribute('fill');

	          // if the current color isn't in the uniqueColors arr, push it
	          if (uniqueColors.indexOf(rectColor) === -1) {
	            uniqueColors.push(rectColor);
	          }
	        }
	        _chai.assert.isAtLeast(uniqueColors.length, 4, 'There should be at least four fill colors used for the legend ');
	      });
	    });

	    // Additional tests.
	    (0, _globalD3Tests.testToolTip)(document.querySelectorAll('.county'), 'data-education', 'data-education');
	  });
	}

/***/ }),
/* 60 */
/***/ (function(module, exports) {

	module.exports = [
		{
			"fips": 1001,
			"state": "AL",
			"area_name": "Autauga County",
			"bachelorsOrHigher": 21.9
		},
		{
			"fips": 1003,
			"state": "AL",
			"area_name": "Baldwin County",
			"bachelorsOrHigher": 28.6
		},
		{
			"fips": 1005,
			"state": "AL",
			"area_name": "Barbour County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 1007,
			"state": "AL",
			"area_name": "Bibb County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 1009,
			"state": "AL",
			"area_name": "Blount County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 1011,
			"state": "AL",
			"area_name": "Bullock County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 1013,
			"state": "AL",
			"area_name": "Butler County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 1015,
			"state": "AL",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 1017,
			"state": "AL",
			"area_name": "Chambers County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 1019,
			"state": "AL",
			"area_name": "Cherokee County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 1021,
			"state": "AL",
			"area_name": "Chilton County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 1023,
			"state": "AL",
			"area_name": "Choctaw County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 1025,
			"state": "AL",
			"area_name": "Clarke County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 1027,
			"state": "AL",
			"area_name": "Clay County",
			"bachelorsOrHigher": 8.6
		},
		{
			"fips": 1029,
			"state": "AL",
			"area_name": "Cleburne County",
			"bachelorsOrHigher": 10.6
		},
		{
			"fips": 1031,
			"state": "AL",
			"area_name": "Coffee County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 1033,
			"state": "AL",
			"area_name": "Colbert County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 1035,
			"state": "AL",
			"area_name": "Conecuh County",
			"bachelorsOrHigher": 8.3
		},
		{
			"fips": 1037,
			"state": "AL",
			"area_name": "Coosa County",
			"bachelorsOrHigher": 9.1
		},
		{
			"fips": 1039,
			"state": "AL",
			"area_name": "Covington County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 1041,
			"state": "AL",
			"area_name": "Crenshaw County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 1043,
			"state": "AL",
			"area_name": "Cullman County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 1045,
			"state": "AL",
			"area_name": "Dale County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 1047,
			"state": "AL",
			"area_name": "Dallas County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 1049,
			"state": "AL",
			"area_name": "DeKalb County",
			"bachelorsOrHigher": 11.3
		},
		{
			"fips": 1051,
			"state": "AL",
			"area_name": "Elmore County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 1053,
			"state": "AL",
			"area_name": "Escambia County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 1055,
			"state": "AL",
			"area_name": "Etowah County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 1057,
			"state": "AL",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 1059,
			"state": "AL",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 1061,
			"state": "AL",
			"area_name": "Geneva County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 1063,
			"state": "AL",
			"area_name": "Greene County",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 1065,
			"state": "AL",
			"area_name": "Hale County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 1067,
			"state": "AL",
			"area_name": "Henry County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 1069,
			"state": "AL",
			"area_name": "Houston County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 1071,
			"state": "AL",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 1073,
			"state": "AL",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 30.3
		},
		{
			"fips": 1075,
			"state": "AL",
			"area_name": "Lamar County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 1077,
			"state": "AL",
			"area_name": "Lauderdale County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 1079,
			"state": "AL",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 11.3
		},
		{
			"fips": 1081,
			"state": "AL",
			"area_name": "Lee County",
			"bachelorsOrHigher": 33.2
		},
		{
			"fips": 1083,
			"state": "AL",
			"area_name": "Limestone County",
			"bachelorsOrHigher": 23.1
		},
		{
			"fips": 1085,
			"state": "AL",
			"area_name": "Lowndes County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 1087,
			"state": "AL",
			"area_name": "Macon County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 1089,
			"state": "AL",
			"area_name": "Madison County",
			"bachelorsOrHigher": 38.6
		},
		{
			"fips": 1091,
			"state": "AL",
			"area_name": "Marengo County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 1093,
			"state": "AL",
			"area_name": "Marion County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 1095,
			"state": "AL",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 1097,
			"state": "AL",
			"area_name": "Mobile County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 1099,
			"state": "AL",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 1101,
			"state": "AL",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 31.3
		},
		{
			"fips": 1103,
			"state": "AL",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 1105,
			"state": "AL",
			"area_name": "Perry County",
			"bachelorsOrHigher": 9.1
		},
		{
			"fips": 1107,
			"state": "AL",
			"area_name": "Pickens County",
			"bachelorsOrHigher": 9.6
		},
		{
			"fips": 1109,
			"state": "AL",
			"area_name": "Pike County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 1111,
			"state": "AL",
			"area_name": "Randolph County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 1113,
			"state": "AL",
			"area_name": "Russell County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 1115,
			"state": "AL",
			"area_name": "St. Clair County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 1117,
			"state": "AL",
			"area_name": "Shelby County",
			"bachelorsOrHigher": 40.2
		},
		{
			"fips": 1119,
			"state": "AL",
			"area_name": "Sumter County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 1121,
			"state": "AL",
			"area_name": "Talladega County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 1123,
			"state": "AL",
			"area_name": "Tallapoosa County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 1125,
			"state": "AL",
			"area_name": "Tuscaloosa County",
			"bachelorsOrHigher": 27.7
		},
		{
			"fips": 1127,
			"state": "AL",
			"area_name": "Walker County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 1129,
			"state": "AL",
			"area_name": "Washington County",
			"bachelorsOrHigher": 10.3
		},
		{
			"fips": 1131,
			"state": "AL",
			"area_name": "Wilcox County",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 1133,
			"state": "AL",
			"area_name": "Winston County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 2013,
			"state": "AK",
			"area_name": "Aleutians East Borough",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 2016,
			"state": "AK",
			"area_name": "Aleutians West Census Area",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 2020,
			"state": "AK",
			"area_name": "Anchorage Municipality",
			"bachelorsOrHigher": 32.9
		},
		{
			"fips": 2050,
			"state": "AK",
			"area_name": "Bethel Census Area",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 2060,
			"state": "AK",
			"area_name": "Bristol Bay Borough",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 2068,
			"state": "AK",
			"area_name": "Denali Borough",
			"bachelorsOrHigher": 29.5
		},
		{
			"fips": 2070,
			"state": "AK",
			"area_name": "Dillingham Census Area",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 2090,
			"state": "AK",
			"area_name": "Fairbanks North Star Borough",
			"bachelorsOrHigher": 30.5
		},
		{
			"fips": 2100,
			"state": "AK",
			"area_name": "Haines Borough",
			"bachelorsOrHigher": 31.3
		},
		{
			"fips": 2105,
			"state": "AK",
			"area_name": "Hoonah-Angoon Census Area",
			"bachelorsOrHigher": 29.3
		},
		{
			"fips": 2110,
			"state": "AK",
			"area_name": "Juneau City and Borough",
			"bachelorsOrHigher": 37.8
		},
		{
			"fips": 2122,
			"state": "AK",
			"area_name": "Kenai Peninsula Borough",
			"bachelorsOrHigher": 23.3
		},
		{
			"fips": 2130,
			"state": "AK",
			"area_name": "Ketchikan Gateway Borough",
			"bachelorsOrHigher": 24.6
		},
		{
			"fips": 2150,
			"state": "AK",
			"area_name": "Kodiak Island Borough",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 2164,
			"state": "AK",
			"area_name": "Lake and Peninsula Borough",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 2170,
			"state": "AK",
			"area_name": "Matanuska-Susitna Borough",
			"bachelorsOrHigher": 20.9
		},
		{
			"fips": 2180,
			"state": "AK",
			"area_name": "Nome Census Area",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 2185,
			"state": "AK",
			"area_name": "North Slope Borough",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 2188,
			"state": "AK",
			"area_name": "Northwest Arctic Borough",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 2195,
			"state": "AK",
			"area_name": "Petersburg Census Area",
			"bachelorsOrHigher": 25.2
		},
		{
			"fips": 2198,
			"state": "AK",
			"area_name": "Prince of Wales-Hyder Census Area",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 2220,
			"state": "AK",
			"area_name": "Sitka City and Borough",
			"bachelorsOrHigher": 32.9
		},
		{
			"fips": 2230,
			"state": "AK",
			"area_name": "Skagway Municipality",
			"bachelorsOrHigher": 34.6
		},
		{
			"fips": 2240,
			"state": "AK",
			"area_name": "Southeast Fairbanks Census Area",
			"bachelorsOrHigher": 20.7
		},
		{
			"fips": 2261,
			"state": "AK",
			"area_name": "Valdez-Cordova Census Area",
			"bachelorsOrHigher": 24.1
		},
		{
			"fips": 2158,
			"state": "AK",
			"area_name": "Kusilvak Census Area",
			"bachelorsOrHigher": 4.5
		},
		{
			"fips": 2275,
			"state": "AK",
			"area_name": "Wrangell City and Borough",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 2282,
			"state": "AK",
			"area_name": "Yakutat City and Borough",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 2290,
			"state": "AK",
			"area_name": "Yukon-Koyukuk Census Area",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 4001,
			"state": "AZ",
			"area_name": "Apache County",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 4003,
			"state": "AZ",
			"area_name": "Cochise County",
			"bachelorsOrHigher": 23.1
		},
		{
			"fips": 4005,
			"state": "AZ",
			"area_name": "Coconino County",
			"bachelorsOrHigher": 32.8
		},
		{
			"fips": 4007,
			"state": "AZ",
			"area_name": "Gila County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 4009,
			"state": "AZ",
			"area_name": "Graham County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 4011,
			"state": "AZ",
			"area_name": "Greenlee County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 4012,
			"state": "AZ",
			"area_name": "La Paz County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 4013,
			"state": "AZ",
			"area_name": "Maricopa County",
			"bachelorsOrHigher": 30
		},
		{
			"fips": 4015,
			"state": "AZ",
			"area_name": "Mohave County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 4017,
			"state": "AZ",
			"area_name": "Navajo County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 4019,
			"state": "AZ",
			"area_name": "Pima County",
			"bachelorsOrHigher": 30.1
		},
		{
			"fips": 4021,
			"state": "AZ",
			"area_name": "Pinal County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 4023,
			"state": "AZ",
			"area_name": "Santa Cruz County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 4025,
			"state": "AZ",
			"area_name": "Yavapai County",
			"bachelorsOrHigher": 24.9
		},
		{
			"fips": 4027,
			"state": "AZ",
			"area_name": "Yuma County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 5001,
			"state": "AR",
			"area_name": "Arkansas County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 5003,
			"state": "AR",
			"area_name": "Ashley County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 5005,
			"state": "AR",
			"area_name": "Baxter County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 5007,
			"state": "AR",
			"area_name": "Benton County",
			"bachelorsOrHigher": 29.6
		},
		{
			"fips": 5009,
			"state": "AR",
			"area_name": "Boone County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 5011,
			"state": "AR",
			"area_name": "Bradley County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 5013,
			"state": "AR",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 10.6
		},
		{
			"fips": 5015,
			"state": "AR",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 5017,
			"state": "AR",
			"area_name": "Chicot County",
			"bachelorsOrHigher": 11.3
		},
		{
			"fips": 5019,
			"state": "AR",
			"area_name": "Clark County",
			"bachelorsOrHigher": 22.3
		},
		{
			"fips": 5021,
			"state": "AR",
			"area_name": "Clay County",
			"bachelorsOrHigher": 9.8
		},
		{
			"fips": 5023,
			"state": "AR",
			"area_name": "Cleburne County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 5025,
			"state": "AR",
			"area_name": "Cleveland County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 5027,
			"state": "AR",
			"area_name": "Columbia County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 5029,
			"state": "AR",
			"area_name": "Conway County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 5031,
			"state": "AR",
			"area_name": "Craighead County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 5033,
			"state": "AR",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 5035,
			"state": "AR",
			"area_name": "Crittenden County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 5037,
			"state": "AR",
			"area_name": "Cross County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 5039,
			"state": "AR",
			"area_name": "Dallas County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 5041,
			"state": "AR",
			"area_name": "Desha County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 5043,
			"state": "AR",
			"area_name": "Drew County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 5045,
			"state": "AR",
			"area_name": "Faulkner County",
			"bachelorsOrHigher": 27.3
		},
		{
			"fips": 5047,
			"state": "AR",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 5049,
			"state": "AR",
			"area_name": "Fulton County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 5051,
			"state": "AR",
			"area_name": "Garland County",
			"bachelorsOrHigher": 21
		},
		{
			"fips": 5053,
			"state": "AR",
			"area_name": "Grant County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 5055,
			"state": "AR",
			"area_name": "Greene County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 5057,
			"state": "AR",
			"area_name": "Hempstead County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 5059,
			"state": "AR",
			"area_name": "Hot Spring County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 5061,
			"state": "AR",
			"area_name": "Howard County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 5063,
			"state": "AR",
			"area_name": "Independence County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 5065,
			"state": "AR",
			"area_name": "Izard County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 5067,
			"state": "AR",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 7.9
		},
		{
			"fips": 5069,
			"state": "AR",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 5071,
			"state": "AR",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 5073,
			"state": "AR",
			"area_name": "Lafayette County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 5075,
			"state": "AR",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 5077,
			"state": "AR",
			"area_name": "Lee County",
			"bachelorsOrHigher": 6.4
		},
		{
			"fips": 5079,
			"state": "AR",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 8.5
		},
		{
			"fips": 5081,
			"state": "AR",
			"area_name": "Little River County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 5083,
			"state": "AR",
			"area_name": "Logan County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 5085,
			"state": "AR",
			"area_name": "Lonoke County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 5087,
			"state": "AR",
			"area_name": "Madison County",
			"bachelorsOrHigher": 9.7
		},
		{
			"fips": 5089,
			"state": "AR",
			"area_name": "Marion County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 5091,
			"state": "AR",
			"area_name": "Miller County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 5093,
			"state": "AR",
			"area_name": "Mississippi County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 5095,
			"state": "AR",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 5097,
			"state": "AR",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 5099,
			"state": "AR",
			"area_name": "Nevada County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 5101,
			"state": "AR",
			"area_name": "Newton County",
			"bachelorsOrHigher": 11.3
		},
		{
			"fips": 5103,
			"state": "AR",
			"area_name": "Ouachita County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 5105,
			"state": "AR",
			"area_name": "Perry County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 5107,
			"state": "AR",
			"area_name": "Phillips County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 5109,
			"state": "AR",
			"area_name": "Pike County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 5111,
			"state": "AR",
			"area_name": "Poinsett County",
			"bachelorsOrHigher": 8
		},
		{
			"fips": 5113,
			"state": "AR",
			"area_name": "Polk County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 5115,
			"state": "AR",
			"area_name": "Pope County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 5117,
			"state": "AR",
			"area_name": "Prairie County",
			"bachelorsOrHigher": 10.4
		},
		{
			"fips": 5119,
			"state": "AR",
			"area_name": "Pulaski County",
			"bachelorsOrHigher": 32
		},
		{
			"fips": 5121,
			"state": "AR",
			"area_name": "Randolph County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 5123,
			"state": "AR",
			"area_name": "St. Francis County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 5125,
			"state": "AR",
			"area_name": "Saline County",
			"bachelorsOrHigher": 23
		},
		{
			"fips": 5127,
			"state": "AR",
			"area_name": "Scott County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 5129,
			"state": "AR",
			"area_name": "Searcy County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 5131,
			"state": "AR",
			"area_name": "Sebastian County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 5133,
			"state": "AR",
			"area_name": "Sevier County",
			"bachelorsOrHigher": 8.3
		},
		{
			"fips": 5135,
			"state": "AR",
			"area_name": "Sharp County",
			"bachelorsOrHigher": 10.6
		},
		{
			"fips": 5137,
			"state": "AR",
			"area_name": "Stone County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 5139,
			"state": "AR",
			"area_name": "Union County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 5141,
			"state": "AR",
			"area_name": "Van Buren County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 5143,
			"state": "AR",
			"area_name": "Washington County",
			"bachelorsOrHigher": 29.3
		},
		{
			"fips": 5145,
			"state": "AR",
			"area_name": "White County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 5147,
			"state": "AR",
			"area_name": "Woodruff County",
			"bachelorsOrHigher": 9
		},
		{
			"fips": 5149,
			"state": "AR",
			"area_name": "Yell County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 6001,
			"state": "CA",
			"area_name": "Alameda County",
			"bachelorsOrHigher": 42.1
		},
		{
			"fips": 6003,
			"state": "CA",
			"area_name": "Alpine County",
			"bachelorsOrHigher": 30.5
		},
		{
			"fips": 6005,
			"state": "CA",
			"area_name": "Amador County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 6007,
			"state": "CA",
			"area_name": "Butte County",
			"bachelorsOrHigher": 25
		},
		{
			"fips": 6009,
			"state": "CA",
			"area_name": "Calaveras County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 6011,
			"state": "CA",
			"area_name": "Colusa County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 6013,
			"state": "CA",
			"area_name": "Contra Costa County",
			"bachelorsOrHigher": 39.4
		},
		{
			"fips": 6015,
			"state": "CA",
			"area_name": "Del Norte County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 6017,
			"state": "CA",
			"area_name": "El Dorado County",
			"bachelorsOrHigher": 32.1
		},
		{
			"fips": 6019,
			"state": "CA",
			"area_name": "Fresno County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 6021,
			"state": "CA",
			"area_name": "Glenn County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 6023,
			"state": "CA",
			"area_name": "Humboldt County",
			"bachelorsOrHigher": 27.5
		},
		{
			"fips": 6025,
			"state": "CA",
			"area_name": "Imperial County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 6027,
			"state": "CA",
			"area_name": "Inyo County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 6029,
			"state": "CA",
			"area_name": "Kern County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 6031,
			"state": "CA",
			"area_name": "Kings County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 6033,
			"state": "CA",
			"area_name": "Lake County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 6035,
			"state": "CA",
			"area_name": "Lassen County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 6037,
			"state": "CA",
			"area_name": "Los Angeles County",
			"bachelorsOrHigher": 29.9
		},
		{
			"fips": 6039,
			"state": "CA",
			"area_name": "Madera County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 6041,
			"state": "CA",
			"area_name": "Marin County",
			"bachelorsOrHigher": 54.8
		},
		{
			"fips": 6043,
			"state": "CA",
			"area_name": "Mariposa County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 6045,
			"state": "CA",
			"area_name": "Mendocino County",
			"bachelorsOrHigher": 22.5
		},
		{
			"fips": 6047,
			"state": "CA",
			"area_name": "Merced County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 6049,
			"state": "CA",
			"area_name": "Modoc County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 6051,
			"state": "CA",
			"area_name": "Mono County",
			"bachelorsOrHigher": 33.3
		},
		{
			"fips": 6053,
			"state": "CA",
			"area_name": "Monterey County",
			"bachelorsOrHigher": 23.1
		},
		{
			"fips": 6055,
			"state": "CA",
			"area_name": "Napa County",
			"bachelorsOrHigher": 31.9
		},
		{
			"fips": 6057,
			"state": "CA",
			"area_name": "Nevada County",
			"bachelorsOrHigher": 32.8
		},
		{
			"fips": 6059,
			"state": "CA",
			"area_name": "Orange County",
			"bachelorsOrHigher": 37.3
		},
		{
			"fips": 6061,
			"state": "CA",
			"area_name": "Placer County",
			"bachelorsOrHigher": 35.7
		},
		{
			"fips": 6063,
			"state": "CA",
			"area_name": "Plumas County",
			"bachelorsOrHigher": 22.7
		},
		{
			"fips": 6065,
			"state": "CA",
			"area_name": "Riverside County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 6067,
			"state": "CA",
			"area_name": "Sacramento County",
			"bachelorsOrHigher": 28.2
		},
		{
			"fips": 6069,
			"state": "CA",
			"area_name": "San Benito County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 6071,
			"state": "CA",
			"area_name": "San Bernardino County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 6073,
			"state": "CA",
			"area_name": "San Diego County",
			"bachelorsOrHigher": 35.1
		},
		{
			"fips": 6075,
			"state": "CA",
			"area_name": "San Francisco County",
			"bachelorsOrHigher": 52.9
		},
		{
			"fips": 6077,
			"state": "CA",
			"area_name": "San Joaquin County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 6079,
			"state": "CA",
			"area_name": "San Luis Obispo County",
			"bachelorsOrHigher": 32.1
		},
		{
			"fips": 6081,
			"state": "CA",
			"area_name": "San Mateo County",
			"bachelorsOrHigher": 45
		},
		{
			"fips": 6083,
			"state": "CA",
			"area_name": "Santa Barbara County",
			"bachelorsOrHigher": 31.4
		},
		{
			"fips": 6085,
			"state": "CA",
			"area_name": "Santa Clara County",
			"bachelorsOrHigher": 47.3
		},
		{
			"fips": 6087,
			"state": "CA",
			"area_name": "Santa Cruz County",
			"bachelorsOrHigher": 37.5
		},
		{
			"fips": 6089,
			"state": "CA",
			"area_name": "Shasta County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 6091,
			"state": "CA",
			"area_name": "Sierra County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 6093,
			"state": "CA",
			"area_name": "Siskiyou County",
			"bachelorsOrHigher": 24
		},
		{
			"fips": 6095,
			"state": "CA",
			"area_name": "Solano County",
			"bachelorsOrHigher": 24.3
		},
		{
			"fips": 6097,
			"state": "CA",
			"area_name": "Sonoma County",
			"bachelorsOrHigher": 32.6
		},
		{
			"fips": 6099,
			"state": "CA",
			"area_name": "Stanislaus County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 6101,
			"state": "CA",
			"area_name": "Sutter County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 6103,
			"state": "CA",
			"area_name": "Tehama County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 6105,
			"state": "CA",
			"area_name": "Trinity County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 6107,
			"state": "CA",
			"area_name": "Tulare County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 6109,
			"state": "CA",
			"area_name": "Tuolumne County",
			"bachelorsOrHigher": 19.8
		},
		{
			"fips": 6111,
			"state": "CA",
			"area_name": "Ventura County",
			"bachelorsOrHigher": 31.6
		},
		{
			"fips": 6113,
			"state": "CA",
			"area_name": "Yolo County",
			"bachelorsOrHigher": 38.3
		},
		{
			"fips": 6115,
			"state": "CA",
			"area_name": "Yuba County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 8001,
			"state": "CO",
			"area_name": "Adams County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 8003,
			"state": "CO",
			"area_name": "Alamosa County",
			"bachelorsOrHigher": 24.1
		},
		{
			"fips": 8005,
			"state": "CO",
			"area_name": "Arapahoe County",
			"bachelorsOrHigher": 39.4
		},
		{
			"fips": 8007,
			"state": "CO",
			"area_name": "Archuleta County",
			"bachelorsOrHigher": 35.3
		},
		{
			"fips": 8009,
			"state": "CO",
			"area_name": "Baca County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 8011,
			"state": "CO",
			"area_name": "Bent County",
			"bachelorsOrHigher": 7.5
		},
		{
			"fips": 8013,
			"state": "CO",
			"area_name": "Boulder County",
			"bachelorsOrHigher": 58.2
		},
		{
			"fips": 8014,
			"state": "CO",
			"area_name": "Broomfield County",
			"bachelorsOrHigher": 49.5
		},
		{
			"fips": 8015,
			"state": "CO",
			"area_name": "Chaffee County",
			"bachelorsOrHigher": 34.2
		},
		{
			"fips": 8017,
			"state": "CO",
			"area_name": "Cheyenne County",
			"bachelorsOrHigher": 21.8
		},
		{
			"fips": 8019,
			"state": "CO",
			"area_name": "Clear Creek County",
			"bachelorsOrHigher": 40.8
		},
		{
			"fips": 8021,
			"state": "CO",
			"area_name": "Conejos County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 8023,
			"state": "CO",
			"area_name": "Costilla County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 8025,
			"state": "CO",
			"area_name": "Crowley County",
			"bachelorsOrHigher": 10.5
		},
		{
			"fips": 8027,
			"state": "CO",
			"area_name": "Custer County",
			"bachelorsOrHigher": 34.8
		},
		{
			"fips": 8029,
			"state": "CO",
			"area_name": "Delta County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 8031,
			"state": "CO",
			"area_name": "Denver County",
			"bachelorsOrHigher": 43.7
		},
		{
			"fips": 8033,
			"state": "CO",
			"area_name": "Dolores County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 8035,
			"state": "CO",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 55.9
		},
		{
			"fips": 8037,
			"state": "CO",
			"area_name": "Eagle County",
			"bachelorsOrHigher": 47.3
		},
		{
			"fips": 8039,
			"state": "CO",
			"area_name": "Elbert County",
			"bachelorsOrHigher": 29.5
		},
		{
			"fips": 8041,
			"state": "CO",
			"area_name": "El Paso County",
			"bachelorsOrHigher": 35.2
		},
		{
			"fips": 8043,
			"state": "CO",
			"area_name": "Fremont County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 8045,
			"state": "CO",
			"area_name": "Garfield County",
			"bachelorsOrHigher": 29.3
		},
		{
			"fips": 8047,
			"state": "CO",
			"area_name": "Gilpin County",
			"bachelorsOrHigher": 29.5
		},
		{
			"fips": 8049,
			"state": "CO",
			"area_name": "Grand County",
			"bachelorsOrHigher": 36.3
		},
		{
			"fips": 8051,
			"state": "CO",
			"area_name": "Gunnison County",
			"bachelorsOrHigher": 54.4
		},
		{
			"fips": 8053,
			"state": "CO",
			"area_name": "Hinsdale County",
			"bachelorsOrHigher": 41.3
		},
		{
			"fips": 8055,
			"state": "CO",
			"area_name": "Huerfano County",
			"bachelorsOrHigher": 28.9
		},
		{
			"fips": 8057,
			"state": "CO",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 8059,
			"state": "CO",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 41.1
		},
		{
			"fips": 8061,
			"state": "CO",
			"area_name": "Kiowa County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 8063,
			"state": "CO",
			"area_name": "Kit Carson County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 8065,
			"state": "CO",
			"area_name": "Lake County",
			"bachelorsOrHigher": 30.3
		},
		{
			"fips": 8067,
			"state": "CO",
			"area_name": "La Plata County",
			"bachelorsOrHigher": 43.4
		},
		{
			"fips": 8069,
			"state": "CO",
			"area_name": "Larimer County",
			"bachelorsOrHigher": 44.1
		},
		{
			"fips": 8071,
			"state": "CO",
			"area_name": "Las Animas County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 8073,
			"state": "CO",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 8075,
			"state": "CO",
			"area_name": "Logan County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 8077,
			"state": "CO",
			"area_name": "Mesa County",
			"bachelorsOrHigher": 25.2
		},
		{
			"fips": 8079,
			"state": "CO",
			"area_name": "Mineral County",
			"bachelorsOrHigher": 39.4
		},
		{
			"fips": 8081,
			"state": "CO",
			"area_name": "Moffat County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 8083,
			"state": "CO",
			"area_name": "Montezuma County",
			"bachelorsOrHigher": 26.4
		},
		{
			"fips": 8085,
			"state": "CO",
			"area_name": "Montrose County",
			"bachelorsOrHigher": 24.6
		},
		{
			"fips": 8087,
			"state": "CO",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 8089,
			"state": "CO",
			"area_name": "Otero County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 8091,
			"state": "CO",
			"area_name": "Ouray County",
			"bachelorsOrHigher": 50
		},
		{
			"fips": 8093,
			"state": "CO",
			"area_name": "Park County",
			"bachelorsOrHigher": 31.6
		},
		{
			"fips": 8095,
			"state": "CO",
			"area_name": "Phillips County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 8097,
			"state": "CO",
			"area_name": "Pitkin County",
			"bachelorsOrHigher": 56.4
		},
		{
			"fips": 8099,
			"state": "CO",
			"area_name": "Prowers County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 8101,
			"state": "CO",
			"area_name": "Pueblo County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 8103,
			"state": "CO",
			"area_name": "Rio Blanco County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 8105,
			"state": "CO",
			"area_name": "Rio Grande County",
			"bachelorsOrHigher": 20.9
		},
		{
			"fips": 8107,
			"state": "CO",
			"area_name": "Routt County",
			"bachelorsOrHigher": 48.7
		},
		{
			"fips": 8109,
			"state": "CO",
			"area_name": "Saguache County",
			"bachelorsOrHigher": 25.7
		},
		{
			"fips": 8111,
			"state": "CO",
			"area_name": "San Juan County",
			"bachelorsOrHigher": 27.1
		},
		{
			"fips": 8113,
			"state": "CO",
			"area_name": "San Miguel County",
			"bachelorsOrHigher": 54.4
		},
		{
			"fips": 8115,
			"state": "CO",
			"area_name": "Sedgwick County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 8117,
			"state": "CO",
			"area_name": "Summit County",
			"bachelorsOrHigher": 48.1
		},
		{
			"fips": 8119,
			"state": "CO",
			"area_name": "Teller County",
			"bachelorsOrHigher": 30.9
		},
		{
			"fips": 8121,
			"state": "CO",
			"area_name": "Washington County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 8123,
			"state": "CO",
			"area_name": "Weld County",
			"bachelorsOrHigher": 25.9
		},
		{
			"fips": 8125,
			"state": "CO",
			"area_name": "Yuma County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 9001,
			"state": "CT",
			"area_name": "Fairfield County",
			"bachelorsOrHigher": 45.4
		},
		{
			"fips": 9003,
			"state": "CT",
			"area_name": "Hartford County",
			"bachelorsOrHigher": 35.6
		},
		{
			"fips": 9005,
			"state": "CT",
			"area_name": "Litchfield County",
			"bachelorsOrHigher": 33.7
		},
		{
			"fips": 9007,
			"state": "CT",
			"area_name": "Middlesex County",
			"bachelorsOrHigher": 39.7
		},
		{
			"fips": 9009,
			"state": "CT",
			"area_name": "New Haven County",
			"bachelorsOrHigher": 33.4
		},
		{
			"fips": 9011,
			"state": "CT",
			"area_name": "New London County",
			"bachelorsOrHigher": 31.5
		},
		{
			"fips": 9013,
			"state": "CT",
			"area_name": "Tolland County",
			"bachelorsOrHigher": 36.8
		},
		{
			"fips": 9015,
			"state": "CT",
			"area_name": "Windham County",
			"bachelorsOrHigher": 22.9
		},
		{
			"fips": 10001,
			"state": "DE",
			"area_name": "Kent County",
			"bachelorsOrHigher": 22.7
		},
		{
			"fips": 10003,
			"state": "DE",
			"area_name": "New Castle County",
			"bachelorsOrHigher": 34.5
		},
		{
			"fips": 10005,
			"state": "DE",
			"area_name": "Sussex County",
			"bachelorsOrHigher": 21.9
		},
		{
			"fips": 11001,
			"state": "DC",
			"area_name": "District of Columbia",
			"bachelorsOrHigher": 53.4
		},
		{
			"fips": 12001,
			"state": "FL",
			"area_name": "Alachua County",
			"bachelorsOrHigher": 40.8
		},
		{
			"fips": 12003,
			"state": "FL",
			"area_name": "Baker County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 12005,
			"state": "FL",
			"area_name": "Bay County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 12007,
			"state": "FL",
			"area_name": "Bradford County",
			"bachelorsOrHigher": 10.4
		},
		{
			"fips": 12009,
			"state": "FL",
			"area_name": "Brevard County",
			"bachelorsOrHigher": 26.7
		},
		{
			"fips": 12011,
			"state": "FL",
			"area_name": "Broward County",
			"bachelorsOrHigher": 30.2
		},
		{
			"fips": 12013,
			"state": "FL",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 9.2
		},
		{
			"fips": 12015,
			"state": "FL",
			"area_name": "Charlotte County",
			"bachelorsOrHigher": 20.9
		},
		{
			"fips": 12017,
			"state": "FL",
			"area_name": "Citrus County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 12019,
			"state": "FL",
			"area_name": "Clay County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 12021,
			"state": "FL",
			"area_name": "Collier County",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 12023,
			"state": "FL",
			"area_name": "Columbia County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 12027,
			"state": "FL",
			"area_name": "DeSoto County",
			"bachelorsOrHigher": 9.9
		},
		{
			"fips": 12029,
			"state": "FL",
			"area_name": "Dixie County",
			"bachelorsOrHigher": 7.5
		},
		{
			"fips": 12031,
			"state": "FL",
			"area_name": "Duval County",
			"bachelorsOrHigher": 26.5
		},
		{
			"fips": 12033,
			"state": "FL",
			"area_name": "Escambia County",
			"bachelorsOrHigher": 23.9
		},
		{
			"fips": 12035,
			"state": "FL",
			"area_name": "Flagler County",
			"bachelorsOrHigher": 23.4
		},
		{
			"fips": 12037,
			"state": "FL",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 12039,
			"state": "FL",
			"area_name": "Gadsden County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 12041,
			"state": "FL",
			"area_name": "Gilchrist County",
			"bachelorsOrHigher": 11
		},
		{
			"fips": 12043,
			"state": "FL",
			"area_name": "Glades County",
			"bachelorsOrHigher": 10.3
		},
		{
			"fips": 12045,
			"state": "FL",
			"area_name": "Gulf County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 12047,
			"state": "FL",
			"area_name": "Hamilton County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 12049,
			"state": "FL",
			"area_name": "Hardee County",
			"bachelorsOrHigher": 10
		},
		{
			"fips": 12051,
			"state": "FL",
			"area_name": "Hendry County",
			"bachelorsOrHigher": 10.6
		},
		{
			"fips": 12053,
			"state": "FL",
			"area_name": "Hernando County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 12055,
			"state": "FL",
			"area_name": "Highlands County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 12057,
			"state": "FL",
			"area_name": "Hillsborough County",
			"bachelorsOrHigher": 29.8
		},
		{
			"fips": 12059,
			"state": "FL",
			"area_name": "Holmes County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 12061,
			"state": "FL",
			"area_name": "Indian River County",
			"bachelorsOrHigher": 26.7
		},
		{
			"fips": 12063,
			"state": "FL",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 12065,
			"state": "FL",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 12067,
			"state": "FL",
			"area_name": "Lafayette County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 12069,
			"state": "FL",
			"area_name": "Lake County",
			"bachelorsOrHigher": 21
		},
		{
			"fips": 12071,
			"state": "FL",
			"area_name": "Lee County",
			"bachelorsOrHigher": 25.3
		},
		{
			"fips": 12073,
			"state": "FL",
			"area_name": "Leon County",
			"bachelorsOrHigher": 44.3
		},
		{
			"fips": 12075,
			"state": "FL",
			"area_name": "Levy County",
			"bachelorsOrHigher": 10.5
		},
		{
			"fips": 12077,
			"state": "FL",
			"area_name": "Liberty County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 12079,
			"state": "FL",
			"area_name": "Madison County",
			"bachelorsOrHigher": 10.4
		},
		{
			"fips": 12081,
			"state": "FL",
			"area_name": "Manatee County",
			"bachelorsOrHigher": 27.5
		},
		{
			"fips": 12083,
			"state": "FL",
			"area_name": "Marion County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 12085,
			"state": "FL",
			"area_name": "Martin County",
			"bachelorsOrHigher": 31.2
		},
		{
			"fips": 12086,
			"state": "FL",
			"area_name": "Miami-Dade County",
			"bachelorsOrHigher": 26.4
		},
		{
			"fips": 12087,
			"state": "FL",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 29.7
		},
		{
			"fips": 12089,
			"state": "FL",
			"area_name": "Nassau County",
			"bachelorsOrHigher": 23
		},
		{
			"fips": 12091,
			"state": "FL",
			"area_name": "Okaloosa County",
			"bachelorsOrHigher": 28.1
		},
		{
			"fips": 12093,
			"state": "FL",
			"area_name": "Okeechobee County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 12095,
			"state": "FL",
			"area_name": "Orange County",
			"bachelorsOrHigher": 30.6
		},
		{
			"fips": 12097,
			"state": "FL",
			"area_name": "Osceola County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 12099,
			"state": "FL",
			"area_name": "Palm Beach County",
			"bachelorsOrHigher": 32.8
		},
		{
			"fips": 12101,
			"state": "FL",
			"area_name": "Pasco County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 12103,
			"state": "FL",
			"area_name": "Pinellas County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 12105,
			"state": "FL",
			"area_name": "Polk County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 12107,
			"state": "FL",
			"area_name": "Putnam County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 12109,
			"state": "FL",
			"area_name": "St. Johns County",
			"bachelorsOrHigher": 41.4
		},
		{
			"fips": 12111,
			"state": "FL",
			"area_name": "St. Lucie County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 12113,
			"state": "FL",
			"area_name": "Santa Rosa County",
			"bachelorsOrHigher": 26.5
		},
		{
			"fips": 12115,
			"state": "FL",
			"area_name": "Sarasota County",
			"bachelorsOrHigher": 31.1
		},
		{
			"fips": 12117,
			"state": "FL",
			"area_name": "Seminole County",
			"bachelorsOrHigher": 35
		},
		{
			"fips": 12119,
			"state": "FL",
			"area_name": "Sumter County",
			"bachelorsOrHigher": 26.4
		},
		{
			"fips": 12121,
			"state": "FL",
			"area_name": "Suwannee County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 12123,
			"state": "FL",
			"area_name": "Taylor County",
			"bachelorsOrHigher": 10
		},
		{
			"fips": 12125,
			"state": "FL",
			"area_name": "Union County",
			"bachelorsOrHigher": 8.6
		},
		{
			"fips": 12127,
			"state": "FL",
			"area_name": "Volusia County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 12129,
			"state": "FL",
			"area_name": "Wakulla County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 12131,
			"state": "FL",
			"area_name": "Walton County",
			"bachelorsOrHigher": 25.1
		},
		{
			"fips": 12133,
			"state": "FL",
			"area_name": "Washington County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 13001,
			"state": "GA",
			"area_name": "Appling County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 13003,
			"state": "GA",
			"area_name": "Atkinson County",
			"bachelorsOrHigher": 7.7
		},
		{
			"fips": 13005,
			"state": "GA",
			"area_name": "Bacon County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 13007,
			"state": "GA",
			"area_name": "Baker County",
			"bachelorsOrHigher": 11
		},
		{
			"fips": 13009,
			"state": "GA",
			"area_name": "Baldwin County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 13011,
			"state": "GA",
			"area_name": "Banks County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 13013,
			"state": "GA",
			"area_name": "Barrow County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 13015,
			"state": "GA",
			"area_name": "Bartow County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 13017,
			"state": "GA",
			"area_name": "Ben Hill County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 13019,
			"state": "GA",
			"area_name": "Berrien County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 13021,
			"state": "GA",
			"area_name": "Bibb County",
			"bachelorsOrHigher": 23.4
		},
		{
			"fips": 13023,
			"state": "GA",
			"area_name": "Bleckley County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 13025,
			"state": "GA",
			"area_name": "Brantley County",
			"bachelorsOrHigher": 6.9
		},
		{
			"fips": 13027,
			"state": "GA",
			"area_name": "Brooks County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 13029,
			"state": "GA",
			"area_name": "Bryan County",
			"bachelorsOrHigher": 32.4
		},
		{
			"fips": 13031,
			"state": "GA",
			"area_name": "Bulloch County",
			"bachelorsOrHigher": 28
		},
		{
			"fips": 13033,
			"state": "GA",
			"area_name": "Burke County",
			"bachelorsOrHigher": 10
		},
		{
			"fips": 13035,
			"state": "GA",
			"area_name": "Butts County",
			"bachelorsOrHigher": 9.7
		},
		{
			"fips": 13037,
			"state": "GA",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 9.4
		},
		{
			"fips": 13039,
			"state": "GA",
			"area_name": "Camden County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 13043,
			"state": "GA",
			"area_name": "Candler County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 13045,
			"state": "GA",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 13047,
			"state": "GA",
			"area_name": "Catoosa County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 13049,
			"state": "GA",
			"area_name": "Charlton County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 13051,
			"state": "GA",
			"area_name": "Chatham County",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 13053,
			"state": "GA",
			"area_name": "Chattahoochee County",
			"bachelorsOrHigher": 31.5
		},
		{
			"fips": 13055,
			"state": "GA",
			"area_name": "Chattooga County",
			"bachelorsOrHigher": 8.5
		},
		{
			"fips": 13057,
			"state": "GA",
			"area_name": "Cherokee County",
			"bachelorsOrHigher": 34.3
		},
		{
			"fips": 13059,
			"state": "GA",
			"area_name": "Clarke County",
			"bachelorsOrHigher": 39.3
		},
		{
			"fips": 13061,
			"state": "GA",
			"area_name": "Clay County",
			"bachelorsOrHigher": 6.9
		},
		{
			"fips": 13063,
			"state": "GA",
			"area_name": "Clayton County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 13065,
			"state": "GA",
			"area_name": "Clinch County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 13067,
			"state": "GA",
			"area_name": "Cobb County",
			"bachelorsOrHigher": 43.8
		},
		{
			"fips": 13069,
			"state": "GA",
			"area_name": "Coffee County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 13071,
			"state": "GA",
			"area_name": "Colquitt County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 13073,
			"state": "GA",
			"area_name": "Columbia County",
			"bachelorsOrHigher": 34.2
		},
		{
			"fips": 13075,
			"state": "GA",
			"area_name": "Cook County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 13077,
			"state": "GA",
			"area_name": "Coweta County",
			"bachelorsOrHigher": 26.6
		},
		{
			"fips": 13079,
			"state": "GA",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 13081,
			"state": "GA",
			"area_name": "Crisp County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 13083,
			"state": "GA",
			"area_name": "Dade County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 13085,
			"state": "GA",
			"area_name": "Dawson County",
			"bachelorsOrHigher": 26.3
		},
		{
			"fips": 13087,
			"state": "GA",
			"area_name": "Decatur County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 13089,
			"state": "GA",
			"area_name": "DeKalb County",
			"bachelorsOrHigher": 40.3
		},
		{
			"fips": 13091,
			"state": "GA",
			"area_name": "Dodge County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 13093,
			"state": "GA",
			"area_name": "Dooly County",
			"bachelorsOrHigher": 9
		},
		{
			"fips": 13095,
			"state": "GA",
			"area_name": "Dougherty County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 13097,
			"state": "GA",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 24.5
		},
		{
			"fips": 13099,
			"state": "GA",
			"area_name": "Early County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 13101,
			"state": "GA",
			"area_name": "Echols County",
			"bachelorsOrHigher": 7.5
		},
		{
			"fips": 13103,
			"state": "GA",
			"area_name": "Effingham County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 13105,
			"state": "GA",
			"area_name": "Elbert County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 13107,
			"state": "GA",
			"area_name": "Emanuel County",
			"bachelorsOrHigher": 10
		},
		{
			"fips": 13109,
			"state": "GA",
			"area_name": "Evans County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 13111,
			"state": "GA",
			"area_name": "Fannin County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 13113,
			"state": "GA",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 43.3
		},
		{
			"fips": 13115,
			"state": "GA",
			"area_name": "Floyd County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 13117,
			"state": "GA",
			"area_name": "Forsyth County",
			"bachelorsOrHigher": 44.6
		},
		{
			"fips": 13119,
			"state": "GA",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 13121,
			"state": "GA",
			"area_name": "Fulton County",
			"bachelorsOrHigher": 48.6
		},
		{
			"fips": 13123,
			"state": "GA",
			"area_name": "Gilmer County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 13125,
			"state": "GA",
			"area_name": "Glascock County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 13127,
			"state": "GA",
			"area_name": "Glynn County",
			"bachelorsOrHigher": 26.4
		},
		{
			"fips": 13129,
			"state": "GA",
			"area_name": "Gordon County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 13131,
			"state": "GA",
			"area_name": "Grady County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 13133,
			"state": "GA",
			"area_name": "Greene County",
			"bachelorsOrHigher": 24.4
		},
		{
			"fips": 13135,
			"state": "GA",
			"area_name": "Gwinnett County",
			"bachelorsOrHigher": 34.4
		},
		{
			"fips": 13137,
			"state": "GA",
			"area_name": "Habersham County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 13139,
			"state": "GA",
			"area_name": "Hall County",
			"bachelorsOrHigher": 22.8
		},
		{
			"fips": 13141,
			"state": "GA",
			"area_name": "Hancock County",
			"bachelorsOrHigher": 10.6
		},
		{
			"fips": 13143,
			"state": "GA",
			"area_name": "Haralson County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 13145,
			"state": "GA",
			"area_name": "Harris County",
			"bachelorsOrHigher": 27.8
		},
		{
			"fips": 13147,
			"state": "GA",
			"area_name": "Hart County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 13149,
			"state": "GA",
			"area_name": "Heard County",
			"bachelorsOrHigher": 10.4
		},
		{
			"fips": 13151,
			"state": "GA",
			"area_name": "Henry County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 13153,
			"state": "GA",
			"area_name": "Houston County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 13155,
			"state": "GA",
			"area_name": "Irwin County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 13157,
			"state": "GA",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 13159,
			"state": "GA",
			"area_name": "Jasper County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 13161,
			"state": "GA",
			"area_name": "Jeff Davis County",
			"bachelorsOrHigher": 9
		},
		{
			"fips": 13163,
			"state": "GA",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 9.2
		},
		{
			"fips": 13165,
			"state": "GA",
			"area_name": "Jenkins County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 13167,
			"state": "GA",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 9.6
		},
		{
			"fips": 13169,
			"state": "GA",
			"area_name": "Jones County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 13171,
			"state": "GA",
			"area_name": "Lamar County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 13173,
			"state": "GA",
			"area_name": "Lanier County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 13175,
			"state": "GA",
			"area_name": "Laurens County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 13177,
			"state": "GA",
			"area_name": "Lee County",
			"bachelorsOrHigher": 22.3
		},
		{
			"fips": 13179,
			"state": "GA",
			"area_name": "Liberty County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 13181,
			"state": "GA",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 13183,
			"state": "GA",
			"area_name": "Long County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 13185,
			"state": "GA",
			"area_name": "Lowndes County",
			"bachelorsOrHigher": 23
		},
		{
			"fips": 13187,
			"state": "GA",
			"area_name": "Lumpkin County",
			"bachelorsOrHigher": 27.5
		},
		{
			"fips": 13189,
			"state": "GA",
			"area_name": "McDuffie County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 13191,
			"state": "GA",
			"area_name": "McIntosh County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 13193,
			"state": "GA",
			"area_name": "Macon County",
			"bachelorsOrHigher": 8.7
		},
		{
			"fips": 13195,
			"state": "GA",
			"area_name": "Madison County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 13197,
			"state": "GA",
			"area_name": "Marion County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 13199,
			"state": "GA",
			"area_name": "Meriwether County",
			"bachelorsOrHigher": 9.3
		},
		{
			"fips": 13201,
			"state": "GA",
			"area_name": "Miller County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 13205,
			"state": "GA",
			"area_name": "Mitchell County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 13207,
			"state": "GA",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 19.8
		},
		{
			"fips": 13209,
			"state": "GA",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 13211,
			"state": "GA",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 22.3
		},
		{
			"fips": 13213,
			"state": "GA",
			"area_name": "Murray County",
			"bachelorsOrHigher": 8.6
		},
		{
			"fips": 13215,
			"state": "GA",
			"area_name": "Muscogee County",
			"bachelorsOrHigher": 23.7
		},
		{
			"fips": 13217,
			"state": "GA",
			"area_name": "Newton County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 13219,
			"state": "GA",
			"area_name": "Oconee County",
			"bachelorsOrHigher": 44.6
		},
		{
			"fips": 13221,
			"state": "GA",
			"area_name": "Oglethorpe County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 13223,
			"state": "GA",
			"area_name": "Paulding County",
			"bachelorsOrHigher": 23.3
		},
		{
			"fips": 13225,
			"state": "GA",
			"area_name": "Peach County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 13227,
			"state": "GA",
			"area_name": "Pickens County",
			"bachelorsOrHigher": 23.7
		},
		{
			"fips": 13229,
			"state": "GA",
			"area_name": "Pierce County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 13231,
			"state": "GA",
			"area_name": "Pike County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 13233,
			"state": "GA",
			"area_name": "Polk County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 13235,
			"state": "GA",
			"area_name": "Pulaski County",
			"bachelorsOrHigher": 11
		},
		{
			"fips": 13237,
			"state": "GA",
			"area_name": "Putnam County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 13239,
			"state": "GA",
			"area_name": "Quitman County",
			"bachelorsOrHigher": 7.2
		},
		{
			"fips": 13241,
			"state": "GA",
			"area_name": "Rabun County",
			"bachelorsOrHigher": 25.8
		},
		{
			"fips": 13243,
			"state": "GA",
			"area_name": "Randolph County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 13245,
			"state": "GA",
			"area_name": "Richmond County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 13247,
			"state": "GA",
			"area_name": "Rockdale County",
			"bachelorsOrHigher": 25.4
		},
		{
			"fips": 13249,
			"state": "GA",
			"area_name": "Schley County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 13251,
			"state": "GA",
			"area_name": "Screven County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 13253,
			"state": "GA",
			"area_name": "Seminole County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 13255,
			"state": "GA",
			"area_name": "Spalding County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 13257,
			"state": "GA",
			"area_name": "Stephens County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 13259,
			"state": "GA",
			"area_name": "Stewart County",
			"bachelorsOrHigher": 9.7
		},
		{
			"fips": 13261,
			"state": "GA",
			"area_name": "Sumter County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 13263,
			"state": "GA",
			"area_name": "Talbot County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 13265,
			"state": "GA",
			"area_name": "Taliaferro County",
			"bachelorsOrHigher": 8.3
		},
		{
			"fips": 13267,
			"state": "GA",
			"area_name": "Tattnall County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 13269,
			"state": "GA",
			"area_name": "Taylor County",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 13271,
			"state": "GA",
			"area_name": "Telfair County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 13273,
			"state": "GA",
			"area_name": "Terrell County",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 13275,
			"state": "GA",
			"area_name": "Thomas County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 13277,
			"state": "GA",
			"area_name": "Tift County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 13279,
			"state": "GA",
			"area_name": "Toombs County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 13281,
			"state": "GA",
			"area_name": "Towns County",
			"bachelorsOrHigher": 22.2
		},
		{
			"fips": 13283,
			"state": "GA",
			"area_name": "Treutlen County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 13285,
			"state": "GA",
			"area_name": "Troup County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 13287,
			"state": "GA",
			"area_name": "Turner County",
			"bachelorsOrHigher": 10.4
		},
		{
			"fips": 13289,
			"state": "GA",
			"area_name": "Twiggs County",
			"bachelorsOrHigher": 9.6
		},
		{
			"fips": 13291,
			"state": "GA",
			"area_name": "Union County",
			"bachelorsOrHigher": 20.6
		},
		{
			"fips": 13293,
			"state": "GA",
			"area_name": "Upson County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 13295,
			"state": "GA",
			"area_name": "Walker County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 13297,
			"state": "GA",
			"area_name": "Walton County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 13299,
			"state": "GA",
			"area_name": "Ware County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 13301,
			"state": "GA",
			"area_name": "Warren County",
			"bachelorsOrHigher": 8
		},
		{
			"fips": 13303,
			"state": "GA",
			"area_name": "Washington County",
			"bachelorsOrHigher": 11.3
		},
		{
			"fips": 13305,
			"state": "GA",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 13307,
			"state": "GA",
			"area_name": "Webster County",
			"bachelorsOrHigher": 6
		},
		{
			"fips": 13309,
			"state": "GA",
			"area_name": "Wheeler County",
			"bachelorsOrHigher": 8.1
		},
		{
			"fips": 13311,
			"state": "GA",
			"area_name": "White County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 13313,
			"state": "GA",
			"area_name": "Whitfield County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 13315,
			"state": "GA",
			"area_name": "Wilcox County",
			"bachelorsOrHigher": 8.7
		},
		{
			"fips": 13317,
			"state": "GA",
			"area_name": "Wilkes County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 13319,
			"state": "GA",
			"area_name": "Wilkinson County",
			"bachelorsOrHigher": 8.2
		},
		{
			"fips": 13321,
			"state": "GA",
			"area_name": "Worth County",
			"bachelorsOrHigher": 7.8
		},
		{
			"fips": 15001,
			"state": "HI",
			"area_name": "Hawaii County",
			"bachelorsOrHigher": 25.9
		},
		{
			"fips": 15003,
			"state": "HI",
			"area_name": "Honolulu County",
			"bachelorsOrHigher": 32.5
		},
		{
			"fips": 15005,
			"state": "HI",
			"area_name": "Kalawao County",
			"bachelorsOrHigher": 43.3
		},
		{
			"fips": 15007,
			"state": "HI",
			"area_name": "Kauai County",
			"bachelorsOrHigher": 26.9
		},
		{
			"fips": 15009,
			"state": "HI",
			"area_name": "Maui County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 16001,
			"state": "ID",
			"area_name": "Ada County",
			"bachelorsOrHigher": 36.4
		},
		{
			"fips": 16003,
			"state": "ID",
			"area_name": "Adams County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 16005,
			"state": "ID",
			"area_name": "Bannock County",
			"bachelorsOrHigher": 27.3
		},
		{
			"fips": 16007,
			"state": "ID",
			"area_name": "Bear Lake County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 16009,
			"state": "ID",
			"area_name": "Benewah County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 16011,
			"state": "ID",
			"area_name": "Bingham County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 16013,
			"state": "ID",
			"area_name": "Blaine County",
			"bachelorsOrHigher": 44.8
		},
		{
			"fips": 16015,
			"state": "ID",
			"area_name": "Boise County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 16017,
			"state": "ID",
			"area_name": "Bonner County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 16019,
			"state": "ID",
			"area_name": "Bonneville County",
			"bachelorsOrHigher": 26.4
		},
		{
			"fips": 16021,
			"state": "ID",
			"area_name": "Boundary County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 16023,
			"state": "ID",
			"area_name": "Butte County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 16025,
			"state": "ID",
			"area_name": "Camas County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 16027,
			"state": "ID",
			"area_name": "Canyon County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 16029,
			"state": "ID",
			"area_name": "Caribou County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 16031,
			"state": "ID",
			"area_name": "Cassia County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 16033,
			"state": "ID",
			"area_name": "Clark County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 16035,
			"state": "ID",
			"area_name": "Clearwater County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 16037,
			"state": "ID",
			"area_name": "Custer County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 16039,
			"state": "ID",
			"area_name": "Elmore County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 16041,
			"state": "ID",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 16043,
			"state": "ID",
			"area_name": "Fremont County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 16045,
			"state": "ID",
			"area_name": "Gem County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 16047,
			"state": "ID",
			"area_name": "Gooding County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 16049,
			"state": "ID",
			"area_name": "Idaho County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 16051,
			"state": "ID",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 21
		},
		{
			"fips": 16053,
			"state": "ID",
			"area_name": "Jerome County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 16055,
			"state": "ID",
			"area_name": "Kootenai County",
			"bachelorsOrHigher": 23.1
		},
		{
			"fips": 16057,
			"state": "ID",
			"area_name": "Latah County",
			"bachelorsOrHigher": 44
		},
		{
			"fips": 16059,
			"state": "ID",
			"area_name": "Lemhi County",
			"bachelorsOrHigher": 22.9
		},
		{
			"fips": 16061,
			"state": "ID",
			"area_name": "Lewis County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 16063,
			"state": "ID",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 11.3
		},
		{
			"fips": 16065,
			"state": "ID",
			"area_name": "Madison County",
			"bachelorsOrHigher": 34.4
		},
		{
			"fips": 16067,
			"state": "ID",
			"area_name": "Minidoka County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 16069,
			"state": "ID",
			"area_name": "Nez Perce County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 16071,
			"state": "ID",
			"area_name": "Oneida County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 16073,
			"state": "ID",
			"area_name": "Owyhee County",
			"bachelorsOrHigher": 9
		},
		{
			"fips": 16075,
			"state": "ID",
			"area_name": "Payette County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 16077,
			"state": "ID",
			"area_name": "Power County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 16079,
			"state": "ID",
			"area_name": "Shoshone County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 16081,
			"state": "ID",
			"area_name": "Teton County",
			"bachelorsOrHigher": 38.2
		},
		{
			"fips": 16083,
			"state": "ID",
			"area_name": "Twin Falls County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 16085,
			"state": "ID",
			"area_name": "Valley County",
			"bachelorsOrHigher": 34
		},
		{
			"fips": 16087,
			"state": "ID",
			"area_name": "Washington County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 17001,
			"state": "IL",
			"area_name": "Adams County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 17003,
			"state": "IL",
			"area_name": "Alexander County",
			"bachelorsOrHigher": 7.7
		},
		{
			"fips": 17005,
			"state": "IL",
			"area_name": "Bond County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 17007,
			"state": "IL",
			"area_name": "Boone County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 17009,
			"state": "IL",
			"area_name": "Brown County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 17011,
			"state": "IL",
			"area_name": "Bureau County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 17013,
			"state": "IL",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 17015,
			"state": "IL",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 17017,
			"state": "IL",
			"area_name": "Cass County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 17019,
			"state": "IL",
			"area_name": "Champaign County",
			"bachelorsOrHigher": 42.5
		},
		{
			"fips": 17021,
			"state": "IL",
			"area_name": "Christian County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 17023,
			"state": "IL",
			"area_name": "Clark County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 17025,
			"state": "IL",
			"area_name": "Clay County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 17027,
			"state": "IL",
			"area_name": "Clinton County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 17029,
			"state": "IL",
			"area_name": "Coles County",
			"bachelorsOrHigher": 24
		},
		{
			"fips": 17031,
			"state": "IL",
			"area_name": "Cook County",
			"bachelorsOrHigher": 35.3
		},
		{
			"fips": 17033,
			"state": "IL",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 17035,
			"state": "IL",
			"area_name": "Cumberland County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 17037,
			"state": "IL",
			"area_name": "DeKalb County",
			"bachelorsOrHigher": 29.9
		},
		{
			"fips": 17039,
			"state": "IL",
			"area_name": "De Witt County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 17041,
			"state": "IL",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 17043,
			"state": "IL",
			"area_name": "DuPage County",
			"bachelorsOrHigher": 46.7
		},
		{
			"fips": 17045,
			"state": "IL",
			"area_name": "Edgar County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 17047,
			"state": "IL",
			"area_name": "Edwards County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 17049,
			"state": "IL",
			"area_name": "Effingham County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 17051,
			"state": "IL",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 17053,
			"state": "IL",
			"area_name": "Ford County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 17055,
			"state": "IL",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 17057,
			"state": "IL",
			"area_name": "Fulton County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 17059,
			"state": "IL",
			"area_name": "Gallatin County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 17061,
			"state": "IL",
			"area_name": "Greene County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 17063,
			"state": "IL",
			"area_name": "Grundy County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 17065,
			"state": "IL",
			"area_name": "Hamilton County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 17067,
			"state": "IL",
			"area_name": "Hancock County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 17069,
			"state": "IL",
			"area_name": "Hardin County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 17071,
			"state": "IL",
			"area_name": "Henderson County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 17073,
			"state": "IL",
			"area_name": "Henry County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 17075,
			"state": "IL",
			"area_name": "Iroquois County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 17077,
			"state": "IL",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 33.8
		},
		{
			"fips": 17079,
			"state": "IL",
			"area_name": "Jasper County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 17081,
			"state": "IL",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 17083,
			"state": "IL",
			"area_name": "Jersey County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 17085,
			"state": "IL",
			"area_name": "Jo Daviess County",
			"bachelorsOrHigher": 23.5
		},
		{
			"fips": 17087,
			"state": "IL",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 17089,
			"state": "IL",
			"area_name": "Kane County",
			"bachelorsOrHigher": 31.8
		},
		{
			"fips": 17091,
			"state": "IL",
			"area_name": "Kankakee County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 17093,
			"state": "IL",
			"area_name": "Kendall County",
			"bachelorsOrHigher": 34.3
		},
		{
			"fips": 17095,
			"state": "IL",
			"area_name": "Knox County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 17097,
			"state": "IL",
			"area_name": "Lake County",
			"bachelorsOrHigher": 42.7
		},
		{
			"fips": 17099,
			"state": "IL",
			"area_name": "La Salle County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 17101,
			"state": "IL",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 9.3
		},
		{
			"fips": 17103,
			"state": "IL",
			"area_name": "Lee County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 17105,
			"state": "IL",
			"area_name": "Livingston County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 17107,
			"state": "IL",
			"area_name": "Logan County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 17109,
			"state": "IL",
			"area_name": "McDonough County",
			"bachelorsOrHigher": 33.5
		},
		{
			"fips": 17111,
			"state": "IL",
			"area_name": "McHenry County",
			"bachelorsOrHigher": 32.2
		},
		{
			"fips": 17113,
			"state": "IL",
			"area_name": "McLean County",
			"bachelorsOrHigher": 43.4
		},
		{
			"fips": 17115,
			"state": "IL",
			"area_name": "Macon County",
			"bachelorsOrHigher": 23.1
		},
		{
			"fips": 17117,
			"state": "IL",
			"area_name": "Macoupin County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 17119,
			"state": "IL",
			"area_name": "Madison County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 17121,
			"state": "IL",
			"area_name": "Marion County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 17123,
			"state": "IL",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 17125,
			"state": "IL",
			"area_name": "Mason County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 17127,
			"state": "IL",
			"area_name": "Massac County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 17129,
			"state": "IL",
			"area_name": "Menard County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 17131,
			"state": "IL",
			"area_name": "Mercer County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 17133,
			"state": "IL",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 17135,
			"state": "IL",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 17137,
			"state": "IL",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 17139,
			"state": "IL",
			"area_name": "Moultrie County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 17141,
			"state": "IL",
			"area_name": "Ogle County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 17143,
			"state": "IL",
			"area_name": "Peoria County",
			"bachelorsOrHigher": 29.3
		},
		{
			"fips": 17145,
			"state": "IL",
			"area_name": "Perry County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 17147,
			"state": "IL",
			"area_name": "Piatt County",
			"bachelorsOrHigher": 26.6
		},
		{
			"fips": 17149,
			"state": "IL",
			"area_name": "Pike County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 17151,
			"state": "IL",
			"area_name": "Pope County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 17153,
			"state": "IL",
			"area_name": "Pulaski County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 17155,
			"state": "IL",
			"area_name": "Putnam County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 17157,
			"state": "IL",
			"area_name": "Randolph County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 17159,
			"state": "IL",
			"area_name": "Richland County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 17161,
			"state": "IL",
			"area_name": "Rock Island County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 17163,
			"state": "IL",
			"area_name": "St. Clair County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 17165,
			"state": "IL",
			"area_name": "Saline County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 17167,
			"state": "IL",
			"area_name": "Sangamon County",
			"bachelorsOrHigher": 33
		},
		{
			"fips": 17169,
			"state": "IL",
			"area_name": "Schuyler County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 17171,
			"state": "IL",
			"area_name": "Scott County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 17173,
			"state": "IL",
			"area_name": "Shelby County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 17175,
			"state": "IL",
			"area_name": "Stark County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 17177,
			"state": "IL",
			"area_name": "Stephenson County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 17179,
			"state": "IL",
			"area_name": "Tazewell County",
			"bachelorsOrHigher": 24.6
		},
		{
			"fips": 17181,
			"state": "IL",
			"area_name": "Union County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 17183,
			"state": "IL",
			"area_name": "Vermilion County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 17185,
			"state": "IL",
			"area_name": "Wabash County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 17187,
			"state": "IL",
			"area_name": "Warren County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 17189,
			"state": "IL",
			"area_name": "Washington County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 17191,
			"state": "IL",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 17193,
			"state": "IL",
			"area_name": "White County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 17195,
			"state": "IL",
			"area_name": "Whiteside County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 17197,
			"state": "IL",
			"area_name": "Will County",
			"bachelorsOrHigher": 32.6
		},
		{
			"fips": 17199,
			"state": "IL",
			"area_name": "Williamson County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 17201,
			"state": "IL",
			"area_name": "Winnebago County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 17203,
			"state": "IL",
			"area_name": "Woodford County",
			"bachelorsOrHigher": 27.9
		},
		{
			"fips": 18001,
			"state": "IN",
			"area_name": "Adams County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 18003,
			"state": "IN",
			"area_name": "Allen County",
			"bachelorsOrHigher": 26.6
		},
		{
			"fips": 18005,
			"state": "IN",
			"area_name": "Bartholomew County",
			"bachelorsOrHigher": 27.9
		},
		{
			"fips": 18007,
			"state": "IN",
			"area_name": "Benton County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 18009,
			"state": "IN",
			"area_name": "Blackford County",
			"bachelorsOrHigher": 10.5
		},
		{
			"fips": 18011,
			"state": "IN",
			"area_name": "Boone County",
			"bachelorsOrHigher": 42.5
		},
		{
			"fips": 18013,
			"state": "IN",
			"area_name": "Brown County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 18015,
			"state": "IN",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 18017,
			"state": "IN",
			"area_name": "Cass County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 18019,
			"state": "IN",
			"area_name": "Clark County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 18021,
			"state": "IN",
			"area_name": "Clay County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 18023,
			"state": "IN",
			"area_name": "Clinton County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 18025,
			"state": "IN",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 18027,
			"state": "IN",
			"area_name": "Daviess County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 18029,
			"state": "IN",
			"area_name": "Dearborn County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 18031,
			"state": "IN",
			"area_name": "Decatur County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 18033,
			"state": "IN",
			"area_name": "DeKalb County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 18035,
			"state": "IN",
			"area_name": "Delaware County",
			"bachelorsOrHigher": 23.3
		},
		{
			"fips": 18037,
			"state": "IN",
			"area_name": "Dubois County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 18039,
			"state": "IN",
			"area_name": "Elkhart County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 18041,
			"state": "IN",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 18043,
			"state": "IN",
			"area_name": "Floyd County",
			"bachelorsOrHigher": 24.3
		},
		{
			"fips": 18045,
			"state": "IN",
			"area_name": "Fountain County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 18047,
			"state": "IN",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 18049,
			"state": "IN",
			"area_name": "Fulton County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 18051,
			"state": "IN",
			"area_name": "Gibson County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 18053,
			"state": "IN",
			"area_name": "Grant County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 18055,
			"state": "IN",
			"area_name": "Greene County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 18057,
			"state": "IN",
			"area_name": "Hamilton County",
			"bachelorsOrHigher": 55.6
		},
		{
			"fips": 18059,
			"state": "IN",
			"area_name": "Hancock County",
			"bachelorsOrHigher": 26.7
		},
		{
			"fips": 18061,
			"state": "IN",
			"area_name": "Harrison County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 18063,
			"state": "IN",
			"area_name": "Hendricks County",
			"bachelorsOrHigher": 32.1
		},
		{
			"fips": 18065,
			"state": "IN",
			"area_name": "Henry County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 18067,
			"state": "IN",
			"area_name": "Howard County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 18069,
			"state": "IN",
			"area_name": "Huntington County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 18071,
			"state": "IN",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 18073,
			"state": "IN",
			"area_name": "Jasper County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 18075,
			"state": "IN",
			"area_name": "Jay County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 18077,
			"state": "IN",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 18079,
			"state": "IN",
			"area_name": "Jennings County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 18081,
			"state": "IN",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 27.3
		},
		{
			"fips": 18083,
			"state": "IN",
			"area_name": "Knox County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 18085,
			"state": "IN",
			"area_name": "Kosciusko County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 18087,
			"state": "IN",
			"area_name": "LaGrange County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 18089,
			"state": "IN",
			"area_name": "Lake County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 18091,
			"state": "IN",
			"area_name": "LaPorte County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 18093,
			"state": "IN",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 18095,
			"state": "IN",
			"area_name": "Madison County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 18097,
			"state": "IN",
			"area_name": "Marion County",
			"bachelorsOrHigher": 27.7
		},
		{
			"fips": 18099,
			"state": "IN",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 18101,
			"state": "IN",
			"area_name": "Martin County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 18103,
			"state": "IN",
			"area_name": "Miami County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 18105,
			"state": "IN",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 44.2
		},
		{
			"fips": 18107,
			"state": "IN",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 18109,
			"state": "IN",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 18111,
			"state": "IN",
			"area_name": "Newton County",
			"bachelorsOrHigher": 9.1
		},
		{
			"fips": 18113,
			"state": "IN",
			"area_name": "Noble County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 18115,
			"state": "IN",
			"area_name": "Ohio County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 18117,
			"state": "IN",
			"area_name": "Orange County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 18119,
			"state": "IN",
			"area_name": "Owen County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 18121,
			"state": "IN",
			"area_name": "Parke County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 18123,
			"state": "IN",
			"area_name": "Perry County",
			"bachelorsOrHigher": 10.4
		},
		{
			"fips": 18125,
			"state": "IN",
			"area_name": "Pike County",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 18127,
			"state": "IN",
			"area_name": "Porter County",
			"bachelorsOrHigher": 26.4
		},
		{
			"fips": 18129,
			"state": "IN",
			"area_name": "Posey County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 18131,
			"state": "IN",
			"area_name": "Pulaski County",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 18133,
			"state": "IN",
			"area_name": "Putnam County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 18135,
			"state": "IN",
			"area_name": "Randolph County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 18137,
			"state": "IN",
			"area_name": "Ripley County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 18139,
			"state": "IN",
			"area_name": "Rush County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 18141,
			"state": "IN",
			"area_name": "St. Joseph County",
			"bachelorsOrHigher": 27.2
		},
		{
			"fips": 18143,
			"state": "IN",
			"area_name": "Scott County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 18145,
			"state": "IN",
			"area_name": "Shelby County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 18147,
			"state": "IN",
			"area_name": "Spencer County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 18149,
			"state": "IN",
			"area_name": "Starke County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 18151,
			"state": "IN",
			"area_name": "Steuben County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 18153,
			"state": "IN",
			"area_name": "Sullivan County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 18155,
			"state": "IN",
			"area_name": "Switzerland County",
			"bachelorsOrHigher": 8.7
		},
		{
			"fips": 18157,
			"state": "IN",
			"area_name": "Tippecanoe County",
			"bachelorsOrHigher": 35.2
		},
		{
			"fips": 18159,
			"state": "IN",
			"area_name": "Tipton County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 18161,
			"state": "IN",
			"area_name": "Union County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 18163,
			"state": "IN",
			"area_name": "Vanderburgh County",
			"bachelorsOrHigher": 23.5
		},
		{
			"fips": 18165,
			"state": "IN",
			"area_name": "Vermillion County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 18167,
			"state": "IN",
			"area_name": "Vigo County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 18169,
			"state": "IN",
			"area_name": "Wabash County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 18171,
			"state": "IN",
			"area_name": "Warren County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 18173,
			"state": "IN",
			"area_name": "Warrick County",
			"bachelorsOrHigher": 26.8
		},
		{
			"fips": 18175,
			"state": "IN",
			"area_name": "Washington County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 18177,
			"state": "IN",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 18179,
			"state": "IN",
			"area_name": "Wells County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 18181,
			"state": "IN",
			"area_name": "White County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 18183,
			"state": "IN",
			"area_name": "Whitley County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 19001,
			"state": "IA",
			"area_name": "Adair County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 19003,
			"state": "IA",
			"area_name": "Adams County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 19005,
			"state": "IA",
			"area_name": "Allamakee County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 19007,
			"state": "IA",
			"area_name": "Appanoose County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 19009,
			"state": "IA",
			"area_name": "Audubon County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 19011,
			"state": "IA",
			"area_name": "Benton County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 19013,
			"state": "IA",
			"area_name": "Black Hawk County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 19015,
			"state": "IA",
			"area_name": "Boone County",
			"bachelorsOrHigher": 22.5
		},
		{
			"fips": 19017,
			"state": "IA",
			"area_name": "Bremer County",
			"bachelorsOrHigher": 28.2
		},
		{
			"fips": 19019,
			"state": "IA",
			"area_name": "Buchanan County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 19021,
			"state": "IA",
			"area_name": "Buena Vista County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 19023,
			"state": "IA",
			"area_name": "Butler County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 19025,
			"state": "IA",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 19027,
			"state": "IA",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 19029,
			"state": "IA",
			"area_name": "Cass County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 19031,
			"state": "IA",
			"area_name": "Cedar County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 19033,
			"state": "IA",
			"area_name": "Cerro Gordo County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 19035,
			"state": "IA",
			"area_name": "Cherokee County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 19037,
			"state": "IA",
			"area_name": "Chickasaw County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 19039,
			"state": "IA",
			"area_name": "Clarke County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 19041,
			"state": "IA",
			"area_name": "Clay County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 19043,
			"state": "IA",
			"area_name": "Clayton County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 19045,
			"state": "IA",
			"area_name": "Clinton County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 19047,
			"state": "IA",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 19049,
			"state": "IA",
			"area_name": "Dallas County",
			"bachelorsOrHigher": 43.7
		},
		{
			"fips": 19051,
			"state": "IA",
			"area_name": "Davis County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 19053,
			"state": "IA",
			"area_name": "Decatur County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 19055,
			"state": "IA",
			"area_name": "Delaware County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 19057,
			"state": "IA",
			"area_name": "Des Moines County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 19059,
			"state": "IA",
			"area_name": "Dickinson County",
			"bachelorsOrHigher": 25.2
		},
		{
			"fips": 19061,
			"state": "IA",
			"area_name": "Dubuque County",
			"bachelorsOrHigher": 27.8
		},
		{
			"fips": 19063,
			"state": "IA",
			"area_name": "Emmet County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 19065,
			"state": "IA",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 19067,
			"state": "IA",
			"area_name": "Floyd County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 19069,
			"state": "IA",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 19071,
			"state": "IA",
			"area_name": "Fremont County",
			"bachelorsOrHigher": 20.9
		},
		{
			"fips": 19073,
			"state": "IA",
			"area_name": "Greene County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 19075,
			"state": "IA",
			"area_name": "Grundy County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 19077,
			"state": "IA",
			"area_name": "Guthrie County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 19079,
			"state": "IA",
			"area_name": "Hamilton County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 19081,
			"state": "IA",
			"area_name": "Hancock County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 19083,
			"state": "IA",
			"area_name": "Hardin County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 19085,
			"state": "IA",
			"area_name": "Harrison County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 19087,
			"state": "IA",
			"area_name": "Henry County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 19089,
			"state": "IA",
			"area_name": "Howard County",
			"bachelorsOrHigher": 11.7
		},
		{
			"fips": 19091,
			"state": "IA",
			"area_name": "Humboldt County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 19093,
			"state": "IA",
			"area_name": "Ida County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 19095,
			"state": "IA",
			"area_name": "Iowa County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 19097,
			"state": "IA",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 19099,
			"state": "IA",
			"area_name": "Jasper County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 19101,
			"state": "IA",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 33
		},
		{
			"fips": 19103,
			"state": "IA",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 51.7
		},
		{
			"fips": 19105,
			"state": "IA",
			"area_name": "Jones County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 19107,
			"state": "IA",
			"area_name": "Keokuk County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 19109,
			"state": "IA",
			"area_name": "Kossuth County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 19111,
			"state": "IA",
			"area_name": "Lee County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 19113,
			"state": "IA",
			"area_name": "Linn County",
			"bachelorsOrHigher": 31.7
		},
		{
			"fips": 19115,
			"state": "IA",
			"area_name": "Louisa County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 19117,
			"state": "IA",
			"area_name": "Lucas County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 19119,
			"state": "IA",
			"area_name": "Lyon County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 19121,
			"state": "IA",
			"area_name": "Madison County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 19123,
			"state": "IA",
			"area_name": "Mahaska County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 19125,
			"state": "IA",
			"area_name": "Marion County",
			"bachelorsOrHigher": 24
		},
		{
			"fips": 19127,
			"state": "IA",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 19129,
			"state": "IA",
			"area_name": "Mills County",
			"bachelorsOrHigher": 24.4
		},
		{
			"fips": 19131,
			"state": "IA",
			"area_name": "Mitchell County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 19133,
			"state": "IA",
			"area_name": "Monona County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 19135,
			"state": "IA",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 19137,
			"state": "IA",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 19139,
			"state": "IA",
			"area_name": "Muscatine County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 19141,
			"state": "IA",
			"area_name": "O'Brien County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 19143,
			"state": "IA",
			"area_name": "Osceola County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 19145,
			"state": "IA",
			"area_name": "Page County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 19147,
			"state": "IA",
			"area_name": "Palo Alto County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 19149,
			"state": "IA",
			"area_name": "Plymouth County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 19151,
			"state": "IA",
			"area_name": "Pocahontas County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 19153,
			"state": "IA",
			"area_name": "Polk County",
			"bachelorsOrHigher": 35.4
		},
		{
			"fips": 19155,
			"state": "IA",
			"area_name": "Pottawattamie County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 19157,
			"state": "IA",
			"area_name": "Poweshiek County",
			"bachelorsOrHigher": 25.4
		},
		{
			"fips": 19159,
			"state": "IA",
			"area_name": "Ringgold County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 19161,
			"state": "IA",
			"area_name": "Sac County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 19163,
			"state": "IA",
			"area_name": "Scott County",
			"bachelorsOrHigher": 31.9
		},
		{
			"fips": 19165,
			"state": "IA",
			"area_name": "Shelby County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 19167,
			"state": "IA",
			"area_name": "Sioux County",
			"bachelorsOrHigher": 24.9
		},
		{
			"fips": 19169,
			"state": "IA",
			"area_name": "Story County",
			"bachelorsOrHigher": 48.5
		},
		{
			"fips": 19171,
			"state": "IA",
			"area_name": "Tama County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 19173,
			"state": "IA",
			"area_name": "Taylor County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 19175,
			"state": "IA",
			"area_name": "Union County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 19177,
			"state": "IA",
			"area_name": "Van Buren County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 19179,
			"state": "IA",
			"area_name": "Wapello County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 19181,
			"state": "IA",
			"area_name": "Warren County",
			"bachelorsOrHigher": 28.5
		},
		{
			"fips": 19183,
			"state": "IA",
			"area_name": "Washington County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 19185,
			"state": "IA",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 19187,
			"state": "IA",
			"area_name": "Webster County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 19189,
			"state": "IA",
			"area_name": "Winnebago County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 19191,
			"state": "IA",
			"area_name": "Winneshiek County",
			"bachelorsOrHigher": 26.8
		},
		{
			"fips": 19193,
			"state": "IA",
			"area_name": "Woodbury County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 19195,
			"state": "IA",
			"area_name": "Worth County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 19197,
			"state": "IA",
			"area_name": "Wright County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 20001,
			"state": "KS",
			"area_name": "Allen County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 20003,
			"state": "KS",
			"area_name": "Anderson County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 20005,
			"state": "KS",
			"area_name": "Atchison County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 20007,
			"state": "KS",
			"area_name": "Barber County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 20009,
			"state": "KS",
			"area_name": "Barton County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 20011,
			"state": "KS",
			"area_name": "Bourbon County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 20013,
			"state": "KS",
			"area_name": "Brown County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 20015,
			"state": "KS",
			"area_name": "Butler County",
			"bachelorsOrHigher": 27.5
		},
		{
			"fips": 20017,
			"state": "KS",
			"area_name": "Chase County",
			"bachelorsOrHigher": 24.7
		},
		{
			"fips": 20019,
			"state": "KS",
			"area_name": "Chautauqua County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 20021,
			"state": "KS",
			"area_name": "Cherokee County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 20023,
			"state": "KS",
			"area_name": "Cheyenne County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 20025,
			"state": "KS",
			"area_name": "Clark County",
			"bachelorsOrHigher": 30.7
		},
		{
			"fips": 20027,
			"state": "KS",
			"area_name": "Clay County",
			"bachelorsOrHigher": 22.3
		},
		{
			"fips": 20029,
			"state": "KS",
			"area_name": "Cloud County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 20031,
			"state": "KS",
			"area_name": "Coffey County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 20033,
			"state": "KS",
			"area_name": "Comanche County",
			"bachelorsOrHigher": 26
		},
		{
			"fips": 20035,
			"state": "KS",
			"area_name": "Cowley County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 20037,
			"state": "KS",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 28.9
		},
		{
			"fips": 20039,
			"state": "KS",
			"area_name": "Decatur County",
			"bachelorsOrHigher": 23.3
		},
		{
			"fips": 20041,
			"state": "KS",
			"area_name": "Dickinson County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 20043,
			"state": "KS",
			"area_name": "Doniphan County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 20045,
			"state": "KS",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 49.4
		},
		{
			"fips": 20047,
			"state": "KS",
			"area_name": "Edwards County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 20049,
			"state": "KS",
			"area_name": "Elk County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 20051,
			"state": "KS",
			"area_name": "Ellis County",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 20053,
			"state": "KS",
			"area_name": "Ellsworth County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 20055,
			"state": "KS",
			"area_name": "Finney County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 20057,
			"state": "KS",
			"area_name": "Ford County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 20059,
			"state": "KS",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 21
		},
		{
			"fips": 20061,
			"state": "KS",
			"area_name": "Geary County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 20063,
			"state": "KS",
			"area_name": "Gove County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 20065,
			"state": "KS",
			"area_name": "Graham County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 20067,
			"state": "KS",
			"area_name": "Grant County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 20069,
			"state": "KS",
			"area_name": "Gray County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 20071,
			"state": "KS",
			"area_name": "Greeley County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 20073,
			"state": "KS",
			"area_name": "Greenwood County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 20075,
			"state": "KS",
			"area_name": "Hamilton County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 20077,
			"state": "KS",
			"area_name": "Harper County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 20079,
			"state": "KS",
			"area_name": "Harvey County",
			"bachelorsOrHigher": 25.8
		},
		{
			"fips": 20081,
			"state": "KS",
			"area_name": "Haskell County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 20083,
			"state": "KS",
			"area_name": "Hodgeman County",
			"bachelorsOrHigher": 21
		},
		{
			"fips": 20085,
			"state": "KS",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 20087,
			"state": "KS",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 21
		},
		{
			"fips": 20089,
			"state": "KS",
			"area_name": "Jewell County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 20091,
			"state": "KS",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 52.1
		},
		{
			"fips": 20093,
			"state": "KS",
			"area_name": "Kearny County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 20095,
			"state": "KS",
			"area_name": "Kingman County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 20097,
			"state": "KS",
			"area_name": "Kiowa County",
			"bachelorsOrHigher": 22.6
		},
		{
			"fips": 20099,
			"state": "KS",
			"area_name": "Labette County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 20101,
			"state": "KS",
			"area_name": "Lane County",
			"bachelorsOrHigher": 24
		},
		{
			"fips": 20103,
			"state": "KS",
			"area_name": "Leavenworth County",
			"bachelorsOrHigher": 29.8
		},
		{
			"fips": 20105,
			"state": "KS",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 20107,
			"state": "KS",
			"area_name": "Linn County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 20109,
			"state": "KS",
			"area_name": "Logan County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 20111,
			"state": "KS",
			"area_name": "Lyon County",
			"bachelorsOrHigher": 25
		},
		{
			"fips": 20113,
			"state": "KS",
			"area_name": "McPherson County",
			"bachelorsOrHigher": 26.7
		},
		{
			"fips": 20115,
			"state": "KS",
			"area_name": "Marion County",
			"bachelorsOrHigher": 22.6
		},
		{
			"fips": 20117,
			"state": "KS",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 20119,
			"state": "KS",
			"area_name": "Meade County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 20121,
			"state": "KS",
			"area_name": "Miami County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 20123,
			"state": "KS",
			"area_name": "Mitchell County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 20125,
			"state": "KS",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 20127,
			"state": "KS",
			"area_name": "Morris County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 20129,
			"state": "KS",
			"area_name": "Morton County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 20131,
			"state": "KS",
			"area_name": "Nemaha County",
			"bachelorsOrHigher": 21.9
		},
		{
			"fips": 20133,
			"state": "KS",
			"area_name": "Neosho County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 20135,
			"state": "KS",
			"area_name": "Ness County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 20137,
			"state": "KS",
			"area_name": "Norton County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 20139,
			"state": "KS",
			"area_name": "Osage County",
			"bachelorsOrHigher": 20.7
		},
		{
			"fips": 20141,
			"state": "KS",
			"area_name": "Osborne County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 20143,
			"state": "KS",
			"area_name": "Ottawa County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 20145,
			"state": "KS",
			"area_name": "Pawnee County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 20147,
			"state": "KS",
			"area_name": "Phillips County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 20149,
			"state": "KS",
			"area_name": "Pottawatomie County",
			"bachelorsOrHigher": 32.2
		},
		{
			"fips": 20151,
			"state": "KS",
			"area_name": "Pratt County",
			"bachelorsOrHigher": 24.4
		},
		{
			"fips": 20153,
			"state": "KS",
			"area_name": "Rawlins County",
			"bachelorsOrHigher": 23.8
		},
		{
			"fips": 20155,
			"state": "KS",
			"area_name": "Reno County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 20157,
			"state": "KS",
			"area_name": "Republic County",
			"bachelorsOrHigher": 21
		},
		{
			"fips": 20159,
			"state": "KS",
			"area_name": "Rice County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 20161,
			"state": "KS",
			"area_name": "Riley County",
			"bachelorsOrHigher": 45.5
		},
		{
			"fips": 20163,
			"state": "KS",
			"area_name": "Rooks County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 20165,
			"state": "KS",
			"area_name": "Rush County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 20167,
			"state": "KS",
			"area_name": "Russell County",
			"bachelorsOrHigher": 23.9
		},
		{
			"fips": 20169,
			"state": "KS",
			"area_name": "Saline County",
			"bachelorsOrHigher": 24.5
		},
		{
			"fips": 20171,
			"state": "KS",
			"area_name": "Scott County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 20173,
			"state": "KS",
			"area_name": "Sedgwick County",
			"bachelorsOrHigher": 29.4
		},
		{
			"fips": 20175,
			"state": "KS",
			"area_name": "Seward County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 20177,
			"state": "KS",
			"area_name": "Shawnee County",
			"bachelorsOrHigher": 28.9
		},
		{
			"fips": 20179,
			"state": "KS",
			"area_name": "Sheridan County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 20181,
			"state": "KS",
			"area_name": "Sherman County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 20183,
			"state": "KS",
			"area_name": "Smith County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 20185,
			"state": "KS",
			"area_name": "Stafford County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 20187,
			"state": "KS",
			"area_name": "Stanton County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 20189,
			"state": "KS",
			"area_name": "Stevens County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 20191,
			"state": "KS",
			"area_name": "Sumner County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 20193,
			"state": "KS",
			"area_name": "Thomas County",
			"bachelorsOrHigher": 30.5
		},
		{
			"fips": 20195,
			"state": "KS",
			"area_name": "Trego County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 20197,
			"state": "KS",
			"area_name": "Wabaunsee County",
			"bachelorsOrHigher": 22.3
		},
		{
			"fips": 20199,
			"state": "KS",
			"area_name": "Wallace County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 20201,
			"state": "KS",
			"area_name": "Washington County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 20203,
			"state": "KS",
			"area_name": "Wichita County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 20205,
			"state": "KS",
			"area_name": "Wilson County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 20207,
			"state": "KS",
			"area_name": "Woodson County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 20209,
			"state": "KS",
			"area_name": "Wyandotte County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 21001,
			"state": "KY",
			"area_name": "Adair County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 21003,
			"state": "KY",
			"area_name": "Allen County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 21005,
			"state": "KY",
			"area_name": "Anderson County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 21007,
			"state": "KY",
			"area_name": "Ballard County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 21009,
			"state": "KY",
			"area_name": "Barren County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 21011,
			"state": "KY",
			"area_name": "Bath County",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 21013,
			"state": "KY",
			"area_name": "Bell County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 21015,
			"state": "KY",
			"area_name": "Boone County",
			"bachelorsOrHigher": 30.8
		},
		{
			"fips": 21017,
			"state": "KY",
			"area_name": "Bourbon County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 21019,
			"state": "KY",
			"area_name": "Boyd County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 21021,
			"state": "KY",
			"area_name": "Boyle County",
			"bachelorsOrHigher": 22.2
		},
		{
			"fips": 21023,
			"state": "KY",
			"area_name": "Bracken County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 21025,
			"state": "KY",
			"area_name": "Breathitt County",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 21027,
			"state": "KY",
			"area_name": "Breckinridge County",
			"bachelorsOrHigher": 9.4
		},
		{
			"fips": 21029,
			"state": "KY",
			"area_name": "Bullitt County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 21031,
			"state": "KY",
			"area_name": "Butler County",
			"bachelorsOrHigher": 8.7
		},
		{
			"fips": 21033,
			"state": "KY",
			"area_name": "Caldwell County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 21035,
			"state": "KY",
			"area_name": "Calloway County",
			"bachelorsOrHigher": 27.5
		},
		{
			"fips": 21037,
			"state": "KY",
			"area_name": "Campbell County",
			"bachelorsOrHigher": 28.1
		},
		{
			"fips": 21039,
			"state": "KY",
			"area_name": "Carlisle County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 21041,
			"state": "KY",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 21043,
			"state": "KY",
			"area_name": "Carter County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 21045,
			"state": "KY",
			"area_name": "Casey County",
			"bachelorsOrHigher": 9.3
		},
		{
			"fips": 21047,
			"state": "KY",
			"area_name": "Christian County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 21049,
			"state": "KY",
			"area_name": "Clark County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 21051,
			"state": "KY",
			"area_name": "Clay County",
			"bachelorsOrHigher": 9.5
		},
		{
			"fips": 21053,
			"state": "KY",
			"area_name": "Clinton County",
			"bachelorsOrHigher": 9
		},
		{
			"fips": 21055,
			"state": "KY",
			"area_name": "Crittenden County",
			"bachelorsOrHigher": 11.3
		},
		{
			"fips": 21057,
			"state": "KY",
			"area_name": "Cumberland County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 21059,
			"state": "KY",
			"area_name": "Daviess County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 21061,
			"state": "KY",
			"area_name": "Edmonson County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 21063,
			"state": "KY",
			"area_name": "Elliott County",
			"bachelorsOrHigher": 6.4
		},
		{
			"fips": 21065,
			"state": "KY",
			"area_name": "Estill County",
			"bachelorsOrHigher": 8.4
		},
		{
			"fips": 21067,
			"state": "KY",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 40.2
		},
		{
			"fips": 21069,
			"state": "KY",
			"area_name": "Fleming County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 21071,
			"state": "KY",
			"area_name": "Floyd County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 21073,
			"state": "KY",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 27.4
		},
		{
			"fips": 21075,
			"state": "KY",
			"area_name": "Fulton County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 21077,
			"state": "KY",
			"area_name": "Gallatin County",
			"bachelorsOrHigher": 9.9
		},
		{
			"fips": 21079,
			"state": "KY",
			"area_name": "Garrard County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 21081,
			"state": "KY",
			"area_name": "Grant County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 21083,
			"state": "KY",
			"area_name": "Graves County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 21085,
			"state": "KY",
			"area_name": "Grayson County",
			"bachelorsOrHigher": 9.1
		},
		{
			"fips": 21087,
			"state": "KY",
			"area_name": "Green County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 21089,
			"state": "KY",
			"area_name": "Greenup County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 21091,
			"state": "KY",
			"area_name": "Hancock County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 21093,
			"state": "KY",
			"area_name": "Hardin County",
			"bachelorsOrHigher": 22.2
		},
		{
			"fips": 21095,
			"state": "KY",
			"area_name": "Harlan County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 21097,
			"state": "KY",
			"area_name": "Harrison County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 21099,
			"state": "KY",
			"area_name": "Hart County",
			"bachelorsOrHigher": 9.8
		},
		{
			"fips": 21101,
			"state": "KY",
			"area_name": "Henderson County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 21103,
			"state": "KY",
			"area_name": "Henry County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 21105,
			"state": "KY",
			"area_name": "Hickman County",
			"bachelorsOrHigher": 11.7
		},
		{
			"fips": 21107,
			"state": "KY",
			"area_name": "Hopkins County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 21109,
			"state": "KY",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 8.6
		},
		{
			"fips": 21111,
			"state": "KY",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 30.8
		},
		{
			"fips": 21113,
			"state": "KY",
			"area_name": "Jessamine County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 21115,
			"state": "KY",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 10.5
		},
		{
			"fips": 21117,
			"state": "KY",
			"area_name": "Kenton County",
			"bachelorsOrHigher": 28.9
		},
		{
			"fips": 21119,
			"state": "KY",
			"area_name": "Knott County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 21121,
			"state": "KY",
			"area_name": "Knox County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 21123,
			"state": "KY",
			"area_name": "Larue County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 21125,
			"state": "KY",
			"area_name": "Laurel County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 21127,
			"state": "KY",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 11.7
		},
		{
			"fips": 21129,
			"state": "KY",
			"area_name": "Lee County",
			"bachelorsOrHigher": 7
		},
		{
			"fips": 21131,
			"state": "KY",
			"area_name": "Leslie County",
			"bachelorsOrHigher": 8.2
		},
		{
			"fips": 21133,
			"state": "KY",
			"area_name": "Letcher County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 21135,
			"state": "KY",
			"area_name": "Lewis County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 21137,
			"state": "KY",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 21139,
			"state": "KY",
			"area_name": "Livingston County",
			"bachelorsOrHigher": 10
		},
		{
			"fips": 21141,
			"state": "KY",
			"area_name": "Logan County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 21143,
			"state": "KY",
			"area_name": "Lyon County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 21145,
			"state": "KY",
			"area_name": "McCracken County",
			"bachelorsOrHigher": 22.7
		},
		{
			"fips": 21147,
			"state": "KY",
			"area_name": "McCreary County",
			"bachelorsOrHigher": 7.5
		},
		{
			"fips": 21149,
			"state": "KY",
			"area_name": "McLean County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 21151,
			"state": "KY",
			"area_name": "Madison County",
			"bachelorsOrHigher": 28.6
		},
		{
			"fips": 21153,
			"state": "KY",
			"area_name": "Magoffin County",
			"bachelorsOrHigher": 8.5
		},
		{
			"fips": 21155,
			"state": "KY",
			"area_name": "Marion County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 21157,
			"state": "KY",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 21159,
			"state": "KY",
			"area_name": "Martin County",
			"bachelorsOrHigher": 7.3
		},
		{
			"fips": 21161,
			"state": "KY",
			"area_name": "Mason County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 21163,
			"state": "KY",
			"area_name": "Meade County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 21165,
			"state": "KY",
			"area_name": "Menifee County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 21167,
			"state": "KY",
			"area_name": "Mercer County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 21169,
			"state": "KY",
			"area_name": "Metcalfe County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 21171,
			"state": "KY",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 11.7
		},
		{
			"fips": 21173,
			"state": "KY",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 21175,
			"state": "KY",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 21177,
			"state": "KY",
			"area_name": "Muhlenberg County",
			"bachelorsOrHigher": 9.6
		},
		{
			"fips": 21179,
			"state": "KY",
			"area_name": "Nelson County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 21181,
			"state": "KY",
			"area_name": "Nicholas County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 21183,
			"state": "KY",
			"area_name": "Ohio County",
			"bachelorsOrHigher": 8.2
		},
		{
			"fips": 21185,
			"state": "KY",
			"area_name": "Oldham County",
			"bachelorsOrHigher": 39.8
		},
		{
			"fips": 21187,
			"state": "KY",
			"area_name": "Owen County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 21189,
			"state": "KY",
			"area_name": "Owsley County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 21191,
			"state": "KY",
			"area_name": "Pendleton County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 21193,
			"state": "KY",
			"area_name": "Perry County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 21195,
			"state": "KY",
			"area_name": "Pike County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 21197,
			"state": "KY",
			"area_name": "Powell County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 21199,
			"state": "KY",
			"area_name": "Pulaski County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 21201,
			"state": "KY",
			"area_name": "Robertson County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 21203,
			"state": "KY",
			"area_name": "Rockcastle County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 21205,
			"state": "KY",
			"area_name": "Rowan County",
			"bachelorsOrHigher": 25.5
		},
		{
			"fips": 21207,
			"state": "KY",
			"area_name": "Russell County",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 21209,
			"state": "KY",
			"area_name": "Scott County",
			"bachelorsOrHigher": 28
		},
		{
			"fips": 21211,
			"state": "KY",
			"area_name": "Shelby County",
			"bachelorsOrHigher": 23.7
		},
		{
			"fips": 21213,
			"state": "KY",
			"area_name": "Simpson County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 21215,
			"state": "KY",
			"area_name": "Spencer County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 21217,
			"state": "KY",
			"area_name": "Taylor County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 21219,
			"state": "KY",
			"area_name": "Todd County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 21221,
			"state": "KY",
			"area_name": "Trigg County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 21223,
			"state": "KY",
			"area_name": "Trimble County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 21225,
			"state": "KY",
			"area_name": "Union County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 21227,
			"state": "KY",
			"area_name": "Warren County",
			"bachelorsOrHigher": 27.3
		},
		{
			"fips": 21229,
			"state": "KY",
			"area_name": "Washington County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 21231,
			"state": "KY",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 10
		},
		{
			"fips": 21233,
			"state": "KY",
			"area_name": "Webster County",
			"bachelorsOrHigher": 7.9
		},
		{
			"fips": 21235,
			"state": "KY",
			"area_name": "Whitley County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 21237,
			"state": "KY",
			"area_name": "Wolfe County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 21239,
			"state": "KY",
			"area_name": "Woodford County",
			"bachelorsOrHigher": 32.4
		},
		{
			"fips": 22001,
			"state": "LA",
			"area_name": "Acadia Parish",
			"bachelorsOrHigher": 9.9
		},
		{
			"fips": 22003,
			"state": "LA",
			"area_name": "Allen Parish",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 22005,
			"state": "LA",
			"area_name": "Ascension Parish",
			"bachelorsOrHigher": 25.8
		},
		{
			"fips": 22007,
			"state": "LA",
			"area_name": "Assumption Parish",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 22009,
			"state": "LA",
			"area_name": "Avoyelles Parish",
			"bachelorsOrHigher": 9.3
		},
		{
			"fips": 22011,
			"state": "LA",
			"area_name": "Beauregard Parish",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 22013,
			"state": "LA",
			"area_name": "Bienville Parish",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 22015,
			"state": "LA",
			"area_name": "Bossier Parish",
			"bachelorsOrHigher": 25.1
		},
		{
			"fips": 22017,
			"state": "LA",
			"area_name": "Caddo Parish",
			"bachelorsOrHigher": 23.5
		},
		{
			"fips": 22019,
			"state": "LA",
			"area_name": "Calcasieu Parish",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 22021,
			"state": "LA",
			"area_name": "Caldwell Parish",
			"bachelorsOrHigher": 9.8
		},
		{
			"fips": 22023,
			"state": "LA",
			"area_name": "Cameron Parish",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 22025,
			"state": "LA",
			"area_name": "Catahoula Parish",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 22027,
			"state": "LA",
			"area_name": "Claiborne Parish",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 22029,
			"state": "LA",
			"area_name": "Concordia Parish",
			"bachelorsOrHigher": 10.5
		},
		{
			"fips": 22031,
			"state": "LA",
			"area_name": "De Soto Parish",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 22033,
			"state": "LA",
			"area_name": "East Baton Rouge Parish",
			"bachelorsOrHigher": 34.1
		},
		{
			"fips": 22035,
			"state": "LA",
			"area_name": "East Carroll Parish",
			"bachelorsOrHigher": 9.4
		},
		{
			"fips": 22037,
			"state": "LA",
			"area_name": "East Feliciana Parish",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 22039,
			"state": "LA",
			"area_name": "Evangeline Parish",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 22041,
			"state": "LA",
			"area_name": "Franklin Parish",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 22043,
			"state": "LA",
			"area_name": "Grant Parish",
			"bachelorsOrHigher": 9.4
		},
		{
			"fips": 22045,
			"state": "LA",
			"area_name": "Iberia Parish",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 22047,
			"state": "LA",
			"area_name": "Iberville Parish",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 22049,
			"state": "LA",
			"area_name": "Jackson Parish",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 22051,
			"state": "LA",
			"area_name": "Jefferson Parish",
			"bachelorsOrHigher": 23.8
		},
		{
			"fips": 22053,
			"state": "LA",
			"area_name": "Jefferson Davis Parish",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 22055,
			"state": "LA",
			"area_name": "Lafayette Parish",
			"bachelorsOrHigher": 29
		},
		{
			"fips": 22057,
			"state": "LA",
			"area_name": "Lafourche Parish",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 22059,
			"state": "LA",
			"area_name": "La Salle Parish",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 22061,
			"state": "LA",
			"area_name": "Lincoln Parish",
			"bachelorsOrHigher": 34.6
		},
		{
			"fips": 22063,
			"state": "LA",
			"area_name": "Livingston Parish",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 22065,
			"state": "LA",
			"area_name": "Madison Parish",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 22067,
			"state": "LA",
			"area_name": "Morehouse Parish",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 22069,
			"state": "LA",
			"area_name": "Natchitoches Parish",
			"bachelorsOrHigher": 20.6
		},
		{
			"fips": 22071,
			"state": "LA",
			"area_name": "Orleans Parish",
			"bachelorsOrHigher": 34.4
		},
		{
			"fips": 22073,
			"state": "LA",
			"area_name": "Ouachita Parish",
			"bachelorsOrHigher": 22.8
		},
		{
			"fips": 22075,
			"state": "LA",
			"area_name": "Plaquemines Parish",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 22077,
			"state": "LA",
			"area_name": "Pointe Coupee Parish",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 22079,
			"state": "LA",
			"area_name": "Rapides Parish",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 22081,
			"state": "LA",
			"area_name": "Red River Parish",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 22083,
			"state": "LA",
			"area_name": "Richland Parish",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 22085,
			"state": "LA",
			"area_name": "Sabine Parish",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 22087,
			"state": "LA",
			"area_name": "St. Bernard Parish",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 22089,
			"state": "LA",
			"area_name": "St. Charles Parish",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 22091,
			"state": "LA",
			"area_name": "St. Helena Parish",
			"bachelorsOrHigher": 8.9
		},
		{
			"fips": 22093,
			"state": "LA",
			"area_name": "St. James Parish",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 22095,
			"state": "LA",
			"area_name": "St. John the Baptist Parish",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 22097,
			"state": "LA",
			"area_name": "St. Landry Parish",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 22099,
			"state": "LA",
			"area_name": "St. Martin Parish",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 22101,
			"state": "LA",
			"area_name": "St. Mary Parish",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 22103,
			"state": "LA",
			"area_name": "St. Tammany Parish",
			"bachelorsOrHigher": 30.4
		},
		{
			"fips": 22105,
			"state": "LA",
			"area_name": "Tangipahoa Parish",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 22107,
			"state": "LA",
			"area_name": "Tensas Parish",
			"bachelorsOrHigher": 9.8
		},
		{
			"fips": 22109,
			"state": "LA",
			"area_name": "Terrebonne Parish",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 22111,
			"state": "LA",
			"area_name": "Union Parish",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 22113,
			"state": "LA",
			"area_name": "Vermilion Parish",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 22115,
			"state": "LA",
			"area_name": "Vernon Parish",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 22117,
			"state": "LA",
			"area_name": "Washington Parish",
			"bachelorsOrHigher": 11
		},
		{
			"fips": 22119,
			"state": "LA",
			"area_name": "Webster Parish",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 22121,
			"state": "LA",
			"area_name": "West Baton Rouge Parish",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 22123,
			"state": "LA",
			"area_name": "West Carroll Parish",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 22125,
			"state": "LA",
			"area_name": "West Feliciana Parish",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 22127,
			"state": "LA",
			"area_name": "Winn Parish",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 23001,
			"state": "ME",
			"area_name": "Androscoggin County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 23003,
			"state": "ME",
			"area_name": "Aroostook County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 23005,
			"state": "ME",
			"area_name": "Cumberland County",
			"bachelorsOrHigher": 42
		},
		{
			"fips": 23007,
			"state": "ME",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 24.5
		},
		{
			"fips": 23009,
			"state": "ME",
			"area_name": "Hancock County",
			"bachelorsOrHigher": 32.6
		},
		{
			"fips": 23011,
			"state": "ME",
			"area_name": "Kennebec County",
			"bachelorsOrHigher": 23.9
		},
		{
			"fips": 23013,
			"state": "ME",
			"area_name": "Knox County",
			"bachelorsOrHigher": 30.7
		},
		{
			"fips": 23015,
			"state": "ME",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 23017,
			"state": "ME",
			"area_name": "Oxford County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 23019,
			"state": "ME",
			"area_name": "Penobscot County",
			"bachelorsOrHigher": 24.2
		},
		{
			"fips": 23021,
			"state": "ME",
			"area_name": "Piscataquis County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 23023,
			"state": "ME",
			"area_name": "Sagadahoc County",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 23025,
			"state": "ME",
			"area_name": "Somerset County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 23027,
			"state": "ME",
			"area_name": "Waldo County",
			"bachelorsOrHigher": 29
		},
		{
			"fips": 23029,
			"state": "ME",
			"area_name": "Washington County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 23031,
			"state": "ME",
			"area_name": "York County",
			"bachelorsOrHigher": 29.1
		},
		{
			"fips": 24001,
			"state": "MD",
			"area_name": "Allegany County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 24003,
			"state": "MD",
			"area_name": "Anne Arundel County",
			"bachelorsOrHigher": 37.6
		},
		{
			"fips": 24005,
			"state": "MD",
			"area_name": "Baltimore County",
			"bachelorsOrHigher": 36
		},
		{
			"fips": 24009,
			"state": "MD",
			"area_name": "Calvert County",
			"bachelorsOrHigher": 29.3
		},
		{
			"fips": 24011,
			"state": "MD",
			"area_name": "Caroline County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 24013,
			"state": "MD",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 32.7
		},
		{
			"fips": 24015,
			"state": "MD",
			"area_name": "Cecil County",
			"bachelorsOrHigher": 21.8
		},
		{
			"fips": 24017,
			"state": "MD",
			"area_name": "Charles County",
			"bachelorsOrHigher": 26.8
		},
		{
			"fips": 24019,
			"state": "MD",
			"area_name": "Dorchester County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 24021,
			"state": "MD",
			"area_name": "Frederick County",
			"bachelorsOrHigher": 38.8
		},
		{
			"fips": 24023,
			"state": "MD",
			"area_name": "Garrett County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 24025,
			"state": "MD",
			"area_name": "Harford County",
			"bachelorsOrHigher": 33.4
		},
		{
			"fips": 24027,
			"state": "MD",
			"area_name": "Howard County",
			"bachelorsOrHigher": 60.4
		},
		{
			"fips": 24029,
			"state": "MD",
			"area_name": "Kent County",
			"bachelorsOrHigher": 28
		},
		{
			"fips": 24031,
			"state": "MD",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 57.4
		},
		{
			"fips": 24033,
			"state": "MD",
			"area_name": "Prince George's County",
			"bachelorsOrHigher": 30.4
		},
		{
			"fips": 24035,
			"state": "MD",
			"area_name": "Queen Anne's County",
			"bachelorsOrHigher": 34.1
		},
		{
			"fips": 24037,
			"state": "MD",
			"area_name": "St. Mary's County",
			"bachelorsOrHigher": 29.8
		},
		{
			"fips": 24039,
			"state": "MD",
			"area_name": "Somerset County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 24041,
			"state": "MD",
			"area_name": "Talbot County",
			"bachelorsOrHigher": 33.4
		},
		{
			"fips": 24043,
			"state": "MD",
			"area_name": "Washington County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 24045,
			"state": "MD",
			"area_name": "Wicomico County",
			"bachelorsOrHigher": 27.7
		},
		{
			"fips": 24047,
			"state": "MD",
			"area_name": "Worcester County",
			"bachelorsOrHigher": 28.2
		},
		{
			"fips": 24510,
			"state": "MD",
			"area_name": "Baltimore city",
			"bachelorsOrHigher": 27.7
		},
		{
			"fips": 25001,
			"state": "MA",
			"area_name": "Barnstable County",
			"bachelorsOrHigher": 39.9
		},
		{
			"fips": 25003,
			"state": "MA",
			"area_name": "Berkshire County",
			"bachelorsOrHigher": 31.3
		},
		{
			"fips": 25005,
			"state": "MA",
			"area_name": "Bristol County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 25007,
			"state": "MA",
			"area_name": "Dukes County",
			"bachelorsOrHigher": 41.2
		},
		{
			"fips": 25009,
			"state": "MA",
			"area_name": "Essex County",
			"bachelorsOrHigher": 37.2
		},
		{
			"fips": 25011,
			"state": "MA",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 34.4
		},
		{
			"fips": 25013,
			"state": "MA",
			"area_name": "Hampden County",
			"bachelorsOrHigher": 25.4
		},
		{
			"fips": 25015,
			"state": "MA",
			"area_name": "Hampshire County",
			"bachelorsOrHigher": 43.2
		},
		{
			"fips": 25017,
			"state": "MA",
			"area_name": "Middlesex County",
			"bachelorsOrHigher": 51.3
		},
		{
			"fips": 25019,
			"state": "MA",
			"area_name": "Nantucket County",
			"bachelorsOrHigher": 45.7
		},
		{
			"fips": 25021,
			"state": "MA",
			"area_name": "Norfolk County",
			"bachelorsOrHigher": 49.9
		},
		{
			"fips": 25023,
			"state": "MA",
			"area_name": "Plymouth County",
			"bachelorsOrHigher": 34
		},
		{
			"fips": 25025,
			"state": "MA",
			"area_name": "Suffolk County",
			"bachelorsOrHigher": 41
		},
		{
			"fips": 25027,
			"state": "MA",
			"area_name": "Worcester County",
			"bachelorsOrHigher": 34.1
		},
		{
			"fips": 26001,
			"state": "MI",
			"area_name": "Alcona County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 26003,
			"state": "MI",
			"area_name": "Alger County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 26005,
			"state": "MI",
			"area_name": "Allegan County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 26007,
			"state": "MI",
			"area_name": "Alpena County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 26009,
			"state": "MI",
			"area_name": "Antrim County",
			"bachelorsOrHigher": 24.9
		},
		{
			"fips": 26011,
			"state": "MI",
			"area_name": "Arenac County",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 26013,
			"state": "MI",
			"area_name": "Baraga County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 26015,
			"state": "MI",
			"area_name": "Barry County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 26017,
			"state": "MI",
			"area_name": "Bay County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 26019,
			"state": "MI",
			"area_name": "Benzie County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 26021,
			"state": "MI",
			"area_name": "Berrien County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 26023,
			"state": "MI",
			"area_name": "Branch County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 26025,
			"state": "MI",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 26027,
			"state": "MI",
			"area_name": "Cass County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 26029,
			"state": "MI",
			"area_name": "Charlevoix County",
			"bachelorsOrHigher": 27.1
		},
		{
			"fips": 26031,
			"state": "MI",
			"area_name": "Cheboygan County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 26033,
			"state": "MI",
			"area_name": "Chippewa County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 26035,
			"state": "MI",
			"area_name": "Clare County",
			"bachelorsOrHigher": 10.5
		},
		{
			"fips": 26037,
			"state": "MI",
			"area_name": "Clinton County",
			"bachelorsOrHigher": 28.7
		},
		{
			"fips": 26039,
			"state": "MI",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 26041,
			"state": "MI",
			"area_name": "Delta County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 26043,
			"state": "MI",
			"area_name": "Dickinson County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 26045,
			"state": "MI",
			"area_name": "Eaton County",
			"bachelorsOrHigher": 24.2
		},
		{
			"fips": 26047,
			"state": "MI",
			"area_name": "Emmet County",
			"bachelorsOrHigher": 33.3
		},
		{
			"fips": 26049,
			"state": "MI",
			"area_name": "Genesee County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 26051,
			"state": "MI",
			"area_name": "Gladwin County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 26053,
			"state": "MI",
			"area_name": "Gogebic County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 26055,
			"state": "MI",
			"area_name": "Grand Traverse County",
			"bachelorsOrHigher": 30.8
		},
		{
			"fips": 26057,
			"state": "MI",
			"area_name": "Gratiot County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 26059,
			"state": "MI",
			"area_name": "Hillsdale County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 26061,
			"state": "MI",
			"area_name": "Houghton County",
			"bachelorsOrHigher": 29.6
		},
		{
			"fips": 26063,
			"state": "MI",
			"area_name": "Huron County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 26065,
			"state": "MI",
			"area_name": "Ingham County",
			"bachelorsOrHigher": 36.5
		},
		{
			"fips": 26067,
			"state": "MI",
			"area_name": "Ionia County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 26069,
			"state": "MI",
			"area_name": "Iosco County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 26071,
			"state": "MI",
			"area_name": "Iron County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 26073,
			"state": "MI",
			"area_name": "Isabella County",
			"bachelorsOrHigher": 26.1
		},
		{
			"fips": 26075,
			"state": "MI",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 26077,
			"state": "MI",
			"area_name": "Kalamazoo County",
			"bachelorsOrHigher": 34.4
		},
		{
			"fips": 26079,
			"state": "MI",
			"area_name": "Kalkaska County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 26081,
			"state": "MI",
			"area_name": "Kent County",
			"bachelorsOrHigher": 32.6
		},
		{
			"fips": 26083,
			"state": "MI",
			"area_name": "Keweenaw County",
			"bachelorsOrHigher": 24.6
		},
		{
			"fips": 26085,
			"state": "MI",
			"area_name": "Lake County",
			"bachelorsOrHigher": 9.2
		},
		{
			"fips": 26087,
			"state": "MI",
			"area_name": "Lapeer County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 26089,
			"state": "MI",
			"area_name": "Leelanau County",
			"bachelorsOrHigher": 39.5
		},
		{
			"fips": 26091,
			"state": "MI",
			"area_name": "Lenawee County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 26093,
			"state": "MI",
			"area_name": "Livingston County",
			"bachelorsOrHigher": 33
		},
		{
			"fips": 26095,
			"state": "MI",
			"area_name": "Luce County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 26097,
			"state": "MI",
			"area_name": "Mackinac County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 26099,
			"state": "MI",
			"area_name": "Macomb County",
			"bachelorsOrHigher": 23.1
		},
		{
			"fips": 26101,
			"state": "MI",
			"area_name": "Manistee County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 26103,
			"state": "MI",
			"area_name": "Marquette County",
			"bachelorsOrHigher": 28.8
		},
		{
			"fips": 26105,
			"state": "MI",
			"area_name": "Mason County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 26107,
			"state": "MI",
			"area_name": "Mecosta County",
			"bachelorsOrHigher": 22.2
		},
		{
			"fips": 26109,
			"state": "MI",
			"area_name": "Menominee County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 26111,
			"state": "MI",
			"area_name": "Midland County",
			"bachelorsOrHigher": 32
		},
		{
			"fips": 26113,
			"state": "MI",
			"area_name": "Missaukee County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 26115,
			"state": "MI",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 26117,
			"state": "MI",
			"area_name": "Montcalm County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 26119,
			"state": "MI",
			"area_name": "Montmorency County",
			"bachelorsOrHigher": 10.3
		},
		{
			"fips": 26121,
			"state": "MI",
			"area_name": "Muskegon County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 26123,
			"state": "MI",
			"area_name": "Newaygo County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 26125,
			"state": "MI",
			"area_name": "Oakland County",
			"bachelorsOrHigher": 43.7
		},
		{
			"fips": 26127,
			"state": "MI",
			"area_name": "Oceana County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 26129,
			"state": "MI",
			"area_name": "Ogemaw County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 26131,
			"state": "MI",
			"area_name": "Ontonagon County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 26133,
			"state": "MI",
			"area_name": "Osceola County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 26135,
			"state": "MI",
			"area_name": "Oscoda County",
			"bachelorsOrHigher": 9.8
		},
		{
			"fips": 26137,
			"state": "MI",
			"area_name": "Otsego County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 26139,
			"state": "MI",
			"area_name": "Ottawa County",
			"bachelorsOrHigher": 30.5
		},
		{
			"fips": 26141,
			"state": "MI",
			"area_name": "Presque Isle County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 26143,
			"state": "MI",
			"area_name": "Roscommon County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 26145,
			"state": "MI",
			"area_name": "Saginaw County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 26147,
			"state": "MI",
			"area_name": "St. Clair County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 26149,
			"state": "MI",
			"area_name": "St. Joseph County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 26151,
			"state": "MI",
			"area_name": "Sanilac County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 26153,
			"state": "MI",
			"area_name": "Schoolcraft County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 26155,
			"state": "MI",
			"area_name": "Shiawassee County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 26157,
			"state": "MI",
			"area_name": "Tuscola County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 26159,
			"state": "MI",
			"area_name": "Van Buren County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 26161,
			"state": "MI",
			"area_name": "Washtenaw County",
			"bachelorsOrHigher": 51.8
		},
		{
			"fips": 26163,
			"state": "MI",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 26165,
			"state": "MI",
			"area_name": "Wexford County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 27001,
			"state": "MN",
			"area_name": "Aitkin County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 27003,
			"state": "MN",
			"area_name": "Anoka County",
			"bachelorsOrHigher": 27.3
		},
		{
			"fips": 27005,
			"state": "MN",
			"area_name": "Becker County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 27007,
			"state": "MN",
			"area_name": "Beltrami County",
			"bachelorsOrHigher": 26.7
		},
		{
			"fips": 27009,
			"state": "MN",
			"area_name": "Benton County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 27011,
			"state": "MN",
			"area_name": "Big Stone County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 27013,
			"state": "MN",
			"area_name": "Blue Earth County",
			"bachelorsOrHigher": 30.4
		},
		{
			"fips": 27015,
			"state": "MN",
			"area_name": "Brown County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 27017,
			"state": "MN",
			"area_name": "Carlton County",
			"bachelorsOrHigher": 22.3
		},
		{
			"fips": 27019,
			"state": "MN",
			"area_name": "Carver County",
			"bachelorsOrHigher": 45
		},
		{
			"fips": 27021,
			"state": "MN",
			"area_name": "Cass County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 27023,
			"state": "MN",
			"area_name": "Chippewa County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 27025,
			"state": "MN",
			"area_name": "Chisago County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 27027,
			"state": "MN",
			"area_name": "Clay County",
			"bachelorsOrHigher": 30.5
		},
		{
			"fips": 27029,
			"state": "MN",
			"area_name": "Clearwater County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 27031,
			"state": "MN",
			"area_name": "Cook County",
			"bachelorsOrHigher": 40.6
		},
		{
			"fips": 27033,
			"state": "MN",
			"area_name": "Cottonwood County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 27035,
			"state": "MN",
			"area_name": "Crow Wing County",
			"bachelorsOrHigher": 23
		},
		{
			"fips": 27037,
			"state": "MN",
			"area_name": "Dakota County",
			"bachelorsOrHigher": 39.5
		},
		{
			"fips": 27039,
			"state": "MN",
			"area_name": "Dodge County",
			"bachelorsOrHigher": 24.1
		},
		{
			"fips": 27041,
			"state": "MN",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 24.2
		},
		{
			"fips": 27043,
			"state": "MN",
			"area_name": "Faribault County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 27045,
			"state": "MN",
			"area_name": "Fillmore County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 27047,
			"state": "MN",
			"area_name": "Freeborn County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 27049,
			"state": "MN",
			"area_name": "Goodhue County",
			"bachelorsOrHigher": 23.5
		},
		{
			"fips": 27051,
			"state": "MN",
			"area_name": "Grant County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 27053,
			"state": "MN",
			"area_name": "Hennepin County",
			"bachelorsOrHigher": 46.4
		},
		{
			"fips": 27055,
			"state": "MN",
			"area_name": "Houston County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 27057,
			"state": "MN",
			"area_name": "Hubbard County",
			"bachelorsOrHigher": 24.3
		},
		{
			"fips": 27059,
			"state": "MN",
			"area_name": "Isanti County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 27061,
			"state": "MN",
			"area_name": "Itasca County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 27063,
			"state": "MN",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 27065,
			"state": "MN",
			"area_name": "Kanabec County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 27067,
			"state": "MN",
			"area_name": "Kandiyohi County",
			"bachelorsOrHigher": 21.9
		},
		{
			"fips": 27069,
			"state": "MN",
			"area_name": "Kittson County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 27071,
			"state": "MN",
			"area_name": "Koochiching County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 27073,
			"state": "MN",
			"area_name": "Lac qui Parle County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 27075,
			"state": "MN",
			"area_name": "Lake County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 27077,
			"state": "MN",
			"area_name": "Lake of the Woods County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 27079,
			"state": "MN",
			"area_name": "Le Sueur County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 27081,
			"state": "MN",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 27083,
			"state": "MN",
			"area_name": "Lyon County",
			"bachelorsOrHigher": 27.2
		},
		{
			"fips": 27085,
			"state": "MN",
			"area_name": "McLeod County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 27087,
			"state": "MN",
			"area_name": "Mahnomen County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 27089,
			"state": "MN",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 27091,
			"state": "MN",
			"area_name": "Martin County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 27093,
			"state": "MN",
			"area_name": "Meeker County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 27095,
			"state": "MN",
			"area_name": "Mille Lacs County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 27097,
			"state": "MN",
			"area_name": "Morrison County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 27099,
			"state": "MN",
			"area_name": "Mower County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 27101,
			"state": "MN",
			"area_name": "Murray County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 27103,
			"state": "MN",
			"area_name": "Nicollet County",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 27105,
			"state": "MN",
			"area_name": "Nobles County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 27107,
			"state": "MN",
			"area_name": "Norman County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 27109,
			"state": "MN",
			"area_name": "Olmsted County",
			"bachelorsOrHigher": 40.2
		},
		{
			"fips": 27111,
			"state": "MN",
			"area_name": "Otter Tail County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 27113,
			"state": "MN",
			"area_name": "Pennington County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 27115,
			"state": "MN",
			"area_name": "Pine County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 27117,
			"state": "MN",
			"area_name": "Pipestone County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 27119,
			"state": "MN",
			"area_name": "Polk County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 27121,
			"state": "MN",
			"area_name": "Pope County",
			"bachelorsOrHigher": 20.6
		},
		{
			"fips": 27123,
			"state": "MN",
			"area_name": "Ramsey County",
			"bachelorsOrHigher": 39.8
		},
		{
			"fips": 27125,
			"state": "MN",
			"area_name": "Red Lake County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 27127,
			"state": "MN",
			"area_name": "Redwood County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 27129,
			"state": "MN",
			"area_name": "Renville County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 27131,
			"state": "MN",
			"area_name": "Rice County",
			"bachelorsOrHigher": 27.5
		},
		{
			"fips": 27133,
			"state": "MN",
			"area_name": "Rock County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 27135,
			"state": "MN",
			"area_name": "Roseau County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 27137,
			"state": "MN",
			"area_name": "St. Louis County",
			"bachelorsOrHigher": 26.4
		},
		{
			"fips": 27139,
			"state": "MN",
			"area_name": "Scott County",
			"bachelorsOrHigher": 38.3
		},
		{
			"fips": 27141,
			"state": "MN",
			"area_name": "Sherburne County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 27143,
			"state": "MN",
			"area_name": "Sibley County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 27145,
			"state": "MN",
			"area_name": "Stearns County",
			"bachelorsOrHigher": 25.5
		},
		{
			"fips": 27147,
			"state": "MN",
			"area_name": "Steele County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 27149,
			"state": "MN",
			"area_name": "Stevens County",
			"bachelorsOrHigher": 26.3
		},
		{
			"fips": 27151,
			"state": "MN",
			"area_name": "Swift County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 27153,
			"state": "MN",
			"area_name": "Todd County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 27155,
			"state": "MN",
			"area_name": "Traverse County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 27157,
			"state": "MN",
			"area_name": "Wabasha County",
			"bachelorsOrHigher": 20.7
		},
		{
			"fips": 27159,
			"state": "MN",
			"area_name": "Wadena County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 27161,
			"state": "MN",
			"area_name": "Waseca County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 27163,
			"state": "MN",
			"area_name": "Washington County",
			"bachelorsOrHigher": 41.3
		},
		{
			"fips": 27165,
			"state": "MN",
			"area_name": "Watonwan County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 27167,
			"state": "MN",
			"area_name": "Wilkin County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 27169,
			"state": "MN",
			"area_name": "Winona County",
			"bachelorsOrHigher": 27.5
		},
		{
			"fips": 27171,
			"state": "MN",
			"area_name": "Wright County",
			"bachelorsOrHigher": 27.4
		},
		{
			"fips": 27173,
			"state": "MN",
			"area_name": "Yellow Medicine County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 28001,
			"state": "MS",
			"area_name": "Adams County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 28003,
			"state": "MS",
			"area_name": "Alcorn County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 28005,
			"state": "MS",
			"area_name": "Amite County",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 28007,
			"state": "MS",
			"area_name": "Attala County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 28009,
			"state": "MS",
			"area_name": "Benton County",
			"bachelorsOrHigher": 8.6
		},
		{
			"fips": 28011,
			"state": "MS",
			"area_name": "Bolivar County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 28013,
			"state": "MS",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 10.6
		},
		{
			"fips": 28015,
			"state": "MS",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 28017,
			"state": "MS",
			"area_name": "Chickasaw County",
			"bachelorsOrHigher": 10.5
		},
		{
			"fips": 28019,
			"state": "MS",
			"area_name": "Choctaw County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 28021,
			"state": "MS",
			"area_name": "Claiborne County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 28023,
			"state": "MS",
			"area_name": "Clarke County",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 28025,
			"state": "MS",
			"area_name": "Clay County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 28027,
			"state": "MS",
			"area_name": "Coahoma County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 28029,
			"state": "MS",
			"area_name": "Copiah County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 28031,
			"state": "MS",
			"area_name": "Covington County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 28033,
			"state": "MS",
			"area_name": "DeSoto County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 28035,
			"state": "MS",
			"area_name": "Forrest County",
			"bachelorsOrHigher": 26.8
		},
		{
			"fips": 28037,
			"state": "MS",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 28039,
			"state": "MS",
			"area_name": "George County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 28041,
			"state": "MS",
			"area_name": "Greene County",
			"bachelorsOrHigher": 8.7
		},
		{
			"fips": 28043,
			"state": "MS",
			"area_name": "Grenada County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 28045,
			"state": "MS",
			"area_name": "Hancock County",
			"bachelorsOrHigher": 22.5
		},
		{
			"fips": 28047,
			"state": "MS",
			"area_name": "Harrison County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 28049,
			"state": "MS",
			"area_name": "Hinds County",
			"bachelorsOrHigher": 27.5
		},
		{
			"fips": 28051,
			"state": "MS",
			"area_name": "Holmes County",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 28053,
			"state": "MS",
			"area_name": "Humphreys County",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 28055,
			"state": "MS",
			"area_name": "Issaquena County",
			"bachelorsOrHigher": 7.8
		},
		{
			"fips": 28057,
			"state": "MS",
			"area_name": "Itawamba County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 28059,
			"state": "MS",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 28061,
			"state": "MS",
			"area_name": "Jasper County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 28063,
			"state": "MS",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 28065,
			"state": "MS",
			"area_name": "Jefferson Davis County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 28067,
			"state": "MS",
			"area_name": "Jones County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 28069,
			"state": "MS",
			"area_name": "Kemper County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 28071,
			"state": "MS",
			"area_name": "Lafayette County",
			"bachelorsOrHigher": 36.9
		},
		{
			"fips": 28073,
			"state": "MS",
			"area_name": "Lamar County",
			"bachelorsOrHigher": 34.1
		},
		{
			"fips": 28075,
			"state": "MS",
			"area_name": "Lauderdale County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 28077,
			"state": "MS",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 28079,
			"state": "MS",
			"area_name": "Leake County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 28081,
			"state": "MS",
			"area_name": "Lee County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 28083,
			"state": "MS",
			"area_name": "Leflore County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 28085,
			"state": "MS",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 28087,
			"state": "MS",
			"area_name": "Lowndes County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 28089,
			"state": "MS",
			"area_name": "Madison County",
			"bachelorsOrHigher": 46.3
		},
		{
			"fips": 28091,
			"state": "MS",
			"area_name": "Marion County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 28093,
			"state": "MS",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 11.3
		},
		{
			"fips": 28095,
			"state": "MS",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 28097,
			"state": "MS",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 28099,
			"state": "MS",
			"area_name": "Neshoba County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 28101,
			"state": "MS",
			"area_name": "Newton County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 28103,
			"state": "MS",
			"area_name": "Noxubee County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 28105,
			"state": "MS",
			"area_name": "Oktibbeha County",
			"bachelorsOrHigher": 42.6
		},
		{
			"fips": 28107,
			"state": "MS",
			"area_name": "Panola County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 28109,
			"state": "MS",
			"area_name": "Pearl River County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 28111,
			"state": "MS",
			"area_name": "Perry County",
			"bachelorsOrHigher": 8.4
		},
		{
			"fips": 28113,
			"state": "MS",
			"area_name": "Pike County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 28115,
			"state": "MS",
			"area_name": "Pontotoc County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 28117,
			"state": "MS",
			"area_name": "Prentiss County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 28119,
			"state": "MS",
			"area_name": "Quitman County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 28121,
			"state": "MS",
			"area_name": "Rankin County",
			"bachelorsOrHigher": 28.7
		},
		{
			"fips": 28123,
			"state": "MS",
			"area_name": "Scott County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 28125,
			"state": "MS",
			"area_name": "Sharkey County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 28127,
			"state": "MS",
			"area_name": "Simpson County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 28129,
			"state": "MS",
			"area_name": "Smith County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 28131,
			"state": "MS",
			"area_name": "Stone County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 28133,
			"state": "MS",
			"area_name": "Sunflower County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 28135,
			"state": "MS",
			"area_name": "Tallahatchie County",
			"bachelorsOrHigher": 9.7
		},
		{
			"fips": 28137,
			"state": "MS",
			"area_name": "Tate County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 28139,
			"state": "MS",
			"area_name": "Tippah County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 28141,
			"state": "MS",
			"area_name": "Tishomingo County",
			"bachelorsOrHigher": 11.3
		},
		{
			"fips": 28143,
			"state": "MS",
			"area_name": "Tunica County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 28145,
			"state": "MS",
			"area_name": "Union County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 28147,
			"state": "MS",
			"area_name": "Walthall County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 28149,
			"state": "MS",
			"area_name": "Warren County",
			"bachelorsOrHigher": 25.2
		},
		{
			"fips": 28151,
			"state": "MS",
			"area_name": "Washington County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 28153,
			"state": "MS",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 10.3
		},
		{
			"fips": 28155,
			"state": "MS",
			"area_name": "Webster County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 28157,
			"state": "MS",
			"area_name": "Wilkinson County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 28159,
			"state": "MS",
			"area_name": "Winston County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 28161,
			"state": "MS",
			"area_name": "Yalobusha County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 28163,
			"state": "MS",
			"area_name": "Yazoo County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 29001,
			"state": "MO",
			"area_name": "Adair County",
			"bachelorsOrHigher": 28.6
		},
		{
			"fips": 29003,
			"state": "MO",
			"area_name": "Andrew County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 29005,
			"state": "MO",
			"area_name": "Atchison County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 29007,
			"state": "MO",
			"area_name": "Audrain County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 29009,
			"state": "MO",
			"area_name": "Barry County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 29011,
			"state": "MO",
			"area_name": "Barton County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 29013,
			"state": "MO",
			"area_name": "Bates County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 29015,
			"state": "MO",
			"area_name": "Benton County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 29017,
			"state": "MO",
			"area_name": "Bollinger County",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 29019,
			"state": "MO",
			"area_name": "Boone County",
			"bachelorsOrHigher": 47.7
		},
		{
			"fips": 29021,
			"state": "MO",
			"area_name": "Buchanan County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 29023,
			"state": "MO",
			"area_name": "Butler County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 29025,
			"state": "MO",
			"area_name": "Caldwell County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 29027,
			"state": "MO",
			"area_name": "Callaway County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 29029,
			"state": "MO",
			"area_name": "Camden County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 29031,
			"state": "MO",
			"area_name": "Cape Girardeau County",
			"bachelorsOrHigher": 28.1
		},
		{
			"fips": 29033,
			"state": "MO",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 29035,
			"state": "MO",
			"area_name": "Carter County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 29037,
			"state": "MO",
			"area_name": "Cass County",
			"bachelorsOrHigher": 24
		},
		{
			"fips": 29039,
			"state": "MO",
			"area_name": "Cedar County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 29041,
			"state": "MO",
			"area_name": "Chariton County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 29043,
			"state": "MO",
			"area_name": "Christian County",
			"bachelorsOrHigher": 26.5
		},
		{
			"fips": 29045,
			"state": "MO",
			"area_name": "Clark County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 29047,
			"state": "MO",
			"area_name": "Clay County",
			"bachelorsOrHigher": 30.7
		},
		{
			"fips": 29049,
			"state": "MO",
			"area_name": "Clinton County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 29051,
			"state": "MO",
			"area_name": "Cole County",
			"bachelorsOrHigher": 30.9
		},
		{
			"fips": 29053,
			"state": "MO",
			"area_name": "Cooper County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 29055,
			"state": "MO",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 29057,
			"state": "MO",
			"area_name": "Dade County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 29059,
			"state": "MO",
			"area_name": "Dallas County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 29061,
			"state": "MO",
			"area_name": "Daviess County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 29063,
			"state": "MO",
			"area_name": "DeKalb County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 29065,
			"state": "MO",
			"area_name": "Dent County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 29067,
			"state": "MO",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 9.7
		},
		{
			"fips": 29069,
			"state": "MO",
			"area_name": "Dunklin County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 29071,
			"state": "MO",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 29073,
			"state": "MO",
			"area_name": "Gasconade County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 29075,
			"state": "MO",
			"area_name": "Gentry County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 29077,
			"state": "MO",
			"area_name": "Greene County",
			"bachelorsOrHigher": 28.7
		},
		{
			"fips": 29079,
			"state": "MO",
			"area_name": "Grundy County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 29081,
			"state": "MO",
			"area_name": "Harrison County",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 29083,
			"state": "MO",
			"area_name": "Henry County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 29085,
			"state": "MO",
			"area_name": "Hickory County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 29087,
			"state": "MO",
			"area_name": "Holt County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 29089,
			"state": "MO",
			"area_name": "Howard County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 29091,
			"state": "MO",
			"area_name": "Howell County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 29093,
			"state": "MO",
			"area_name": "Iron County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 29095,
			"state": "MO",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 28
		},
		{
			"fips": 29097,
			"state": "MO",
			"area_name": "Jasper County",
			"bachelorsOrHigher": 21
		},
		{
			"fips": 29099,
			"state": "MO",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 29101,
			"state": "MO",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 26
		},
		{
			"fips": 29103,
			"state": "MO",
			"area_name": "Knox County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 29105,
			"state": "MO",
			"area_name": "Laclede County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 29107,
			"state": "MO",
			"area_name": "Lafayette County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 29109,
			"state": "MO",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 29111,
			"state": "MO",
			"area_name": "Lewis County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 29113,
			"state": "MO",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 29115,
			"state": "MO",
			"area_name": "Linn County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 29117,
			"state": "MO",
			"area_name": "Livingston County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 29119,
			"state": "MO",
			"area_name": "McDonald County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 29121,
			"state": "MO",
			"area_name": "Macon County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 29123,
			"state": "MO",
			"area_name": "Madison County",
			"bachelorsOrHigher": 9.9
		},
		{
			"fips": 29125,
			"state": "MO",
			"area_name": "Maries County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 29127,
			"state": "MO",
			"area_name": "Marion County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 29129,
			"state": "MO",
			"area_name": "Mercer County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 29131,
			"state": "MO",
			"area_name": "Miller County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 29133,
			"state": "MO",
			"area_name": "Mississippi County",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 29135,
			"state": "MO",
			"area_name": "Moniteau County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 29137,
			"state": "MO",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 29139,
			"state": "MO",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 29141,
			"state": "MO",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 29143,
			"state": "MO",
			"area_name": "New Madrid County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 29145,
			"state": "MO",
			"area_name": "Newton County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 29147,
			"state": "MO",
			"area_name": "Nodaway County",
			"bachelorsOrHigher": 23.4
		},
		{
			"fips": 29149,
			"state": "MO",
			"area_name": "Oregon County",
			"bachelorsOrHigher": 9.3
		},
		{
			"fips": 29151,
			"state": "MO",
			"area_name": "Osage County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 29153,
			"state": "MO",
			"area_name": "Ozark County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 29155,
			"state": "MO",
			"area_name": "Pemiscot County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 29157,
			"state": "MO",
			"area_name": "Perry County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 29159,
			"state": "MO",
			"area_name": "Pettis County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 29161,
			"state": "MO",
			"area_name": "Phelps County",
			"bachelorsOrHigher": 28.1
		},
		{
			"fips": 29163,
			"state": "MO",
			"area_name": "Pike County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 29165,
			"state": "MO",
			"area_name": "Platte County",
			"bachelorsOrHigher": 39.2
		},
		{
			"fips": 29167,
			"state": "MO",
			"area_name": "Polk County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 29169,
			"state": "MO",
			"area_name": "Pulaski County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 29171,
			"state": "MO",
			"area_name": "Putnam County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 29173,
			"state": "MO",
			"area_name": "Ralls County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 29175,
			"state": "MO",
			"area_name": "Randolph County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 29177,
			"state": "MO",
			"area_name": "Ray County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 29179,
			"state": "MO",
			"area_name": "Reynolds County",
			"bachelorsOrHigher": 6.2
		},
		{
			"fips": 29181,
			"state": "MO",
			"area_name": "Ripley County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 29183,
			"state": "MO",
			"area_name": "St. Charles County",
			"bachelorsOrHigher": 35.5
		},
		{
			"fips": 29185,
			"state": "MO",
			"area_name": "St. Clair County",
			"bachelorsOrHigher": 11.7
		},
		{
			"fips": 29186,
			"state": "MO",
			"area_name": "Ste. Genevieve County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 29187,
			"state": "MO",
			"area_name": "St. Francois County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 29189,
			"state": "MO",
			"area_name": "St. Louis County",
			"bachelorsOrHigher": 41.4
		},
		{
			"fips": 29195,
			"state": "MO",
			"area_name": "Saline County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 29197,
			"state": "MO",
			"area_name": "Schuyler County",
			"bachelorsOrHigher": 10.4
		},
		{
			"fips": 29199,
			"state": "MO",
			"area_name": "Scotland County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 29201,
			"state": "MO",
			"area_name": "Scott County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 29203,
			"state": "MO",
			"area_name": "Shannon County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 29205,
			"state": "MO",
			"area_name": "Shelby County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 29207,
			"state": "MO",
			"area_name": "Stoddard County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 29209,
			"state": "MO",
			"area_name": "Stone County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 29211,
			"state": "MO",
			"area_name": "Sullivan County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 29213,
			"state": "MO",
			"area_name": "Taney County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 29215,
			"state": "MO",
			"area_name": "Texas County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 29217,
			"state": "MO",
			"area_name": "Vernon County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 29219,
			"state": "MO",
			"area_name": "Warren County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 29221,
			"state": "MO",
			"area_name": "Washington County",
			"bachelorsOrHigher": 7.8
		},
		{
			"fips": 29223,
			"state": "MO",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 29225,
			"state": "MO",
			"area_name": "Webster County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 29227,
			"state": "MO",
			"area_name": "Worth County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 29229,
			"state": "MO",
			"area_name": "Wright County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 29510,
			"state": "MO",
			"area_name": "St. Louis city",
			"bachelorsOrHigher": 30.4
		},
		{
			"fips": 30001,
			"state": "MT",
			"area_name": "Beaverhead County",
			"bachelorsOrHigher": 27.2
		},
		{
			"fips": 30003,
			"state": "MT",
			"area_name": "Big Horn County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 30005,
			"state": "MT",
			"area_name": "Blaine County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 30007,
			"state": "MT",
			"area_name": "Broadwater County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 30009,
			"state": "MT",
			"area_name": "Carbon County",
			"bachelorsOrHigher": 29.1
		},
		{
			"fips": 30011,
			"state": "MT",
			"area_name": "Carter County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 30013,
			"state": "MT",
			"area_name": "Cascade County",
			"bachelorsOrHigher": 25.5
		},
		{
			"fips": 30015,
			"state": "MT",
			"area_name": "Chouteau County",
			"bachelorsOrHigher": 24.4
		},
		{
			"fips": 30017,
			"state": "MT",
			"area_name": "Custer County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 30019,
			"state": "MT",
			"area_name": "Daniels County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 30021,
			"state": "MT",
			"area_name": "Dawson County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 30023,
			"state": "MT",
			"area_name": "Deer Lodge County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 30025,
			"state": "MT",
			"area_name": "Fallon County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 30027,
			"state": "MT",
			"area_name": "Fergus County",
			"bachelorsOrHigher": 27.6
		},
		{
			"fips": 30029,
			"state": "MT",
			"area_name": "Flathead County",
			"bachelorsOrHigher": 28.1
		},
		{
			"fips": 30031,
			"state": "MT",
			"area_name": "Gallatin County",
			"bachelorsOrHigher": 46.7
		},
		{
			"fips": 30033,
			"state": "MT",
			"area_name": "Garfield County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 30035,
			"state": "MT",
			"area_name": "Glacier County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 30037,
			"state": "MT",
			"area_name": "Golden Valley County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 30039,
			"state": "MT",
			"area_name": "Granite County",
			"bachelorsOrHigher": 27.5
		},
		{
			"fips": 30041,
			"state": "MT",
			"area_name": "Hill County",
			"bachelorsOrHigher": 23.5
		},
		{
			"fips": 30043,
			"state": "MT",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 33.5
		},
		{
			"fips": 30045,
			"state": "MT",
			"area_name": "Judith Basin County",
			"bachelorsOrHigher": 32.1
		},
		{
			"fips": 30047,
			"state": "MT",
			"area_name": "Lake County",
			"bachelorsOrHigher": 24.9
		},
		{
			"fips": 30049,
			"state": "MT",
			"area_name": "Lewis and Clark County",
			"bachelorsOrHigher": 37.6
		},
		{
			"fips": 30051,
			"state": "MT",
			"area_name": "Liberty County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 30053,
			"state": "MT",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 30055,
			"state": "MT",
			"area_name": "McCone County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 30057,
			"state": "MT",
			"area_name": "Madison County",
			"bachelorsOrHigher": 29.4
		},
		{
			"fips": 30059,
			"state": "MT",
			"area_name": "Meagher County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 30061,
			"state": "MT",
			"area_name": "Mineral County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 30063,
			"state": "MT",
			"area_name": "Missoula County",
			"bachelorsOrHigher": 40.2
		},
		{
			"fips": 30065,
			"state": "MT",
			"area_name": "Musselshell County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 30067,
			"state": "MT",
			"area_name": "Park County",
			"bachelorsOrHigher": 33.4
		},
		{
			"fips": 30069,
			"state": "MT",
			"area_name": "Petroleum County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 30071,
			"state": "MT",
			"area_name": "Phillips County",
			"bachelorsOrHigher": 19.8
		},
		{
			"fips": 30073,
			"state": "MT",
			"area_name": "Pondera County",
			"bachelorsOrHigher": 21.9
		},
		{
			"fips": 30075,
			"state": "MT",
			"area_name": "Powder River County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 30077,
			"state": "MT",
			"area_name": "Powell County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 30079,
			"state": "MT",
			"area_name": "Prairie County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 30081,
			"state": "MT",
			"area_name": "Ravalli County",
			"bachelorsOrHigher": 24.2
		},
		{
			"fips": 30083,
			"state": "MT",
			"area_name": "Richland County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 30085,
			"state": "MT",
			"area_name": "Roosevelt County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 30087,
			"state": "MT",
			"area_name": "Rosebud County",
			"bachelorsOrHigher": 22.9
		},
		{
			"fips": 30089,
			"state": "MT",
			"area_name": "Sanders County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 30091,
			"state": "MT",
			"area_name": "Sheridan County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 30093,
			"state": "MT",
			"area_name": "Silver Bow County",
			"bachelorsOrHigher": 23.5
		},
		{
			"fips": 30095,
			"state": "MT",
			"area_name": "Stillwater County",
			"bachelorsOrHigher": 23.5
		},
		{
			"fips": 30097,
			"state": "MT",
			"area_name": "Sweet Grass County",
			"bachelorsOrHigher": 27.8
		},
		{
			"fips": 30099,
			"state": "MT",
			"area_name": "Teton County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 30101,
			"state": "MT",
			"area_name": "Toole County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 30103,
			"state": "MT",
			"area_name": "Treasure County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 30105,
			"state": "MT",
			"area_name": "Valley County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 30107,
			"state": "MT",
			"area_name": "Wheatland County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 30109,
			"state": "MT",
			"area_name": "Wibaux County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 30111,
			"state": "MT",
			"area_name": "Yellowstone County",
			"bachelorsOrHigher": 28.7
		},
		{
			"fips": 31001,
			"state": "NE",
			"area_name": "Adams County",
			"bachelorsOrHigher": 22.3
		},
		{
			"fips": 31003,
			"state": "NE",
			"area_name": "Antelope County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 31005,
			"state": "NE",
			"area_name": "Arthur County",
			"bachelorsOrHigher": 31.6
		},
		{
			"fips": 31007,
			"state": "NE",
			"area_name": "Banner County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 31009,
			"state": "NE",
			"area_name": "Blaine County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 31011,
			"state": "NE",
			"area_name": "Boone County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 31013,
			"state": "NE",
			"area_name": "Box Butte County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 31015,
			"state": "NE",
			"area_name": "Boyd County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 31017,
			"state": "NE",
			"area_name": "Brown County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 31019,
			"state": "NE",
			"area_name": "Buffalo County",
			"bachelorsOrHigher": 32.8
		},
		{
			"fips": 31021,
			"state": "NE",
			"area_name": "Burt County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 31023,
			"state": "NE",
			"area_name": "Butler County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 31025,
			"state": "NE",
			"area_name": "Cass County",
			"bachelorsOrHigher": 24.5
		},
		{
			"fips": 31027,
			"state": "NE",
			"area_name": "Cedar County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 31029,
			"state": "NE",
			"area_name": "Chase County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 31031,
			"state": "NE",
			"area_name": "Cherry County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 31033,
			"state": "NE",
			"area_name": "Cheyenne County",
			"bachelorsOrHigher": 23.8
		},
		{
			"fips": 31035,
			"state": "NE",
			"area_name": "Clay County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 31037,
			"state": "NE",
			"area_name": "Colfax County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 31039,
			"state": "NE",
			"area_name": "Cuming County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 31041,
			"state": "NE",
			"area_name": "Custer County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 31043,
			"state": "NE",
			"area_name": "Dakota County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 31045,
			"state": "NE",
			"area_name": "Dawes County",
			"bachelorsOrHigher": 39.1
		},
		{
			"fips": 31047,
			"state": "NE",
			"area_name": "Dawson County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 31049,
			"state": "NE",
			"area_name": "Deuel County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 31051,
			"state": "NE",
			"area_name": "Dixon County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 31053,
			"state": "NE",
			"area_name": "Dodge County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 31055,
			"state": "NE",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 36.6
		},
		{
			"fips": 31057,
			"state": "NE",
			"area_name": "Dundy County",
			"bachelorsOrHigher": 21.8
		},
		{
			"fips": 31059,
			"state": "NE",
			"area_name": "Fillmore County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 31061,
			"state": "NE",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 31063,
			"state": "NE",
			"area_name": "Frontier County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 31065,
			"state": "NE",
			"area_name": "Furnas County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 31067,
			"state": "NE",
			"area_name": "Gage County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 31069,
			"state": "NE",
			"area_name": "Garden County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 31071,
			"state": "NE",
			"area_name": "Garfield County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 31073,
			"state": "NE",
			"area_name": "Gosper County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 31075,
			"state": "NE",
			"area_name": "Grant County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 31077,
			"state": "NE",
			"area_name": "Greeley County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 31079,
			"state": "NE",
			"area_name": "Hall County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 31081,
			"state": "NE",
			"area_name": "Hamilton County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 31083,
			"state": "NE",
			"area_name": "Harlan County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 31085,
			"state": "NE",
			"area_name": "Hayes County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 31087,
			"state": "NE",
			"area_name": "Hitchcock County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 31089,
			"state": "NE",
			"area_name": "Holt County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 31091,
			"state": "NE",
			"area_name": "Hooker County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 31093,
			"state": "NE",
			"area_name": "Howard County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 31095,
			"state": "NE",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 31097,
			"state": "NE",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 31099,
			"state": "NE",
			"area_name": "Kearney County",
			"bachelorsOrHigher": 24.9
		},
		{
			"fips": 31101,
			"state": "NE",
			"area_name": "Keith County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 31103,
			"state": "NE",
			"area_name": "Keya Paha County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 31105,
			"state": "NE",
			"area_name": "Kimball County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 31107,
			"state": "NE",
			"area_name": "Knox County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 31109,
			"state": "NE",
			"area_name": "Lancaster County",
			"bachelorsOrHigher": 36.2
		},
		{
			"fips": 31111,
			"state": "NE",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 31113,
			"state": "NE",
			"area_name": "Logan County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 31115,
			"state": "NE",
			"area_name": "Loup County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 31117,
			"state": "NE",
			"area_name": "McPherson County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 31119,
			"state": "NE",
			"area_name": "Madison County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 31121,
			"state": "NE",
			"area_name": "Merrick County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 31123,
			"state": "NE",
			"area_name": "Morrill County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 31125,
			"state": "NE",
			"area_name": "Nance County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 31127,
			"state": "NE",
			"area_name": "Nemaha County",
			"bachelorsOrHigher": 27.1
		},
		{
			"fips": 31129,
			"state": "NE",
			"area_name": "Nuckolls County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 31131,
			"state": "NE",
			"area_name": "Otoe County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 31133,
			"state": "NE",
			"area_name": "Pawnee County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 31135,
			"state": "NE",
			"area_name": "Perkins County",
			"bachelorsOrHigher": 20.7
		},
		{
			"fips": 31137,
			"state": "NE",
			"area_name": "Phelps County",
			"bachelorsOrHigher": 23.8
		},
		{
			"fips": 31139,
			"state": "NE",
			"area_name": "Pierce County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 31141,
			"state": "NE",
			"area_name": "Platte County",
			"bachelorsOrHigher": 20.6
		},
		{
			"fips": 31143,
			"state": "NE",
			"area_name": "Polk County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 31145,
			"state": "NE",
			"area_name": "Red Willow County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 31147,
			"state": "NE",
			"area_name": "Richardson County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 31149,
			"state": "NE",
			"area_name": "Rock County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 31151,
			"state": "NE",
			"area_name": "Saline County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 31153,
			"state": "NE",
			"area_name": "Sarpy County",
			"bachelorsOrHigher": 36.6
		},
		{
			"fips": 31155,
			"state": "NE",
			"area_name": "Saunders County",
			"bachelorsOrHigher": 24.5
		},
		{
			"fips": 31157,
			"state": "NE",
			"area_name": "Scotts Bluff County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 31159,
			"state": "NE",
			"area_name": "Seward County",
			"bachelorsOrHigher": 26.8
		},
		{
			"fips": 31161,
			"state": "NE",
			"area_name": "Sheridan County",
			"bachelorsOrHigher": 24.1
		},
		{
			"fips": 31163,
			"state": "NE",
			"area_name": "Sherman County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 31165,
			"state": "NE",
			"area_name": "Sioux County",
			"bachelorsOrHigher": 25.1
		},
		{
			"fips": 31167,
			"state": "NE",
			"area_name": "Stanton County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 31169,
			"state": "NE",
			"area_name": "Thayer County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 31171,
			"state": "NE",
			"area_name": "Thomas County",
			"bachelorsOrHigher": 24.2
		},
		{
			"fips": 31173,
			"state": "NE",
			"area_name": "Thurston County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 31175,
			"state": "NE",
			"area_name": "Valley County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 31177,
			"state": "NE",
			"area_name": "Washington County",
			"bachelorsOrHigher": 29.8
		},
		{
			"fips": 31179,
			"state": "NE",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 36.4
		},
		{
			"fips": 31181,
			"state": "NE",
			"area_name": "Webster County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 31183,
			"state": "NE",
			"area_name": "Wheeler County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 31185,
			"state": "NE",
			"area_name": "York County",
			"bachelorsOrHigher": 24.1
		},
		{
			"fips": 32001,
			"state": "NV",
			"area_name": "Churchill County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 32003,
			"state": "NV",
			"area_name": "Clark County",
			"bachelorsOrHigher": 22.2
		},
		{
			"fips": 32005,
			"state": "NV",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 32007,
			"state": "NV",
			"area_name": "Elko County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 32009,
			"state": "NV",
			"area_name": "Esmeralda County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 32011,
			"state": "NV",
			"area_name": "Eureka County",
			"bachelorsOrHigher": 22.9
		},
		{
			"fips": 32013,
			"state": "NV",
			"area_name": "Humboldt County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 32015,
			"state": "NV",
			"area_name": "Lander County",
			"bachelorsOrHigher": 9.8
		},
		{
			"fips": 32017,
			"state": "NV",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 32019,
			"state": "NV",
			"area_name": "Lyon County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 32021,
			"state": "NV",
			"area_name": "Mineral County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 32023,
			"state": "NV",
			"area_name": "Nye County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 32027,
			"state": "NV",
			"area_name": "Pershing County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 32029,
			"state": "NV",
			"area_name": "Storey County",
			"bachelorsOrHigher": 20.7
		},
		{
			"fips": 32031,
			"state": "NV",
			"area_name": "Washoe County",
			"bachelorsOrHigher": 27.9
		},
		{
			"fips": 32033,
			"state": "NV",
			"area_name": "White Pine County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 32510,
			"state": "NV",
			"area_name": "Carson City",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 33001,
			"state": "NH",
			"area_name": "Belknap County",
			"bachelorsOrHigher": 29.2
		},
		{
			"fips": 33003,
			"state": "NH",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 32.2
		},
		{
			"fips": 33005,
			"state": "NH",
			"area_name": "Cheshire County",
			"bachelorsOrHigher": 30.8
		},
		{
			"fips": 33007,
			"state": "NH",
			"area_name": "Coos County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 33009,
			"state": "NH",
			"area_name": "Grafton County",
			"bachelorsOrHigher": 37.5
		},
		{
			"fips": 33011,
			"state": "NH",
			"area_name": "Hillsborough County",
			"bachelorsOrHigher": 35.5
		},
		{
			"fips": 33013,
			"state": "NH",
			"area_name": "Merrimack County",
			"bachelorsOrHigher": 33.7
		},
		{
			"fips": 33015,
			"state": "NH",
			"area_name": "Rockingham County",
			"bachelorsOrHigher": 38
		},
		{
			"fips": 33017,
			"state": "NH",
			"area_name": "Strafford County",
			"bachelorsOrHigher": 33.2
		},
		{
			"fips": 33019,
			"state": "NH",
			"area_name": "Sullivan County",
			"bachelorsOrHigher": 27.4
		},
		{
			"fips": 34001,
			"state": "NJ",
			"area_name": "Atlantic County",
			"bachelorsOrHigher": 24.4
		},
		{
			"fips": 34003,
			"state": "NJ",
			"area_name": "Bergen County",
			"bachelorsOrHigher": 46.1
		},
		{
			"fips": 34005,
			"state": "NJ",
			"area_name": "Burlington County",
			"bachelorsOrHigher": 35.3
		},
		{
			"fips": 34007,
			"state": "NJ",
			"area_name": "Camden County",
			"bachelorsOrHigher": 29.7
		},
		{
			"fips": 34009,
			"state": "NJ",
			"area_name": "Cape May County",
			"bachelorsOrHigher": 29.2
		},
		{
			"fips": 34011,
			"state": "NJ",
			"area_name": "Cumberland County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 34013,
			"state": "NJ",
			"area_name": "Essex County",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 34015,
			"state": "NJ",
			"area_name": "Gloucester County",
			"bachelorsOrHigher": 28.7
		},
		{
			"fips": 34017,
			"state": "NJ",
			"area_name": "Hudson County",
			"bachelorsOrHigher": 36.8
		},
		{
			"fips": 34019,
			"state": "NJ",
			"area_name": "Hunterdon County",
			"bachelorsOrHigher": 48.3
		},
		{
			"fips": 34021,
			"state": "NJ",
			"area_name": "Mercer County",
			"bachelorsOrHigher": 39.8
		},
		{
			"fips": 34023,
			"state": "NJ",
			"area_name": "Middlesex County",
			"bachelorsOrHigher": 40.7
		},
		{
			"fips": 34025,
			"state": "NJ",
			"area_name": "Monmouth County",
			"bachelorsOrHigher": 42
		},
		{
			"fips": 34027,
			"state": "NJ",
			"area_name": "Morris County",
			"bachelorsOrHigher": 50.6
		},
		{
			"fips": 34029,
			"state": "NJ",
			"area_name": "Ocean County",
			"bachelorsOrHigher": 26.3
		},
		{
			"fips": 34031,
			"state": "NJ",
			"area_name": "Passaic County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 34033,
			"state": "NJ",
			"area_name": "Salem County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 34035,
			"state": "NJ",
			"area_name": "Somerset County",
			"bachelorsOrHigher": 52
		},
		{
			"fips": 34037,
			"state": "NJ",
			"area_name": "Sussex County",
			"bachelorsOrHigher": 33.1
		},
		{
			"fips": 34039,
			"state": "NJ",
			"area_name": "Union County",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 34041,
			"state": "NJ",
			"area_name": "Warren County",
			"bachelorsOrHigher": 29.5
		},
		{
			"fips": 35001,
			"state": "NM",
			"area_name": "Bernalillo County",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 35003,
			"state": "NM",
			"area_name": "Catron County",
			"bachelorsOrHigher": 20.7
		},
		{
			"fips": 35005,
			"state": "NM",
			"area_name": "Chaves County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 35006,
			"state": "NM",
			"area_name": "Cibola County",
			"bachelorsOrHigher": 11.7
		},
		{
			"fips": 35007,
			"state": "NM",
			"area_name": "Colfax County",
			"bachelorsOrHigher": 20.6
		},
		{
			"fips": 35009,
			"state": "NM",
			"area_name": "Curry County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 35011,
			"state": "NM",
			"area_name": "De Baca County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 35013,
			"state": "NM",
			"area_name": "Dona Ana County",
			"bachelorsOrHigher": 27.4
		},
		{
			"fips": 35015,
			"state": "NM",
			"area_name": "Eddy County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 35017,
			"state": "NM",
			"area_name": "Grant County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 35019,
			"state": "NM",
			"area_name": "Guadalupe County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 35021,
			"state": "NM",
			"area_name": "Harding County",
			"bachelorsOrHigher": 23.9
		},
		{
			"fips": 35023,
			"state": "NM",
			"area_name": "Hidalgo County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 35025,
			"state": "NM",
			"area_name": "Lea County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 35027,
			"state": "NM",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 26.1
		},
		{
			"fips": 35028,
			"state": "NM",
			"area_name": "Los Alamos County",
			"bachelorsOrHigher": 64
		},
		{
			"fips": 35029,
			"state": "NM",
			"area_name": "Luna County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 35031,
			"state": "NM",
			"area_name": "McKinley County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 35033,
			"state": "NM",
			"area_name": "Mora County",
			"bachelorsOrHigher": 8
		},
		{
			"fips": 35035,
			"state": "NM",
			"area_name": "Otero County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 35037,
			"state": "NM",
			"area_name": "Quay County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 35039,
			"state": "NM",
			"area_name": "Rio Arriba County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 35041,
			"state": "NM",
			"area_name": "Roosevelt County",
			"bachelorsOrHigher": 22.8
		},
		{
			"fips": 35043,
			"state": "NM",
			"area_name": "Sandoval County",
			"bachelorsOrHigher": 28.6
		},
		{
			"fips": 35045,
			"state": "NM",
			"area_name": "San Juan County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 35047,
			"state": "NM",
			"area_name": "San Miguel County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 35049,
			"state": "NM",
			"area_name": "Santa Fe County",
			"bachelorsOrHigher": 39.9
		},
		{
			"fips": 35051,
			"state": "NM",
			"area_name": "Sierra County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 35053,
			"state": "NM",
			"area_name": "Socorro County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 35055,
			"state": "NM",
			"area_name": "Taos County",
			"bachelorsOrHigher": 28.9
		},
		{
			"fips": 35057,
			"state": "NM",
			"area_name": "Torrance County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 35059,
			"state": "NM",
			"area_name": "Union County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 35061,
			"state": "NM",
			"area_name": "Valencia County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 36001,
			"state": "NY",
			"area_name": "Albany County",
			"bachelorsOrHigher": 38.7
		},
		{
			"fips": 36003,
			"state": "NY",
			"area_name": "Allegany County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 36005,
			"state": "NY",
			"area_name": "Bronx County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 36007,
			"state": "NY",
			"area_name": "Broome County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 36009,
			"state": "NY",
			"area_name": "Cattaraugus County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 36011,
			"state": "NY",
			"area_name": "Cayuga County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 36013,
			"state": "NY",
			"area_name": "Chautauqua County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 36015,
			"state": "NY",
			"area_name": "Chemung County",
			"bachelorsOrHigher": 22.9
		},
		{
			"fips": 36017,
			"state": "NY",
			"area_name": "Chenango County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 36019,
			"state": "NY",
			"area_name": "Clinton County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 36021,
			"state": "NY",
			"area_name": "Columbia County",
			"bachelorsOrHigher": 28.5
		},
		{
			"fips": 36023,
			"state": "NY",
			"area_name": "Cortland County",
			"bachelorsOrHigher": 22.7
		},
		{
			"fips": 36025,
			"state": "NY",
			"area_name": "Delaware County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 36027,
			"state": "NY",
			"area_name": "Dutchess County",
			"bachelorsOrHigher": 33.4
		},
		{
			"fips": 36029,
			"state": "NY",
			"area_name": "Erie County",
			"bachelorsOrHigher": 31.2
		},
		{
			"fips": 36031,
			"state": "NY",
			"area_name": "Essex County",
			"bachelorsOrHigher": 23.8
		},
		{
			"fips": 36033,
			"state": "NY",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 36035,
			"state": "NY",
			"area_name": "Fulton County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 36037,
			"state": "NY",
			"area_name": "Genesee County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 36039,
			"state": "NY",
			"area_name": "Greene County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 36041,
			"state": "NY",
			"area_name": "Hamilton County",
			"bachelorsOrHigher": 23.8
		},
		{
			"fips": 36043,
			"state": "NY",
			"area_name": "Herkimer County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 36045,
			"state": "NY",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 36047,
			"state": "NY",
			"area_name": "Kings County",
			"bachelorsOrHigher": 31.6
		},
		{
			"fips": 36049,
			"state": "NY",
			"area_name": "Lewis County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 36051,
			"state": "NY",
			"area_name": "Livingston County",
			"bachelorsOrHigher": 23.9
		},
		{
			"fips": 36053,
			"state": "NY",
			"area_name": "Madison County",
			"bachelorsOrHigher": 27.2
		},
		{
			"fips": 36055,
			"state": "NY",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 35.9
		},
		{
			"fips": 36057,
			"state": "NY",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 36059,
			"state": "NY",
			"area_name": "Nassau County",
			"bachelorsOrHigher": 42.3
		},
		{
			"fips": 36061,
			"state": "NY",
			"area_name": "New York County",
			"bachelorsOrHigher": 59.3
		},
		{
			"fips": 36063,
			"state": "NY",
			"area_name": "Niagara County",
			"bachelorsOrHigher": 22.9
		},
		{
			"fips": 36065,
			"state": "NY",
			"area_name": "Oneida County",
			"bachelorsOrHigher": 23.1
		},
		{
			"fips": 36067,
			"state": "NY",
			"area_name": "Onondaga County",
			"bachelorsOrHigher": 33.5
		},
		{
			"fips": 36069,
			"state": "NY",
			"area_name": "Ontario County",
			"bachelorsOrHigher": 31.6
		},
		{
			"fips": 36071,
			"state": "NY",
			"area_name": "Orange County",
			"bachelorsOrHigher": 28.6
		},
		{
			"fips": 36073,
			"state": "NY",
			"area_name": "Orleans County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 36075,
			"state": "NY",
			"area_name": "Oswego County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 36077,
			"state": "NY",
			"area_name": "Otsego County",
			"bachelorsOrHigher": 27.2
		},
		{
			"fips": 36079,
			"state": "NY",
			"area_name": "Putnam County",
			"bachelorsOrHigher": 38.2
		},
		{
			"fips": 36081,
			"state": "NY",
			"area_name": "Queens County",
			"bachelorsOrHigher": 30.2
		},
		{
			"fips": 36083,
			"state": "NY",
			"area_name": "Rensselaer County",
			"bachelorsOrHigher": 28.5
		},
		{
			"fips": 36085,
			"state": "NY",
			"area_name": "Richmond County",
			"bachelorsOrHigher": 30.6
		},
		{
			"fips": 36087,
			"state": "NY",
			"area_name": "Rockland County",
			"bachelorsOrHigher": 40.7
		},
		{
			"fips": 36089,
			"state": "NY",
			"area_name": "St. Lawrence County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 36091,
			"state": "NY",
			"area_name": "Saratoga County",
			"bachelorsOrHigher": 38
		},
		{
			"fips": 36093,
			"state": "NY",
			"area_name": "Schenectady County",
			"bachelorsOrHigher": 29.8
		},
		{
			"fips": 36095,
			"state": "NY",
			"area_name": "Schoharie County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 36097,
			"state": "NY",
			"area_name": "Schuyler County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 36099,
			"state": "NY",
			"area_name": "Seneca County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 36101,
			"state": "NY",
			"area_name": "Steuben County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 36103,
			"state": "NY",
			"area_name": "Suffolk County",
			"bachelorsOrHigher": 33.5
		},
		{
			"fips": 36105,
			"state": "NY",
			"area_name": "Sullivan County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 36107,
			"state": "NY",
			"area_name": "Tioga County",
			"bachelorsOrHigher": 23.8
		},
		{
			"fips": 36109,
			"state": "NY",
			"area_name": "Tompkins County",
			"bachelorsOrHigher": 50.3
		},
		{
			"fips": 36111,
			"state": "NY",
			"area_name": "Ulster County",
			"bachelorsOrHigher": 30.1
		},
		{
			"fips": 36113,
			"state": "NY",
			"area_name": "Warren County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 36115,
			"state": "NY",
			"area_name": "Washington County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 36117,
			"state": "NY",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 36119,
			"state": "NY",
			"area_name": "Westchester County",
			"bachelorsOrHigher": 46
		},
		{
			"fips": 36121,
			"state": "NY",
			"area_name": "Wyoming County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 36123,
			"state": "NY",
			"area_name": "Yates County",
			"bachelorsOrHigher": 24.3
		},
		{
			"fips": 37001,
			"state": "NC",
			"area_name": "Alamance County",
			"bachelorsOrHigher": 21
		},
		{
			"fips": 37003,
			"state": "NC",
			"area_name": "Alexander County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 37005,
			"state": "NC",
			"area_name": "Alleghany County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 37007,
			"state": "NC",
			"area_name": "Anson County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 37009,
			"state": "NC",
			"area_name": "Ashe County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 37011,
			"state": "NC",
			"area_name": "Avery County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 37013,
			"state": "NC",
			"area_name": "Beaufort County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 37015,
			"state": "NC",
			"area_name": "Bertie County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 37017,
			"state": "NC",
			"area_name": "Bladen County",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 37019,
			"state": "NC",
			"area_name": "Brunswick County",
			"bachelorsOrHigher": 25.4
		},
		{
			"fips": 37021,
			"state": "NC",
			"area_name": "Buncombe County",
			"bachelorsOrHigher": 35.1
		},
		{
			"fips": 37023,
			"state": "NC",
			"area_name": "Burke County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 37025,
			"state": "NC",
			"area_name": "Cabarrus County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 37027,
			"state": "NC",
			"area_name": "Caldwell County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 37029,
			"state": "NC",
			"area_name": "Camden County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 37031,
			"state": "NC",
			"area_name": "Carteret County",
			"bachelorsOrHigher": 24.2
		},
		{
			"fips": 37033,
			"state": "NC",
			"area_name": "Caswell County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 37035,
			"state": "NC",
			"area_name": "Catawba County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 37037,
			"state": "NC",
			"area_name": "Chatham County",
			"bachelorsOrHigher": 36.2
		},
		{
			"fips": 37039,
			"state": "NC",
			"area_name": "Cherokee County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 37041,
			"state": "NC",
			"area_name": "Chowan County",
			"bachelorsOrHigher": 20.9
		},
		{
			"fips": 37043,
			"state": "NC",
			"area_name": "Clay County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 37045,
			"state": "NC",
			"area_name": "Cleveland County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 37047,
			"state": "NC",
			"area_name": "Columbus County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 37049,
			"state": "NC",
			"area_name": "Craven County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 37051,
			"state": "NC",
			"area_name": "Cumberland County",
			"bachelorsOrHigher": 22.9
		},
		{
			"fips": 37053,
			"state": "NC",
			"area_name": "Currituck County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 37055,
			"state": "NC",
			"area_name": "Dare County",
			"bachelorsOrHigher": 29.4
		},
		{
			"fips": 37057,
			"state": "NC",
			"area_name": "Davidson County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 37059,
			"state": "NC",
			"area_name": "Davie County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 37061,
			"state": "NC",
			"area_name": "Duplin County",
			"bachelorsOrHigher": 10.4
		},
		{
			"fips": 37063,
			"state": "NC",
			"area_name": "Durham County",
			"bachelorsOrHigher": 45.6
		},
		{
			"fips": 37065,
			"state": "NC",
			"area_name": "Edgecombe County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 37067,
			"state": "NC",
			"area_name": "Forsyth County",
			"bachelorsOrHigher": 32.1
		},
		{
			"fips": 37069,
			"state": "NC",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 37071,
			"state": "NC",
			"area_name": "Gaston County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 37073,
			"state": "NC",
			"area_name": "Gates County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 37075,
			"state": "NC",
			"area_name": "Graham County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 37077,
			"state": "NC",
			"area_name": "Granville County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 37079,
			"state": "NC",
			"area_name": "Greene County",
			"bachelorsOrHigher": 9.7
		},
		{
			"fips": 37081,
			"state": "NC",
			"area_name": "Guilford County",
			"bachelorsOrHigher": 33.7
		},
		{
			"fips": 37083,
			"state": "NC",
			"area_name": "Halifax County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 37085,
			"state": "NC",
			"area_name": "Harnett County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 37087,
			"state": "NC",
			"area_name": "Haywood County",
			"bachelorsOrHigher": 23.8
		},
		{
			"fips": 37089,
			"state": "NC",
			"area_name": "Henderson County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 37091,
			"state": "NC",
			"area_name": "Hertford County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 37093,
			"state": "NC",
			"area_name": "Hoke County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 37095,
			"state": "NC",
			"area_name": "Hyde County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 37097,
			"state": "NC",
			"area_name": "Iredell County",
			"bachelorsOrHigher": 25.1
		},
		{
			"fips": 37099,
			"state": "NC",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 29.3
		},
		{
			"fips": 37101,
			"state": "NC",
			"area_name": "Johnston County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 37103,
			"state": "NC",
			"area_name": "Jones County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 37105,
			"state": "NC",
			"area_name": "Lee County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 37107,
			"state": "NC",
			"area_name": "Lenoir County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 37109,
			"state": "NC",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 37111,
			"state": "NC",
			"area_name": "McDowell County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 37113,
			"state": "NC",
			"area_name": "Macon County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 37115,
			"state": "NC",
			"area_name": "Madison County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 37117,
			"state": "NC",
			"area_name": "Martin County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 37119,
			"state": "NC",
			"area_name": "Mecklenburg County",
			"bachelorsOrHigher": 41.5
		},
		{
			"fips": 37121,
			"state": "NC",
			"area_name": "Mitchell County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 37123,
			"state": "NC",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 37125,
			"state": "NC",
			"area_name": "Moore County",
			"bachelorsOrHigher": 32
		},
		{
			"fips": 37127,
			"state": "NC",
			"area_name": "Nash County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 37129,
			"state": "NC",
			"area_name": "New Hanover County",
			"bachelorsOrHigher": 37.2
		},
		{
			"fips": 37131,
			"state": "NC",
			"area_name": "Northampton County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 37133,
			"state": "NC",
			"area_name": "Onslow County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 37135,
			"state": "NC",
			"area_name": "Orange County",
			"bachelorsOrHigher": 56.2
		},
		{
			"fips": 37137,
			"state": "NC",
			"area_name": "Pamlico County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 37139,
			"state": "NC",
			"area_name": "Pasquotank County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 37141,
			"state": "NC",
			"area_name": "Pender County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 37143,
			"state": "NC",
			"area_name": "Perquimans County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 37145,
			"state": "NC",
			"area_name": "Person County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 37147,
			"state": "NC",
			"area_name": "Pitt County",
			"bachelorsOrHigher": 28.8
		},
		{
			"fips": 37149,
			"state": "NC",
			"area_name": "Polk County",
			"bachelorsOrHigher": 30
		},
		{
			"fips": 37151,
			"state": "NC",
			"area_name": "Randolph County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 37153,
			"state": "NC",
			"area_name": "Richmond County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 37155,
			"state": "NC",
			"area_name": "Robeson County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 37157,
			"state": "NC",
			"area_name": "Rockingham County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 37159,
			"state": "NC",
			"area_name": "Rowan County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 37161,
			"state": "NC",
			"area_name": "Rutherford County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 37163,
			"state": "NC",
			"area_name": "Sampson County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 37165,
			"state": "NC",
			"area_name": "Scotland County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 37167,
			"state": "NC",
			"area_name": "Stanly County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 37169,
			"state": "NC",
			"area_name": "Stokes County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 37171,
			"state": "NC",
			"area_name": "Surry County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 37173,
			"state": "NC",
			"area_name": "Swain County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 37175,
			"state": "NC",
			"area_name": "Transylvania County",
			"bachelorsOrHigher": 29
		},
		{
			"fips": 37177,
			"state": "NC",
			"area_name": "Tyrrell County",
			"bachelorsOrHigher": 8
		},
		{
			"fips": 37179,
			"state": "NC",
			"area_name": "Union County",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 37181,
			"state": "NC",
			"area_name": "Vance County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 37183,
			"state": "NC",
			"area_name": "Wake County",
			"bachelorsOrHigher": 48.3
		},
		{
			"fips": 37185,
			"state": "NC",
			"area_name": "Warren County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 37187,
			"state": "NC",
			"area_name": "Washington County",
			"bachelorsOrHigher": 9.5
		},
		{
			"fips": 37189,
			"state": "NC",
			"area_name": "Watauga County",
			"bachelorsOrHigher": 38
		},
		{
			"fips": 37191,
			"state": "NC",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 37193,
			"state": "NC",
			"area_name": "Wilkes County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 37195,
			"state": "NC",
			"area_name": "Wilson County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 37197,
			"state": "NC",
			"area_name": "Yadkin County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 37199,
			"state": "NC",
			"area_name": "Yancey County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 38001,
			"state": "ND",
			"area_name": "Adams County",
			"bachelorsOrHigher": 23.9
		},
		{
			"fips": 38003,
			"state": "ND",
			"area_name": "Barnes County",
			"bachelorsOrHigher": 24.3
		},
		{
			"fips": 38005,
			"state": "ND",
			"area_name": "Benson County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 38007,
			"state": "ND",
			"area_name": "Billings County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 38009,
			"state": "ND",
			"area_name": "Bottineau County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 38011,
			"state": "ND",
			"area_name": "Bowman County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 38013,
			"state": "ND",
			"area_name": "Burke County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 38015,
			"state": "ND",
			"area_name": "Burleigh County",
			"bachelorsOrHigher": 33.4
		},
		{
			"fips": 38017,
			"state": "ND",
			"area_name": "Cass County",
			"bachelorsOrHigher": 37.4
		},
		{
			"fips": 38019,
			"state": "ND",
			"area_name": "Cavalier County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 38021,
			"state": "ND",
			"area_name": "Dickey County",
			"bachelorsOrHigher": 25
		},
		{
			"fips": 38023,
			"state": "ND",
			"area_name": "Divide County",
			"bachelorsOrHigher": 23.3
		},
		{
			"fips": 38025,
			"state": "ND",
			"area_name": "Dunn County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 38027,
			"state": "ND",
			"area_name": "Eddy County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 38029,
			"state": "ND",
			"area_name": "Emmons County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 38031,
			"state": "ND",
			"area_name": "Foster County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 38033,
			"state": "ND",
			"area_name": "Golden Valley County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 38035,
			"state": "ND",
			"area_name": "Grand Forks County",
			"bachelorsOrHigher": 32.6
		},
		{
			"fips": 38037,
			"state": "ND",
			"area_name": "Grant County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 38039,
			"state": "ND",
			"area_name": "Griggs County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 38041,
			"state": "ND",
			"area_name": "Hettinger County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 38043,
			"state": "ND",
			"area_name": "Kidder County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 38045,
			"state": "ND",
			"area_name": "LaMoure County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 38047,
			"state": "ND",
			"area_name": "Logan County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 38049,
			"state": "ND",
			"area_name": "McHenry County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 38051,
			"state": "ND",
			"area_name": "McIntosh County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 38053,
			"state": "ND",
			"area_name": "McKenzie County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 38055,
			"state": "ND",
			"area_name": "McLean County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 38057,
			"state": "ND",
			"area_name": "Mercer County",
			"bachelorsOrHigher": 19.8
		},
		{
			"fips": 38059,
			"state": "ND",
			"area_name": "Morton County",
			"bachelorsOrHigher": 25.3
		},
		{
			"fips": 38061,
			"state": "ND",
			"area_name": "Mountrail County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 38063,
			"state": "ND",
			"area_name": "Nelson County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 38065,
			"state": "ND",
			"area_name": "Oliver County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 38067,
			"state": "ND",
			"area_name": "Pembina County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 38069,
			"state": "ND",
			"area_name": "Pierce County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 38071,
			"state": "ND",
			"area_name": "Ramsey County",
			"bachelorsOrHigher": 22.8
		},
		{
			"fips": 38073,
			"state": "ND",
			"area_name": "Ransom County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 38075,
			"state": "ND",
			"area_name": "Renville County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 38077,
			"state": "ND",
			"area_name": "Richland County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 38079,
			"state": "ND",
			"area_name": "Rolette County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 38081,
			"state": "ND",
			"area_name": "Sargent County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 38083,
			"state": "ND",
			"area_name": "Sheridan County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 38085,
			"state": "ND",
			"area_name": "Sioux County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 38087,
			"state": "ND",
			"area_name": "Slope County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 38089,
			"state": "ND",
			"area_name": "Stark County",
			"bachelorsOrHigher": 24.3
		},
		{
			"fips": 38091,
			"state": "ND",
			"area_name": "Steele County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 38093,
			"state": "ND",
			"area_name": "Stutsman County",
			"bachelorsOrHigher": 22.3
		},
		{
			"fips": 38095,
			"state": "ND",
			"area_name": "Towner County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 38097,
			"state": "ND",
			"area_name": "Traill County",
			"bachelorsOrHigher": 27.9
		},
		{
			"fips": 38099,
			"state": "ND",
			"area_name": "Walsh County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 38101,
			"state": "ND",
			"area_name": "Ward County",
			"bachelorsOrHigher": 25.3
		},
		{
			"fips": 38103,
			"state": "ND",
			"area_name": "Wells County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 38105,
			"state": "ND",
			"area_name": "Williams County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 39001,
			"state": "OH",
			"area_name": "Adams County",
			"bachelorsOrHigher": 9.8
		},
		{
			"fips": 39003,
			"state": "OH",
			"area_name": "Allen County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 39005,
			"state": "OH",
			"area_name": "Ashland County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 39007,
			"state": "OH",
			"area_name": "Ashtabula County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 39009,
			"state": "OH",
			"area_name": "Athens County",
			"bachelorsOrHigher": 28.8
		},
		{
			"fips": 39011,
			"state": "OH",
			"area_name": "Auglaize County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 39013,
			"state": "OH",
			"area_name": "Belmont County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 39015,
			"state": "OH",
			"area_name": "Brown County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 39017,
			"state": "OH",
			"area_name": "Butler County",
			"bachelorsOrHigher": 28.1
		},
		{
			"fips": 39019,
			"state": "OH",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 10.6
		},
		{
			"fips": 39021,
			"state": "OH",
			"area_name": "Champaign County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 39023,
			"state": "OH",
			"area_name": "Clark County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 39025,
			"state": "OH",
			"area_name": "Clermont County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 39027,
			"state": "OH",
			"area_name": "Clinton County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 39029,
			"state": "OH",
			"area_name": "Columbiana County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 39031,
			"state": "OH",
			"area_name": "Coshocton County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 39033,
			"state": "OH",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 39035,
			"state": "OH",
			"area_name": "Cuyahoga County",
			"bachelorsOrHigher": 30.3
		},
		{
			"fips": 39037,
			"state": "OH",
			"area_name": "Darke County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 39039,
			"state": "OH",
			"area_name": "Defiance County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 39041,
			"state": "OH",
			"area_name": "Delaware County",
			"bachelorsOrHigher": 51.1
		},
		{
			"fips": 39043,
			"state": "OH",
			"area_name": "Erie County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 39045,
			"state": "OH",
			"area_name": "Fairfield County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 39047,
			"state": "OH",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 39049,
			"state": "OH",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 36.7
		},
		{
			"fips": 39051,
			"state": "OH",
			"area_name": "Fulton County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 39053,
			"state": "OH",
			"area_name": "Gallia County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 39055,
			"state": "OH",
			"area_name": "Geauga County",
			"bachelorsOrHigher": 36
		},
		{
			"fips": 39057,
			"state": "OH",
			"area_name": "Greene County",
			"bachelorsOrHigher": 36.9
		},
		{
			"fips": 39059,
			"state": "OH",
			"area_name": "Guernsey County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 39061,
			"state": "OH",
			"area_name": "Hamilton County",
			"bachelorsOrHigher": 34.3
		},
		{
			"fips": 39063,
			"state": "OH",
			"area_name": "Hancock County",
			"bachelorsOrHigher": 24.9
		},
		{
			"fips": 39065,
			"state": "OH",
			"area_name": "Hardin County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 39067,
			"state": "OH",
			"area_name": "Harrison County",
			"bachelorsOrHigher": 9.5
		},
		{
			"fips": 39069,
			"state": "OH",
			"area_name": "Henry County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 39071,
			"state": "OH",
			"area_name": "Highland County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 39073,
			"state": "OH",
			"area_name": "Hocking County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 39075,
			"state": "OH",
			"area_name": "Holmes County",
			"bachelorsOrHigher": 7.8
		},
		{
			"fips": 39077,
			"state": "OH",
			"area_name": "Huron County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 39079,
			"state": "OH",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 39081,
			"state": "OH",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 39083,
			"state": "OH",
			"area_name": "Knox County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 39085,
			"state": "OH",
			"area_name": "Lake County",
			"bachelorsOrHigher": 26
		},
		{
			"fips": 39087,
			"state": "OH",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 39089,
			"state": "OH",
			"area_name": "Licking County",
			"bachelorsOrHigher": 22.6
		},
		{
			"fips": 39091,
			"state": "OH",
			"area_name": "Logan County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 39093,
			"state": "OH",
			"area_name": "Lorain County",
			"bachelorsOrHigher": 22.3
		},
		{
			"fips": 39095,
			"state": "OH",
			"area_name": "Lucas County",
			"bachelorsOrHigher": 24.2
		},
		{
			"fips": 39097,
			"state": "OH",
			"area_name": "Madison County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 39099,
			"state": "OH",
			"area_name": "Mahoning County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 39101,
			"state": "OH",
			"area_name": "Marion County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 39103,
			"state": "OH",
			"area_name": "Medina County",
			"bachelorsOrHigher": 29.9
		},
		{
			"fips": 39105,
			"state": "OH",
			"area_name": "Meigs County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 39107,
			"state": "OH",
			"area_name": "Mercer County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 39109,
			"state": "OH",
			"area_name": "Miami County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 39111,
			"state": "OH",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 10.3
		},
		{
			"fips": 39113,
			"state": "OH",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 39115,
			"state": "OH",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 39117,
			"state": "OH",
			"area_name": "Morrow County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 39119,
			"state": "OH",
			"area_name": "Muskingum County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 39121,
			"state": "OH",
			"area_name": "Noble County",
			"bachelorsOrHigher": 9.5
		},
		{
			"fips": 39123,
			"state": "OH",
			"area_name": "Ottawa County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 39125,
			"state": "OH",
			"area_name": "Paulding County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 39127,
			"state": "OH",
			"area_name": "Perry County",
			"bachelorsOrHigher": 11
		},
		{
			"fips": 39129,
			"state": "OH",
			"area_name": "Pickaway County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 39131,
			"state": "OH",
			"area_name": "Pike County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 39133,
			"state": "OH",
			"area_name": "Portage County",
			"bachelorsOrHigher": 25.5
		},
		{
			"fips": 39135,
			"state": "OH",
			"area_name": "Preble County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 39137,
			"state": "OH",
			"area_name": "Putnam County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 39139,
			"state": "OH",
			"area_name": "Richland County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 39141,
			"state": "OH",
			"area_name": "Ross County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 39143,
			"state": "OH",
			"area_name": "Sandusky County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 39145,
			"state": "OH",
			"area_name": "Scioto County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 39147,
			"state": "OH",
			"area_name": "Seneca County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 39149,
			"state": "OH",
			"area_name": "Shelby County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 39151,
			"state": "OH",
			"area_name": "Stark County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 39153,
			"state": "OH",
			"area_name": "Summit County",
			"bachelorsOrHigher": 29.9
		},
		{
			"fips": 39155,
			"state": "OH",
			"area_name": "Trumbull County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 39157,
			"state": "OH",
			"area_name": "Tuscarawas County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 39159,
			"state": "OH",
			"area_name": "Union County",
			"bachelorsOrHigher": 26
		},
		{
			"fips": 39161,
			"state": "OH",
			"area_name": "Van Wert County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 39163,
			"state": "OH",
			"area_name": "Vinton County",
			"bachelorsOrHigher": 8.7
		},
		{
			"fips": 39165,
			"state": "OH",
			"area_name": "Warren County",
			"bachelorsOrHigher": 38.7
		},
		{
			"fips": 39167,
			"state": "OH",
			"area_name": "Washington County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 39169,
			"state": "OH",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 39171,
			"state": "OH",
			"area_name": "Williams County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 39173,
			"state": "OH",
			"area_name": "Wood County",
			"bachelorsOrHigher": 30.8
		},
		{
			"fips": 39175,
			"state": "OH",
			"area_name": "Wyandot County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 40001,
			"state": "OK",
			"area_name": "Adair County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 40003,
			"state": "OK",
			"area_name": "Alfalfa County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 40005,
			"state": "OK",
			"area_name": "Atoka County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 40007,
			"state": "OK",
			"area_name": "Beaver County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 40009,
			"state": "OK",
			"area_name": "Beckham County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 40011,
			"state": "OK",
			"area_name": "Blaine County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 40013,
			"state": "OK",
			"area_name": "Bryan County",
			"bachelorsOrHigher": 20.7
		},
		{
			"fips": 40015,
			"state": "OK",
			"area_name": "Caddo County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 40017,
			"state": "OK",
			"area_name": "Canadian County",
			"bachelorsOrHigher": 25.4
		},
		{
			"fips": 40019,
			"state": "OK",
			"area_name": "Carter County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 40021,
			"state": "OK",
			"area_name": "Cherokee County",
			"bachelorsOrHigher": 23.9
		},
		{
			"fips": 40023,
			"state": "OK",
			"area_name": "Choctaw County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 40025,
			"state": "OK",
			"area_name": "Cimarron County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 40027,
			"state": "OK",
			"area_name": "Cleveland County",
			"bachelorsOrHigher": 31
		},
		{
			"fips": 40029,
			"state": "OK",
			"area_name": "Coal County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 40031,
			"state": "OK",
			"area_name": "Comanche County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 40033,
			"state": "OK",
			"area_name": "Cotton County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 40035,
			"state": "OK",
			"area_name": "Craig County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 40037,
			"state": "OK",
			"area_name": "Creek County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 40039,
			"state": "OK",
			"area_name": "Custer County",
			"bachelorsOrHigher": 27.3
		},
		{
			"fips": 40041,
			"state": "OK",
			"area_name": "Delaware County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 40043,
			"state": "OK",
			"area_name": "Dewey County",
			"bachelorsOrHigher": 22.6
		},
		{
			"fips": 40045,
			"state": "OK",
			"area_name": "Ellis County",
			"bachelorsOrHigher": 24.9
		},
		{
			"fips": 40047,
			"state": "OK",
			"area_name": "Garfield County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 40049,
			"state": "OK",
			"area_name": "Garvin County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 40051,
			"state": "OK",
			"area_name": "Grady County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 40053,
			"state": "OK",
			"area_name": "Grant County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 40055,
			"state": "OK",
			"area_name": "Greer County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 40057,
			"state": "OK",
			"area_name": "Harmon County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 40059,
			"state": "OK",
			"area_name": "Harper County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 40061,
			"state": "OK",
			"area_name": "Haskell County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 40063,
			"state": "OK",
			"area_name": "Hughes County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 40065,
			"state": "OK",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 19.8
		},
		{
			"fips": 40067,
			"state": "OK",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 40069,
			"state": "OK",
			"area_name": "Johnston County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 40071,
			"state": "OK",
			"area_name": "Kay County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 40073,
			"state": "OK",
			"area_name": "Kingfisher County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 40075,
			"state": "OK",
			"area_name": "Kiowa County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 40077,
			"state": "OK",
			"area_name": "Latimer County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 40079,
			"state": "OK",
			"area_name": "Le Flore County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 40081,
			"state": "OK",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 40083,
			"state": "OK",
			"area_name": "Logan County",
			"bachelorsOrHigher": 26.5
		},
		{
			"fips": 40085,
			"state": "OK",
			"area_name": "Love County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 40087,
			"state": "OK",
			"area_name": "McClain County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 40089,
			"state": "OK",
			"area_name": "McCurtain County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 40091,
			"state": "OK",
			"area_name": "McIntosh County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 40093,
			"state": "OK",
			"area_name": "Major County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 40095,
			"state": "OK",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 40097,
			"state": "OK",
			"area_name": "Mayes County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 40099,
			"state": "OK",
			"area_name": "Murray County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 40101,
			"state": "OK",
			"area_name": "Muskogee County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 40103,
			"state": "OK",
			"area_name": "Noble County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 40105,
			"state": "OK",
			"area_name": "Nowata County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 40107,
			"state": "OK",
			"area_name": "Okfuskee County",
			"bachelorsOrHigher": 10.5
		},
		{
			"fips": 40109,
			"state": "OK",
			"area_name": "Oklahoma County",
			"bachelorsOrHigher": 30.2
		},
		{
			"fips": 40111,
			"state": "OK",
			"area_name": "Okmulgee County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 40113,
			"state": "OK",
			"area_name": "Osage County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 40115,
			"state": "OK",
			"area_name": "Ottawa County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 40117,
			"state": "OK",
			"area_name": "Pawnee County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 40119,
			"state": "OK",
			"area_name": "Payne County",
			"bachelorsOrHigher": 36.4
		},
		{
			"fips": 40121,
			"state": "OK",
			"area_name": "Pittsburg County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 40123,
			"state": "OK",
			"area_name": "Pontotoc County",
			"bachelorsOrHigher": 27.1
		},
		{
			"fips": 40125,
			"state": "OK",
			"area_name": "Pottawatomie County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 40127,
			"state": "OK",
			"area_name": "Pushmataha County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 40129,
			"state": "OK",
			"area_name": "Roger Mills County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 40131,
			"state": "OK",
			"area_name": "Rogers County",
			"bachelorsOrHigher": 23.1
		},
		{
			"fips": 40133,
			"state": "OK",
			"area_name": "Seminole County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 40135,
			"state": "OK",
			"area_name": "Sequoyah County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 40137,
			"state": "OK",
			"area_name": "Stephens County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 40139,
			"state": "OK",
			"area_name": "Texas County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 40141,
			"state": "OK",
			"area_name": "Tillman County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 40143,
			"state": "OK",
			"area_name": "Tulsa County",
			"bachelorsOrHigher": 30
		},
		{
			"fips": 40145,
			"state": "OK",
			"area_name": "Wagoner County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 40147,
			"state": "OK",
			"area_name": "Washington County",
			"bachelorsOrHigher": 26.1
		},
		{
			"fips": 40149,
			"state": "OK",
			"area_name": "Washita County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 40151,
			"state": "OK",
			"area_name": "Woods County",
			"bachelorsOrHigher": 25.7
		},
		{
			"fips": 40153,
			"state": "OK",
			"area_name": "Woodward County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 41001,
			"state": "OR",
			"area_name": "Baker County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 41003,
			"state": "OR",
			"area_name": "Benton County",
			"bachelorsOrHigher": 51.4
		},
		{
			"fips": 41005,
			"state": "OR",
			"area_name": "Clackamas County",
			"bachelorsOrHigher": 32
		},
		{
			"fips": 41007,
			"state": "OR",
			"area_name": "Clatsop County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 41009,
			"state": "OR",
			"area_name": "Columbia County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 41011,
			"state": "OR",
			"area_name": "Coos County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 41013,
			"state": "OR",
			"area_name": "Crook County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 41015,
			"state": "OR",
			"area_name": "Curry County",
			"bachelorsOrHigher": 22.2
		},
		{
			"fips": 41017,
			"state": "OR",
			"area_name": "Deschutes County",
			"bachelorsOrHigher": 31.3
		},
		{
			"fips": 41019,
			"state": "OR",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 41021,
			"state": "OR",
			"area_name": "Gilliam County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 41023,
			"state": "OR",
			"area_name": "Grant County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 41025,
			"state": "OR",
			"area_name": "Harney County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 41027,
			"state": "OR",
			"area_name": "Hood River County",
			"bachelorsOrHigher": 32
		},
		{
			"fips": 41029,
			"state": "OR",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 25.1
		},
		{
			"fips": 41031,
			"state": "OR",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 41033,
			"state": "OR",
			"area_name": "Josephine County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 41035,
			"state": "OR",
			"area_name": "Klamath County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 41037,
			"state": "OR",
			"area_name": "Lake County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 41039,
			"state": "OR",
			"area_name": "Lane County",
			"bachelorsOrHigher": 28.2
		},
		{
			"fips": 41041,
			"state": "OR",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 24.3
		},
		{
			"fips": 41043,
			"state": "OR",
			"area_name": "Linn County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 41045,
			"state": "OR",
			"area_name": "Malheur County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 41047,
			"state": "OR",
			"area_name": "Marion County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 41049,
			"state": "OR",
			"area_name": "Morrow County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 41051,
			"state": "OR",
			"area_name": "Multnomah County",
			"bachelorsOrHigher": 40.3
		},
		{
			"fips": 41053,
			"state": "OR",
			"area_name": "Polk County",
			"bachelorsOrHigher": 28.9
		},
		{
			"fips": 41055,
			"state": "OR",
			"area_name": "Sherman County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 41057,
			"state": "OR",
			"area_name": "Tillamook County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 41059,
			"state": "OR",
			"area_name": "Umatilla County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 41061,
			"state": "OR",
			"area_name": "Union County",
			"bachelorsOrHigher": 22.7
		},
		{
			"fips": 41063,
			"state": "OR",
			"area_name": "Wallowa County",
			"bachelorsOrHigher": 25.1
		},
		{
			"fips": 41065,
			"state": "OR",
			"area_name": "Wasco County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 41067,
			"state": "OR",
			"area_name": "Washington County",
			"bachelorsOrHigher": 39.7
		},
		{
			"fips": 41069,
			"state": "OR",
			"area_name": "Wheeler County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 41071,
			"state": "OR",
			"area_name": "Yamhill County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 42001,
			"state": "PA",
			"area_name": "Adams County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 42003,
			"state": "PA",
			"area_name": "Allegheny County",
			"bachelorsOrHigher": 36.9
		},
		{
			"fips": 42005,
			"state": "PA",
			"area_name": "Armstrong County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 42007,
			"state": "PA",
			"area_name": "Beaver County",
			"bachelorsOrHigher": 22.6
		},
		{
			"fips": 42009,
			"state": "PA",
			"area_name": "Bedford County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 42011,
			"state": "PA",
			"area_name": "Berks County",
			"bachelorsOrHigher": 22.7
		},
		{
			"fips": 42013,
			"state": "PA",
			"area_name": "Blair County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 42015,
			"state": "PA",
			"area_name": "Bradford County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 42017,
			"state": "PA",
			"area_name": "Bucks County",
			"bachelorsOrHigher": 36.5
		},
		{
			"fips": 42019,
			"state": "PA",
			"area_name": "Butler County",
			"bachelorsOrHigher": 31.7
		},
		{
			"fips": 42021,
			"state": "PA",
			"area_name": "Cambria County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 42023,
			"state": "PA",
			"area_name": "Cameron County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 42025,
			"state": "PA",
			"area_name": "Carbon County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 42027,
			"state": "PA",
			"area_name": "Centre County",
			"bachelorsOrHigher": 40.4
		},
		{
			"fips": 42029,
			"state": "PA",
			"area_name": "Chester County",
			"bachelorsOrHigher": 48.8
		},
		{
			"fips": 42031,
			"state": "PA",
			"area_name": "Clarion County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 42033,
			"state": "PA",
			"area_name": "Clearfield County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 42035,
			"state": "PA",
			"area_name": "Clinton County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 42037,
			"state": "PA",
			"area_name": "Columbia County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 42039,
			"state": "PA",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 42041,
			"state": "PA",
			"area_name": "Cumberland County",
			"bachelorsOrHigher": 32.8
		},
		{
			"fips": 42043,
			"state": "PA",
			"area_name": "Dauphin County",
			"bachelorsOrHigher": 28.2
		},
		{
			"fips": 42045,
			"state": "PA",
			"area_name": "Delaware County",
			"bachelorsOrHigher": 35.5
		},
		{
			"fips": 42047,
			"state": "PA",
			"area_name": "Elk County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 42049,
			"state": "PA",
			"area_name": "Erie County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 42051,
			"state": "PA",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 42053,
			"state": "PA",
			"area_name": "Forest County",
			"bachelorsOrHigher": 9.2
		},
		{
			"fips": 42055,
			"state": "PA",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 42057,
			"state": "PA",
			"area_name": "Fulton County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 42059,
			"state": "PA",
			"area_name": "Greene County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 42061,
			"state": "PA",
			"area_name": "Huntingdon County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 42063,
			"state": "PA",
			"area_name": "Indiana County",
			"bachelorsOrHigher": 23.3
		},
		{
			"fips": 42065,
			"state": "PA",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 42067,
			"state": "PA",
			"area_name": "Juniata County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 42069,
			"state": "PA",
			"area_name": "Lackawanna County",
			"bachelorsOrHigher": 25.7
		},
		{
			"fips": 42071,
			"state": "PA",
			"area_name": "Lancaster County",
			"bachelorsOrHigher": 24.7
		},
		{
			"fips": 42073,
			"state": "PA",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 42075,
			"state": "PA",
			"area_name": "Lebanon County",
			"bachelorsOrHigher": 19.8
		},
		{
			"fips": 42077,
			"state": "PA",
			"area_name": "Lehigh County",
			"bachelorsOrHigher": 28.1
		},
		{
			"fips": 42079,
			"state": "PA",
			"area_name": "Luzerne County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 42081,
			"state": "PA",
			"area_name": "Lycoming County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 42083,
			"state": "PA",
			"area_name": "McKean County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 42085,
			"state": "PA",
			"area_name": "Mercer County",
			"bachelorsOrHigher": 20.6
		},
		{
			"fips": 42087,
			"state": "PA",
			"area_name": "Mifflin County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 42089,
			"state": "PA",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 42091,
			"state": "PA",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 46.2
		},
		{
			"fips": 42093,
			"state": "PA",
			"area_name": "Montour County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 42095,
			"state": "PA",
			"area_name": "Northampton County",
			"bachelorsOrHigher": 27.2
		},
		{
			"fips": 42097,
			"state": "PA",
			"area_name": "Northumberland County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 42099,
			"state": "PA",
			"area_name": "Perry County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 42101,
			"state": "PA",
			"area_name": "Philadelphia County",
			"bachelorsOrHigher": 24.5
		},
		{
			"fips": 42103,
			"state": "PA",
			"area_name": "Pike County",
			"bachelorsOrHigher": 22.9
		},
		{
			"fips": 42105,
			"state": "PA",
			"area_name": "Potter County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 42107,
			"state": "PA",
			"area_name": "Schuylkill County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 42109,
			"state": "PA",
			"area_name": "Snyder County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 42111,
			"state": "PA",
			"area_name": "Somerset County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 42113,
			"state": "PA",
			"area_name": "Sullivan County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 42115,
			"state": "PA",
			"area_name": "Susquehanna County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 42117,
			"state": "PA",
			"area_name": "Tioga County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 42119,
			"state": "PA",
			"area_name": "Union County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 42121,
			"state": "PA",
			"area_name": "Venango County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 42123,
			"state": "PA",
			"area_name": "Warren County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 42125,
			"state": "PA",
			"area_name": "Washington County",
			"bachelorsOrHigher": 26.6
		},
		{
			"fips": 42127,
			"state": "PA",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 42129,
			"state": "PA",
			"area_name": "Westmoreland County",
			"bachelorsOrHigher": 26.2
		},
		{
			"fips": 42131,
			"state": "PA",
			"area_name": "Wyoming County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 42133,
			"state": "PA",
			"area_name": "York County",
			"bachelorsOrHigher": 22.5
		},
		{
			"fips": 44001,
			"state": "RI",
			"area_name": "Bristol County",
			"bachelorsOrHigher": 43.5
		},
		{
			"fips": 44003,
			"state": "RI",
			"area_name": "Kent County",
			"bachelorsOrHigher": 30.1
		},
		{
			"fips": 44005,
			"state": "RI",
			"area_name": "Newport County",
			"bachelorsOrHigher": 44.9
		},
		{
			"fips": 44007,
			"state": "RI",
			"area_name": "Providence County",
			"bachelorsOrHigher": 26.4
		},
		{
			"fips": 44009,
			"state": "RI",
			"area_name": "Washington County",
			"bachelorsOrHigher": 43.8
		},
		{
			"fips": 45001,
			"state": "SC",
			"area_name": "Abbeville County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 45003,
			"state": "SC",
			"area_name": "Aiken County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 45005,
			"state": "SC",
			"area_name": "Allendale County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 45007,
			"state": "SC",
			"area_name": "Anderson County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 45009,
			"state": "SC",
			"area_name": "Bamberg County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 45011,
			"state": "SC",
			"area_name": "Barnwell County",
			"bachelorsOrHigher": 11.7
		},
		{
			"fips": 45013,
			"state": "SC",
			"area_name": "Beaufort County",
			"bachelorsOrHigher": 37.4
		},
		{
			"fips": 45015,
			"state": "SC",
			"area_name": "Berkeley County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 45017,
			"state": "SC",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 45019,
			"state": "SC",
			"area_name": "Charleston County",
			"bachelorsOrHigher": 40
		},
		{
			"fips": 45021,
			"state": "SC",
			"area_name": "Cherokee County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 45023,
			"state": "SC",
			"area_name": "Chester County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 45025,
			"state": "SC",
			"area_name": "Chesterfield County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 45027,
			"state": "SC",
			"area_name": "Clarendon County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 45029,
			"state": "SC",
			"area_name": "Colleton County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 45031,
			"state": "SC",
			"area_name": "Darlington County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 45033,
			"state": "SC",
			"area_name": "Dillon County",
			"bachelorsOrHigher": 8.3
		},
		{
			"fips": 45035,
			"state": "SC",
			"area_name": "Dorchester County",
			"bachelorsOrHigher": 24.9
		},
		{
			"fips": 45037,
			"state": "SC",
			"area_name": "Edgefield County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 45039,
			"state": "SC",
			"area_name": "Fairfield County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 45041,
			"state": "SC",
			"area_name": "Florence County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 45043,
			"state": "SC",
			"area_name": "Georgetown County",
			"bachelorsOrHigher": 23.8
		},
		{
			"fips": 45045,
			"state": "SC",
			"area_name": "Greenville County",
			"bachelorsOrHigher": 31.6
		},
		{
			"fips": 45047,
			"state": "SC",
			"area_name": "Greenwood County",
			"bachelorsOrHigher": 23
		},
		{
			"fips": 45049,
			"state": "SC",
			"area_name": "Hampton County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 45051,
			"state": "SC",
			"area_name": "Horry County",
			"bachelorsOrHigher": 22.9
		},
		{
			"fips": 45053,
			"state": "SC",
			"area_name": "Jasper County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 45055,
			"state": "SC",
			"area_name": "Kershaw County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 45057,
			"state": "SC",
			"area_name": "Lancaster County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 45059,
			"state": "SC",
			"area_name": "Laurens County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 45061,
			"state": "SC",
			"area_name": "Lee County",
			"bachelorsOrHigher": 9.7
		},
		{
			"fips": 45063,
			"state": "SC",
			"area_name": "Lexington County",
			"bachelorsOrHigher": 28.7
		},
		{
			"fips": 45065,
			"state": "SC",
			"area_name": "McCormick County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 45067,
			"state": "SC",
			"area_name": "Marion County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 45069,
			"state": "SC",
			"area_name": "Marlboro County",
			"bachelorsOrHigher": 9
		},
		{
			"fips": 45071,
			"state": "SC",
			"area_name": "Newberry County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 45073,
			"state": "SC",
			"area_name": "Oconee County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 45075,
			"state": "SC",
			"area_name": "Orangeburg County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 45077,
			"state": "SC",
			"area_name": "Pickens County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 45079,
			"state": "SC",
			"area_name": "Richland County",
			"bachelorsOrHigher": 36.2
		},
		{
			"fips": 45081,
			"state": "SC",
			"area_name": "Saluda County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 45083,
			"state": "SC",
			"area_name": "Spartanburg County",
			"bachelorsOrHigher": 21.9
		},
		{
			"fips": 45085,
			"state": "SC",
			"area_name": "Sumter County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 45087,
			"state": "SC",
			"area_name": "Union County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 45089,
			"state": "SC",
			"area_name": "Williamsburg County",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 45091,
			"state": "SC",
			"area_name": "York County",
			"bachelorsOrHigher": 28.6
		},
		{
			"fips": 46003,
			"state": "SD",
			"area_name": "Aurora County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 46005,
			"state": "SD",
			"area_name": "Beadle County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 46007,
			"state": "SD",
			"area_name": "Bennett County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 46009,
			"state": "SD",
			"area_name": "Bon Homme County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 46011,
			"state": "SD",
			"area_name": "Brookings County",
			"bachelorsOrHigher": 41.4
		},
		{
			"fips": 46013,
			"state": "SD",
			"area_name": "Brown County",
			"bachelorsOrHigher": 26.9
		},
		{
			"fips": 46015,
			"state": "SD",
			"area_name": "Brule County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 46017,
			"state": "SD",
			"area_name": "Buffalo County",
			"bachelorsOrHigher": 8.6
		},
		{
			"fips": 46019,
			"state": "SD",
			"area_name": "Butte County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 46021,
			"state": "SD",
			"area_name": "Campbell County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 46023,
			"state": "SD",
			"area_name": "Charles Mix County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 46025,
			"state": "SD",
			"area_name": "Clark County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 46027,
			"state": "SD",
			"area_name": "Clay County",
			"bachelorsOrHigher": 43.1
		},
		{
			"fips": 46029,
			"state": "SD",
			"area_name": "Codington County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 46031,
			"state": "SD",
			"area_name": "Corson County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 46033,
			"state": "SD",
			"area_name": "Custer County",
			"bachelorsOrHigher": 27.4
		},
		{
			"fips": 46035,
			"state": "SD",
			"area_name": "Davison County",
			"bachelorsOrHigher": 26.4
		},
		{
			"fips": 46037,
			"state": "SD",
			"area_name": "Day County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 46039,
			"state": "SD",
			"area_name": "Deuel County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 46041,
			"state": "SD",
			"area_name": "Dewey County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 46043,
			"state": "SD",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 46045,
			"state": "SD",
			"area_name": "Edmunds County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 46047,
			"state": "SD",
			"area_name": "Fall River County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 46049,
			"state": "SD",
			"area_name": "Faulk County",
			"bachelorsOrHigher": 20.6
		},
		{
			"fips": 46051,
			"state": "SD",
			"area_name": "Grant County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 46053,
			"state": "SD",
			"area_name": "Gregory County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 46055,
			"state": "SD",
			"area_name": "Haakon County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 46057,
			"state": "SD",
			"area_name": "Hamlin County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 46059,
			"state": "SD",
			"area_name": "Hand County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 46061,
			"state": "SD",
			"area_name": "Hanson County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 46063,
			"state": "SD",
			"area_name": "Harding County",
			"bachelorsOrHigher": 30.5
		},
		{
			"fips": 46065,
			"state": "SD",
			"area_name": "Hughes County",
			"bachelorsOrHigher": 32.1
		},
		{
			"fips": 46067,
			"state": "SD",
			"area_name": "Hutchinson County",
			"bachelorsOrHigher": 26.1
		},
		{
			"fips": 46069,
			"state": "SD",
			"area_name": "Hyde County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 46071,
			"state": "SD",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 46073,
			"state": "SD",
			"area_name": "Jerauld County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 46075,
			"state": "SD",
			"area_name": "Jones County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 46077,
			"state": "SD",
			"area_name": "Kingsbury County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 46079,
			"state": "SD",
			"area_name": "Lake County",
			"bachelorsOrHigher": 28.4
		},
		{
			"fips": 46081,
			"state": "SD",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 29.5
		},
		{
			"fips": 46083,
			"state": "SD",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 41
		},
		{
			"fips": 46085,
			"state": "SD",
			"area_name": "Lyman County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 46087,
			"state": "SD",
			"area_name": "McCook County",
			"bachelorsOrHigher": 22.6
		},
		{
			"fips": 46089,
			"state": "SD",
			"area_name": "McPherson County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 46091,
			"state": "SD",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 46093,
			"state": "SD",
			"area_name": "Meade County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 46095,
			"state": "SD",
			"area_name": "Mellette County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 46097,
			"state": "SD",
			"area_name": "Miner County",
			"bachelorsOrHigher": 24.5
		},
		{
			"fips": 46099,
			"state": "SD",
			"area_name": "Minnehaha County",
			"bachelorsOrHigher": 29.3
		},
		{
			"fips": 46101,
			"state": "SD",
			"area_name": "Moody County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 46103,
			"state": "SD",
			"area_name": "Pennington County",
			"bachelorsOrHigher": 27.9
		},
		{
			"fips": 46105,
			"state": "SD",
			"area_name": "Perkins County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 46107,
			"state": "SD",
			"area_name": "Potter County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 46109,
			"state": "SD",
			"area_name": "Roberts County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 46111,
			"state": "SD",
			"area_name": "Sanborn County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 46102,
			"state": "SD",
			"area_name": "Oglala Lakota County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 46115,
			"state": "SD",
			"area_name": "Spink County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 46117,
			"state": "SD",
			"area_name": "Stanley County",
			"bachelorsOrHigher": 26.8
		},
		{
			"fips": 46119,
			"state": "SD",
			"area_name": "Sully County",
			"bachelorsOrHigher": 26.3
		},
		{
			"fips": 46121,
			"state": "SD",
			"area_name": "Todd County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 46123,
			"state": "SD",
			"area_name": "Tripp County",
			"bachelorsOrHigher": 21.8
		},
		{
			"fips": 46125,
			"state": "SD",
			"area_name": "Turner County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 46127,
			"state": "SD",
			"area_name": "Union County",
			"bachelorsOrHigher": 32.7
		},
		{
			"fips": 46129,
			"state": "SD",
			"area_name": "Walworth County",
			"bachelorsOrHigher": 22.5
		},
		{
			"fips": 46135,
			"state": "SD",
			"area_name": "Yankton County",
			"bachelorsOrHigher": 26.7
		},
		{
			"fips": 46137,
			"state": "SD",
			"area_name": "Ziebach County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 47001,
			"state": "TN",
			"area_name": "Anderson County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 47003,
			"state": "TN",
			"area_name": "Bedford County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 47005,
			"state": "TN",
			"area_name": "Benton County",
			"bachelorsOrHigher": 10
		},
		{
			"fips": 47007,
			"state": "TN",
			"area_name": "Bledsoe County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 47009,
			"state": "TN",
			"area_name": "Blount County",
			"bachelorsOrHigher": 21.7
		},
		{
			"fips": 47011,
			"state": "TN",
			"area_name": "Bradley County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 47013,
			"state": "TN",
			"area_name": "Campbell County",
			"bachelorsOrHigher": 9.5
		},
		{
			"fips": 47015,
			"state": "TN",
			"area_name": "Cannon County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 47017,
			"state": "TN",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 47019,
			"state": "TN",
			"area_name": "Carter County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 47021,
			"state": "TN",
			"area_name": "Cheatham County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 47023,
			"state": "TN",
			"area_name": "Chester County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 47025,
			"state": "TN",
			"area_name": "Claiborne County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 47027,
			"state": "TN",
			"area_name": "Clay County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 47029,
			"state": "TN",
			"area_name": "Cocke County",
			"bachelorsOrHigher": 9.4
		},
		{
			"fips": 47031,
			"state": "TN",
			"area_name": "Coffee County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 47033,
			"state": "TN",
			"area_name": "Crockett County",
			"bachelorsOrHigher": 12
		},
		{
			"fips": 47035,
			"state": "TN",
			"area_name": "Cumberland County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 47037,
			"state": "TN",
			"area_name": "Davidson County",
			"bachelorsOrHigher": 36.5
		},
		{
			"fips": 47039,
			"state": "TN",
			"area_name": "Decatur County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 47041,
			"state": "TN",
			"area_name": "DeKalb County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 47043,
			"state": "TN",
			"area_name": "Dickson County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 47045,
			"state": "TN",
			"area_name": "Dyer County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 47047,
			"state": "TN",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 22.7
		},
		{
			"fips": 47049,
			"state": "TN",
			"area_name": "Fentress County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 47051,
			"state": "TN",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 47053,
			"state": "TN",
			"area_name": "Gibson County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 47055,
			"state": "TN",
			"area_name": "Giles County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 47057,
			"state": "TN",
			"area_name": "Grainger County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 47059,
			"state": "TN",
			"area_name": "Greene County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 47061,
			"state": "TN",
			"area_name": "Grundy County",
			"bachelorsOrHigher": 9.7
		},
		{
			"fips": 47063,
			"state": "TN",
			"area_name": "Hamblen County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 47065,
			"state": "TN",
			"area_name": "Hamilton County",
			"bachelorsOrHigher": 28.1
		},
		{
			"fips": 47067,
			"state": "TN",
			"area_name": "Hancock County",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 47069,
			"state": "TN",
			"area_name": "Hardeman County",
			"bachelorsOrHigher": 9.2
		},
		{
			"fips": 47071,
			"state": "TN",
			"area_name": "Hardin County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 47073,
			"state": "TN",
			"area_name": "Hawkins County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 47075,
			"state": "TN",
			"area_name": "Haywood County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 47077,
			"state": "TN",
			"area_name": "Henderson County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 47079,
			"state": "TN",
			"area_name": "Henry County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 47081,
			"state": "TN",
			"area_name": "Hickman County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 47083,
			"state": "TN",
			"area_name": "Houston County",
			"bachelorsOrHigher": 11
		},
		{
			"fips": 47085,
			"state": "TN",
			"area_name": "Humphreys County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 47087,
			"state": "TN",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 9.5
		},
		{
			"fips": 47089,
			"state": "TN",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 47091,
			"state": "TN",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 9.3
		},
		{
			"fips": 47093,
			"state": "TN",
			"area_name": "Knox County",
			"bachelorsOrHigher": 34.5
		},
		{
			"fips": 47095,
			"state": "TN",
			"area_name": "Lake County",
			"bachelorsOrHigher": 8.2
		},
		{
			"fips": 47097,
			"state": "TN",
			"area_name": "Lauderdale County",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 47099,
			"state": "TN",
			"area_name": "Lawrence County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 47101,
			"state": "TN",
			"area_name": "Lewis County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 47103,
			"state": "TN",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 47105,
			"state": "TN",
			"area_name": "Loudon County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 47107,
			"state": "TN",
			"area_name": "McMinn County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 47109,
			"state": "TN",
			"area_name": "McNairy County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 47111,
			"state": "TN",
			"area_name": "Macon County",
			"bachelorsOrHigher": 9
		},
		{
			"fips": 47113,
			"state": "TN",
			"area_name": "Madison County",
			"bachelorsOrHigher": 25.1
		},
		{
			"fips": 47115,
			"state": "TN",
			"area_name": "Marion County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 47117,
			"state": "TN",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 47119,
			"state": "TN",
			"area_name": "Maury County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 47121,
			"state": "TN",
			"area_name": "Meigs County",
			"bachelorsOrHigher": 7.8
		},
		{
			"fips": 47123,
			"state": "TN",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 47125,
			"state": "TN",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 24
		},
		{
			"fips": 47127,
			"state": "TN",
			"area_name": "Moore County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 47129,
			"state": "TN",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 7.3
		},
		{
			"fips": 47131,
			"state": "TN",
			"area_name": "Obion County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 47133,
			"state": "TN",
			"area_name": "Overton County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 47135,
			"state": "TN",
			"area_name": "Perry County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 47137,
			"state": "TN",
			"area_name": "Pickett County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 47139,
			"state": "TN",
			"area_name": "Polk County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 47141,
			"state": "TN",
			"area_name": "Putnam County",
			"bachelorsOrHigher": 22.8
		},
		{
			"fips": 47143,
			"state": "TN",
			"area_name": "Rhea County",
			"bachelorsOrHigher": 11.7
		},
		{
			"fips": 47145,
			"state": "TN",
			"area_name": "Roane County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 47147,
			"state": "TN",
			"area_name": "Robertson County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 47149,
			"state": "TN",
			"area_name": "Rutherford County",
			"bachelorsOrHigher": 28.9
		},
		{
			"fips": 47151,
			"state": "TN",
			"area_name": "Scott County",
			"bachelorsOrHigher": 10.5
		},
		{
			"fips": 47153,
			"state": "TN",
			"area_name": "Sequatchie County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 47155,
			"state": "TN",
			"area_name": "Sevier County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 47157,
			"state": "TN",
			"area_name": "Shelby County",
			"bachelorsOrHigher": 29.8
		},
		{
			"fips": 47159,
			"state": "TN",
			"area_name": "Smith County",
			"bachelorsOrHigher": 11
		},
		{
			"fips": 47161,
			"state": "TN",
			"area_name": "Stewart County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 47163,
			"state": "TN",
			"area_name": "Sullivan County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 47165,
			"state": "TN",
			"area_name": "Sumner County",
			"bachelorsOrHigher": 24
		},
		{
			"fips": 47167,
			"state": "TN",
			"area_name": "Tipton County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 47169,
			"state": "TN",
			"area_name": "Trousdale County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 47171,
			"state": "TN",
			"area_name": "Unicoi County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 47173,
			"state": "TN",
			"area_name": "Union County",
			"bachelorsOrHigher": 8.6
		},
		{
			"fips": 47175,
			"state": "TN",
			"area_name": "Van Buren County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 47177,
			"state": "TN",
			"area_name": "Warren County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 47179,
			"state": "TN",
			"area_name": "Washington County",
			"bachelorsOrHigher": 30.8
		},
		{
			"fips": 47181,
			"state": "TN",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 8.2
		},
		{
			"fips": 47183,
			"state": "TN",
			"area_name": "Weakley County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 47185,
			"state": "TN",
			"area_name": "White County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 47187,
			"state": "TN",
			"area_name": "Williamson County",
			"bachelorsOrHigher": 54.1
		},
		{
			"fips": 47189,
			"state": "TN",
			"area_name": "Wilson County",
			"bachelorsOrHigher": 26.7
		},
		{
			"fips": 48001,
			"state": "TX",
			"area_name": "Anderson County",
			"bachelorsOrHigher": 11.3
		},
		{
			"fips": 48003,
			"state": "TX",
			"area_name": "Andrews County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 48005,
			"state": "TX",
			"area_name": "Angelina County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 48007,
			"state": "TX",
			"area_name": "Aransas County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 48009,
			"state": "TX",
			"area_name": "Archer County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 48011,
			"state": "TX",
			"area_name": "Armstrong County",
			"bachelorsOrHigher": 24.4
		},
		{
			"fips": 48013,
			"state": "TX",
			"area_name": "Atascosa County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 48015,
			"state": "TX",
			"area_name": "Austin County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 48017,
			"state": "TX",
			"area_name": "Bailey County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 48019,
			"state": "TX",
			"area_name": "Bandera County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 48021,
			"state": "TX",
			"area_name": "Bastrop County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 48023,
			"state": "TX",
			"area_name": "Baylor County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 48025,
			"state": "TX",
			"area_name": "Bee County",
			"bachelorsOrHigher": 8.9
		},
		{
			"fips": 48027,
			"state": "TX",
			"area_name": "Bell County",
			"bachelorsOrHigher": 22.2
		},
		{
			"fips": 48029,
			"state": "TX",
			"area_name": "Bexar County",
			"bachelorsOrHigher": 26.5
		},
		{
			"fips": 48031,
			"state": "TX",
			"area_name": "Blanco County",
			"bachelorsOrHigher": 27.9
		},
		{
			"fips": 48033,
			"state": "TX",
			"area_name": "Borden County",
			"bachelorsOrHigher": 33.1
		},
		{
			"fips": 48035,
			"state": "TX",
			"area_name": "Bosque County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 48037,
			"state": "TX",
			"area_name": "Bowie County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 48039,
			"state": "TX",
			"area_name": "Brazoria County",
			"bachelorsOrHigher": 27.9
		},
		{
			"fips": 48041,
			"state": "TX",
			"area_name": "Brazos County",
			"bachelorsOrHigher": 38.3
		},
		{
			"fips": 48043,
			"state": "TX",
			"area_name": "Brewster County",
			"bachelorsOrHigher": 36.3
		},
		{
			"fips": 48045,
			"state": "TX",
			"area_name": "Briscoe County",
			"bachelorsOrHigher": 20.7
		},
		{
			"fips": 48047,
			"state": "TX",
			"area_name": "Brooks County",
			"bachelorsOrHigher": 11
		},
		{
			"fips": 48049,
			"state": "TX",
			"area_name": "Brown County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 48051,
			"state": "TX",
			"area_name": "Burleson County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 48053,
			"state": "TX",
			"area_name": "Burnet County",
			"bachelorsOrHigher": 23.3
		},
		{
			"fips": 48055,
			"state": "TX",
			"area_name": "Caldwell County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 48057,
			"state": "TX",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 48059,
			"state": "TX",
			"area_name": "Callahan County",
			"bachelorsOrHigher": 13.4
		},
		{
			"fips": 48061,
			"state": "TX",
			"area_name": "Cameron County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 48063,
			"state": "TX",
			"area_name": "Camp County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 48065,
			"state": "TX",
			"area_name": "Carson County",
			"bachelorsOrHigher": 22.6
		},
		{
			"fips": 48067,
			"state": "TX",
			"area_name": "Cass County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 48069,
			"state": "TX",
			"area_name": "Castro County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 48071,
			"state": "TX",
			"area_name": "Chambers County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 48073,
			"state": "TX",
			"area_name": "Cherokee County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 48075,
			"state": "TX",
			"area_name": "Childress County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 48077,
			"state": "TX",
			"area_name": "Clay County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 48079,
			"state": "TX",
			"area_name": "Cochran County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 48081,
			"state": "TX",
			"area_name": "Coke County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 48083,
			"state": "TX",
			"area_name": "Coleman County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 48085,
			"state": "TX",
			"area_name": "Collin County",
			"bachelorsOrHigher": 49.4
		},
		{
			"fips": 48087,
			"state": "TX",
			"area_name": "Collingsworth County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 48089,
			"state": "TX",
			"area_name": "Colorado County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 48091,
			"state": "TX",
			"area_name": "Comal County",
			"bachelorsOrHigher": 33.2
		},
		{
			"fips": 48093,
			"state": "TX",
			"area_name": "Comanche County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 48095,
			"state": "TX",
			"area_name": "Concho County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 48097,
			"state": "TX",
			"area_name": "Cooke County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 48099,
			"state": "TX",
			"area_name": "Coryell County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 48101,
			"state": "TX",
			"area_name": "Cottle County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 48103,
			"state": "TX",
			"area_name": "Crane County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 48105,
			"state": "TX",
			"area_name": "Crockett County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 48107,
			"state": "TX",
			"area_name": "Crosby County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 48109,
			"state": "TX",
			"area_name": "Culberson County",
			"bachelorsOrHigher": 11.7
		},
		{
			"fips": 48111,
			"state": "TX",
			"area_name": "Dallam County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 48113,
			"state": "TX",
			"area_name": "Dallas County",
			"bachelorsOrHigher": 28.7
		},
		{
			"fips": 48115,
			"state": "TX",
			"area_name": "Dawson County",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 48117,
			"state": "TX",
			"area_name": "Deaf Smith County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 48119,
			"state": "TX",
			"area_name": "Delta County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 48121,
			"state": "TX",
			"area_name": "Denton County",
			"bachelorsOrHigher": 41
		},
		{
			"fips": 48123,
			"state": "TX",
			"area_name": "DeWitt County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 48125,
			"state": "TX",
			"area_name": "Dickens County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 48127,
			"state": "TX",
			"area_name": "Dimmit County",
			"bachelorsOrHigher": 10.4
		},
		{
			"fips": 48129,
			"state": "TX",
			"area_name": "Donley County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 48131,
			"state": "TX",
			"area_name": "Duval County",
			"bachelorsOrHigher": 7
		},
		{
			"fips": 48133,
			"state": "TX",
			"area_name": "Eastland County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 48135,
			"state": "TX",
			"area_name": "Ector County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 48137,
			"state": "TX",
			"area_name": "Edwards County",
			"bachelorsOrHigher": 24.3
		},
		{
			"fips": 48139,
			"state": "TX",
			"area_name": "Ellis County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 48141,
			"state": "TX",
			"area_name": "El Paso County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 48143,
			"state": "TX",
			"area_name": "Erath County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 48145,
			"state": "TX",
			"area_name": "Falls County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 48147,
			"state": "TX",
			"area_name": "Fannin County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 48149,
			"state": "TX",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 48151,
			"state": "TX",
			"area_name": "Fisher County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 48153,
			"state": "TX",
			"area_name": "Floyd County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 48155,
			"state": "TX",
			"area_name": "Foard County",
			"bachelorsOrHigher": 20.9
		},
		{
			"fips": 48157,
			"state": "TX",
			"area_name": "Fort Bend County",
			"bachelorsOrHigher": 42.3
		},
		{
			"fips": 48159,
			"state": "TX",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 48161,
			"state": "TX",
			"area_name": "Freestone County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 48163,
			"state": "TX",
			"area_name": "Frio County",
			"bachelorsOrHigher": 7.9
		},
		{
			"fips": 48165,
			"state": "TX",
			"area_name": "Gaines County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 48167,
			"state": "TX",
			"area_name": "Galveston County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 48169,
			"state": "TX",
			"area_name": "Garza County",
			"bachelorsOrHigher": 8.9
		},
		{
			"fips": 48171,
			"state": "TX",
			"area_name": "Gillespie County",
			"bachelorsOrHigher": 33.3
		},
		{
			"fips": 48173,
			"state": "TX",
			"area_name": "Glasscock County",
			"bachelorsOrHigher": 24.8
		},
		{
			"fips": 48175,
			"state": "TX",
			"area_name": "Goliad County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 48177,
			"state": "TX",
			"area_name": "Gonzales County",
			"bachelorsOrHigher": 14.7
		},
		{
			"fips": 48179,
			"state": "TX",
			"area_name": "Gray County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 48181,
			"state": "TX",
			"area_name": "Grayson County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 48183,
			"state": "TX",
			"area_name": "Gregg County",
			"bachelorsOrHigher": 19.9
		},
		{
			"fips": 48185,
			"state": "TX",
			"area_name": "Grimes County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 48187,
			"state": "TX",
			"area_name": "Guadalupe County",
			"bachelorsOrHigher": 25.2
		},
		{
			"fips": 48189,
			"state": "TX",
			"area_name": "Hale County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 48191,
			"state": "TX",
			"area_name": "Hall County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 48193,
			"state": "TX",
			"area_name": "Hamilton County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 48195,
			"state": "TX",
			"area_name": "Hansford County",
			"bachelorsOrHigher": 21.9
		},
		{
			"fips": 48197,
			"state": "TX",
			"area_name": "Hardeman County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 48199,
			"state": "TX",
			"area_name": "Hardin County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 48201,
			"state": "TX",
			"area_name": "Harris County",
			"bachelorsOrHigher": 29
		},
		{
			"fips": 48203,
			"state": "TX",
			"area_name": "Harrison County",
			"bachelorsOrHigher": 18.6
		},
		{
			"fips": 48205,
			"state": "TX",
			"area_name": "Hartley County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 48207,
			"state": "TX",
			"area_name": "Haskell County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 48209,
			"state": "TX",
			"area_name": "Hays County",
			"bachelorsOrHigher": 36.8
		},
		{
			"fips": 48211,
			"state": "TX",
			"area_name": "Hemphill County",
			"bachelorsOrHigher": 22.2
		},
		{
			"fips": 48213,
			"state": "TX",
			"area_name": "Henderson County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 48215,
			"state": "TX",
			"area_name": "Hidalgo County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 48217,
			"state": "TX",
			"area_name": "Hill County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 48219,
			"state": "TX",
			"area_name": "Hockley County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 48221,
			"state": "TX",
			"area_name": "Hood County",
			"bachelorsOrHigher": 24.1
		},
		{
			"fips": 48223,
			"state": "TX",
			"area_name": "Hopkins County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 48225,
			"state": "TX",
			"area_name": "Houston County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 48227,
			"state": "TX",
			"area_name": "Howard County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 48229,
			"state": "TX",
			"area_name": "Hudspeth County",
			"bachelorsOrHigher": 8.4
		},
		{
			"fips": 48231,
			"state": "TX",
			"area_name": "Hunt County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 48233,
			"state": "TX",
			"area_name": "Hutchinson County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 48235,
			"state": "TX",
			"area_name": "Irion County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 48237,
			"state": "TX",
			"area_name": "Jack County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 48239,
			"state": "TX",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 48241,
			"state": "TX",
			"area_name": "Jasper County",
			"bachelorsOrHigher": 10.3
		},
		{
			"fips": 48243,
			"state": "TX",
			"area_name": "Jeff Davis County",
			"bachelorsOrHigher": 38.4
		},
		{
			"fips": 48245,
			"state": "TX",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 18
		},
		{
			"fips": 48247,
			"state": "TX",
			"area_name": "Jim Hogg County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 48249,
			"state": "TX",
			"area_name": "Jim Wells County",
			"bachelorsOrHigher": 10.7
		},
		{
			"fips": 48251,
			"state": "TX",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 48253,
			"state": "TX",
			"area_name": "Jones County",
			"bachelorsOrHigher": 9.3
		},
		{
			"fips": 48255,
			"state": "TX",
			"area_name": "Karnes County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 48257,
			"state": "TX",
			"area_name": "Kaufman County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 48259,
			"state": "TX",
			"area_name": "Kendall County",
			"bachelorsOrHigher": 40.7
		},
		{
			"fips": 48261,
			"state": "TX",
			"area_name": "Kenedy County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 48263,
			"state": "TX",
			"area_name": "Kent County",
			"bachelorsOrHigher": 23.3
		},
		{
			"fips": 48265,
			"state": "TX",
			"area_name": "Kerr County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 48267,
			"state": "TX",
			"area_name": "Kimble County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 48269,
			"state": "TX",
			"area_name": "King County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 48271,
			"state": "TX",
			"area_name": "Kinney County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 48273,
			"state": "TX",
			"area_name": "Kleberg County",
			"bachelorsOrHigher": 24.4
		},
		{
			"fips": 48275,
			"state": "TX",
			"area_name": "Knox County",
			"bachelorsOrHigher": 13.2
		},
		{
			"fips": 48277,
			"state": "TX",
			"area_name": "Lamar County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 48279,
			"state": "TX",
			"area_name": "Lamb County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 48281,
			"state": "TX",
			"area_name": "Lampasas County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 48283,
			"state": "TX",
			"area_name": "La Salle County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 48285,
			"state": "TX",
			"area_name": "Lavaca County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 48287,
			"state": "TX",
			"area_name": "Lee County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 48289,
			"state": "TX",
			"area_name": "Leon County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 48291,
			"state": "TX",
			"area_name": "Liberty County",
			"bachelorsOrHigher": 8.8
		},
		{
			"fips": 48293,
			"state": "TX",
			"area_name": "Limestone County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 48295,
			"state": "TX",
			"area_name": "Lipscomb County",
			"bachelorsOrHigher": 21.1
		},
		{
			"fips": 48297,
			"state": "TX",
			"area_name": "Live Oak County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 48299,
			"state": "TX",
			"area_name": "Llano County",
			"bachelorsOrHigher": 26.8
		},
		{
			"fips": 48301,
			"state": "TX",
			"area_name": "Loving County",
			"bachelorsOrHigher": 2.6
		},
		{
			"fips": 48303,
			"state": "TX",
			"area_name": "Lubbock County",
			"bachelorsOrHigher": 28
		},
		{
			"fips": 48305,
			"state": "TX",
			"area_name": "Lynn County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 48307,
			"state": "TX",
			"area_name": "McCulloch County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 48309,
			"state": "TX",
			"area_name": "McLennan County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 48311,
			"state": "TX",
			"area_name": "McMullen County",
			"bachelorsOrHigher": 4.4
		},
		{
			"fips": 48313,
			"state": "TX",
			"area_name": "Madison County",
			"bachelorsOrHigher": 10
		},
		{
			"fips": 48315,
			"state": "TX",
			"area_name": "Marion County",
			"bachelorsOrHigher": 14.5
		},
		{
			"fips": 48317,
			"state": "TX",
			"area_name": "Martin County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 48319,
			"state": "TX",
			"area_name": "Mason County",
			"bachelorsOrHigher": 24.1
		},
		{
			"fips": 48321,
			"state": "TX",
			"area_name": "Matagorda County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 48323,
			"state": "TX",
			"area_name": "Maverick County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 48325,
			"state": "TX",
			"area_name": "Medina County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 48327,
			"state": "TX",
			"area_name": "Menard County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 48329,
			"state": "TX",
			"area_name": "Midland County",
			"bachelorsOrHigher": 25
		},
		{
			"fips": 48331,
			"state": "TX",
			"area_name": "Milam County",
			"bachelorsOrHigher": 16
		},
		{
			"fips": 48333,
			"state": "TX",
			"area_name": "Mills County",
			"bachelorsOrHigher": 23.9
		},
		{
			"fips": 48335,
			"state": "TX",
			"area_name": "Mitchell County",
			"bachelorsOrHigher": 9.9
		},
		{
			"fips": 48337,
			"state": "TX",
			"area_name": "Montague County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 48339,
			"state": "TX",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 31.7
		},
		{
			"fips": 48341,
			"state": "TX",
			"area_name": "Moore County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 48343,
			"state": "TX",
			"area_name": "Morris County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 48345,
			"state": "TX",
			"area_name": "Motley County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 48347,
			"state": "TX",
			"area_name": "Nacogdoches County",
			"bachelorsOrHigher": 25
		},
		{
			"fips": 48349,
			"state": "TX",
			"area_name": "Navarro County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 48351,
			"state": "TX",
			"area_name": "Newton County",
			"bachelorsOrHigher": 6.9
		},
		{
			"fips": 48353,
			"state": "TX",
			"area_name": "Nolan County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 48355,
			"state": "TX",
			"area_name": "Nueces County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 48357,
			"state": "TX",
			"area_name": "Ochiltree County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 48359,
			"state": "TX",
			"area_name": "Oldham County",
			"bachelorsOrHigher": 30.3
		},
		{
			"fips": 48361,
			"state": "TX",
			"area_name": "Orange County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 48363,
			"state": "TX",
			"area_name": "Palo Pinto County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 48365,
			"state": "TX",
			"area_name": "Panola County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 48367,
			"state": "TX",
			"area_name": "Parker County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 48369,
			"state": "TX",
			"area_name": "Parmer County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 48371,
			"state": "TX",
			"area_name": "Pecos County",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 48373,
			"state": "TX",
			"area_name": "Polk County",
			"bachelorsOrHigher": 12.1
		},
		{
			"fips": 48375,
			"state": "TX",
			"area_name": "Potter County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 48377,
			"state": "TX",
			"area_name": "Presidio County",
			"bachelorsOrHigher": 22
		},
		{
			"fips": 48379,
			"state": "TX",
			"area_name": "Rains County",
			"bachelorsOrHigher": 11.4
		},
		{
			"fips": 48381,
			"state": "TX",
			"area_name": "Randall County",
			"bachelorsOrHigher": 30.7
		},
		{
			"fips": 48383,
			"state": "TX",
			"area_name": "Reagan County",
			"bachelorsOrHigher": 11
		},
		{
			"fips": 48385,
			"state": "TX",
			"area_name": "Real County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 48387,
			"state": "TX",
			"area_name": "Red River County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 48389,
			"state": "TX",
			"area_name": "Reeves County",
			"bachelorsOrHigher": 10.6
		},
		{
			"fips": 48391,
			"state": "TX",
			"area_name": "Refugio County",
			"bachelorsOrHigher": 10.3
		},
		{
			"fips": 48393,
			"state": "TX",
			"area_name": "Roberts County",
			"bachelorsOrHigher": 34.3
		},
		{
			"fips": 48395,
			"state": "TX",
			"area_name": "Robertson County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 48397,
			"state": "TX",
			"area_name": "Rockwall County",
			"bachelorsOrHigher": 36.7
		},
		{
			"fips": 48399,
			"state": "TX",
			"area_name": "Runnels County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 48401,
			"state": "TX",
			"area_name": "Rusk County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 48403,
			"state": "TX",
			"area_name": "Sabine County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 48405,
			"state": "TX",
			"area_name": "San Augustine County",
			"bachelorsOrHigher": 10
		},
		{
			"fips": 48407,
			"state": "TX",
			"area_name": "San Jacinto County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 48409,
			"state": "TX",
			"area_name": "San Patricio County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 48411,
			"state": "TX",
			"area_name": "San Saba County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 48413,
			"state": "TX",
			"area_name": "Schleicher County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 48415,
			"state": "TX",
			"area_name": "Scurry County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 48417,
			"state": "TX",
			"area_name": "Shackelford County",
			"bachelorsOrHigher": 24.3
		},
		{
			"fips": 48419,
			"state": "TX",
			"area_name": "Shelby County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 48421,
			"state": "TX",
			"area_name": "Sherman County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 48423,
			"state": "TX",
			"area_name": "Smith County",
			"bachelorsOrHigher": 25.2
		},
		{
			"fips": 48425,
			"state": "TX",
			"area_name": "Somervell County",
			"bachelorsOrHigher": 27
		},
		{
			"fips": 48427,
			"state": "TX",
			"area_name": "Starr County",
			"bachelorsOrHigher": 9.6
		},
		{
			"fips": 48429,
			"state": "TX",
			"area_name": "Stephens County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 48431,
			"state": "TX",
			"area_name": "Sterling County",
			"bachelorsOrHigher": 26.6
		},
		{
			"fips": 48433,
			"state": "TX",
			"area_name": "Stonewall County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 48435,
			"state": "TX",
			"area_name": "Sutton County",
			"bachelorsOrHigher": 17.8
		},
		{
			"fips": 48437,
			"state": "TX",
			"area_name": "Swisher County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 48439,
			"state": "TX",
			"area_name": "Tarrant County",
			"bachelorsOrHigher": 29.7
		},
		{
			"fips": 48441,
			"state": "TX",
			"area_name": "Taylor County",
			"bachelorsOrHigher": 24.6
		},
		{
			"fips": 48443,
			"state": "TX",
			"area_name": "Terrell County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 48445,
			"state": "TX",
			"area_name": "Terry County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 48447,
			"state": "TX",
			"area_name": "Throckmorton County",
			"bachelorsOrHigher": 20.7
		},
		{
			"fips": 48449,
			"state": "TX",
			"area_name": "Titus County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 48451,
			"state": "TX",
			"area_name": "Tom Green County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 48453,
			"state": "TX",
			"area_name": "Travis County",
			"bachelorsOrHigher": 45.2
		},
		{
			"fips": 48455,
			"state": "TX",
			"area_name": "Trinity County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 48457,
			"state": "TX",
			"area_name": "Tyler County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 48459,
			"state": "TX",
			"area_name": "Upshur County",
			"bachelorsOrHigher": 14.3
		},
		{
			"fips": 48461,
			"state": "TX",
			"area_name": "Upton County",
			"bachelorsOrHigher": 11
		},
		{
			"fips": 48463,
			"state": "TX",
			"area_name": "Uvalde County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 48465,
			"state": "TX",
			"area_name": "Val Verde County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 48467,
			"state": "TX",
			"area_name": "Van Zandt County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 48469,
			"state": "TX",
			"area_name": "Victoria County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 48471,
			"state": "TX",
			"area_name": "Walker County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 48473,
			"state": "TX",
			"area_name": "Waller County",
			"bachelorsOrHigher": 18.4
		},
		{
			"fips": 48475,
			"state": "TX",
			"area_name": "Ward County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 48477,
			"state": "TX",
			"area_name": "Washington County",
			"bachelorsOrHigher": 23.1
		},
		{
			"fips": 48479,
			"state": "TX",
			"area_name": "Webb County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 48481,
			"state": "TX",
			"area_name": "Wharton County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 48483,
			"state": "TX",
			"area_name": "Wheeler County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 48485,
			"state": "TX",
			"area_name": "Wichita County",
			"bachelorsOrHigher": 20.8
		},
		{
			"fips": 48487,
			"state": "TX",
			"area_name": "Wilbarger County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 48489,
			"state": "TX",
			"area_name": "Willacy County",
			"bachelorsOrHigher": 9.2
		},
		{
			"fips": 48491,
			"state": "TX",
			"area_name": "Williamson County",
			"bachelorsOrHigher": 38.6
		},
		{
			"fips": 48493,
			"state": "TX",
			"area_name": "Wilson County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 48495,
			"state": "TX",
			"area_name": "Winkler County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 48497,
			"state": "TX",
			"area_name": "Wise County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 48499,
			"state": "TX",
			"area_name": "Wood County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 48501,
			"state": "TX",
			"area_name": "Yoakum County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 48503,
			"state": "TX",
			"area_name": "Young County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 48505,
			"state": "TX",
			"area_name": "Zapata County",
			"bachelorsOrHigher": 9.6
		},
		{
			"fips": 48507,
			"state": "TX",
			"area_name": "Zavala County",
			"bachelorsOrHigher": 8.5
		},
		{
			"fips": 49001,
			"state": "UT",
			"area_name": "Beaver County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 49003,
			"state": "UT",
			"area_name": "Box Elder County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 49005,
			"state": "UT",
			"area_name": "Cache County",
			"bachelorsOrHigher": 35.9
		},
		{
			"fips": 49007,
			"state": "UT",
			"area_name": "Carbon County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 49009,
			"state": "UT",
			"area_name": "Daggett County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 49011,
			"state": "UT",
			"area_name": "Davis County",
			"bachelorsOrHigher": 34.6
		},
		{
			"fips": 49013,
			"state": "UT",
			"area_name": "Duchesne County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 49015,
			"state": "UT",
			"area_name": "Emery County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 49017,
			"state": "UT",
			"area_name": "Garfield County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 49019,
			"state": "UT",
			"area_name": "Grand County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 49021,
			"state": "UT",
			"area_name": "Iron County",
			"bachelorsOrHigher": 27.9
		},
		{
			"fips": 49023,
			"state": "UT",
			"area_name": "Juab County",
			"bachelorsOrHigher": 16.3
		},
		{
			"fips": 49025,
			"state": "UT",
			"area_name": "Kane County",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 49027,
			"state": "UT",
			"area_name": "Millard County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 49029,
			"state": "UT",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 34.5
		},
		{
			"fips": 49031,
			"state": "UT",
			"area_name": "Piute County",
			"bachelorsOrHigher": 17.4
		},
		{
			"fips": 49033,
			"state": "UT",
			"area_name": "Rich County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 49035,
			"state": "UT",
			"area_name": "Salt Lake County",
			"bachelorsOrHigher": 31.3
		},
		{
			"fips": 49037,
			"state": "UT",
			"area_name": "San Juan County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 49039,
			"state": "UT",
			"area_name": "Sanpete County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 49041,
			"state": "UT",
			"area_name": "Sevier County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 49043,
			"state": "UT",
			"area_name": "Summit County",
			"bachelorsOrHigher": 50.1
		},
		{
			"fips": 49045,
			"state": "UT",
			"area_name": "Tooele County",
			"bachelorsOrHigher": 20.6
		},
		{
			"fips": 49047,
			"state": "UT",
			"area_name": "Uintah County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 49049,
			"state": "UT",
			"area_name": "Utah County",
			"bachelorsOrHigher": 36.9
		},
		{
			"fips": 49051,
			"state": "UT",
			"area_name": "Wasatch County",
			"bachelorsOrHigher": 34.4
		},
		{
			"fips": 49053,
			"state": "UT",
			"area_name": "Washington County",
			"bachelorsOrHigher": 27.1
		},
		{
			"fips": 49055,
			"state": "UT",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 26.5
		},
		{
			"fips": 49057,
			"state": "UT",
			"area_name": "Weber County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 50001,
			"state": "VT",
			"area_name": "Addison County",
			"bachelorsOrHigher": 35.4
		},
		{
			"fips": 50003,
			"state": "VT",
			"area_name": "Bennington County",
			"bachelorsOrHigher": 32
		},
		{
			"fips": 50005,
			"state": "VT",
			"area_name": "Caledonia County",
			"bachelorsOrHigher": 25.8
		},
		{
			"fips": 50007,
			"state": "VT",
			"area_name": "Chittenden County",
			"bachelorsOrHigher": 48
		},
		{
			"fips": 50009,
			"state": "VT",
			"area_name": "Essex County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 50011,
			"state": "VT",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 50013,
			"state": "VT",
			"area_name": "Grand Isle County",
			"bachelorsOrHigher": 32.4
		},
		{
			"fips": 50015,
			"state": "VT",
			"area_name": "Lamoille County",
			"bachelorsOrHigher": 35.3
		},
		{
			"fips": 50017,
			"state": "VT",
			"area_name": "Orange County",
			"bachelorsOrHigher": 31.6
		},
		{
			"fips": 50019,
			"state": "VT",
			"area_name": "Orleans County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 50021,
			"state": "VT",
			"area_name": "Rutland County",
			"bachelorsOrHigher": 28.8
		},
		{
			"fips": 50023,
			"state": "VT",
			"area_name": "Washington County",
			"bachelorsOrHigher": 39
		},
		{
			"fips": 50025,
			"state": "VT",
			"area_name": "Windham County",
			"bachelorsOrHigher": 34.5
		},
		{
			"fips": 50027,
			"state": "VT",
			"area_name": "Windsor County",
			"bachelorsOrHigher": 34.3
		},
		{
			"fips": 51001,
			"state": "VA",
			"area_name": "Accomack County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 51003,
			"state": "VA",
			"area_name": "Albemarle County",
			"bachelorsOrHigher": 52.1
		},
		{
			"fips": 51005,
			"state": "VA",
			"area_name": "Alleghany County",
			"bachelorsOrHigher": 16.9
		},
		{
			"fips": 51007,
			"state": "VA",
			"area_name": "Amelia County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 51009,
			"state": "VA",
			"area_name": "Amherst County",
			"bachelorsOrHigher": 18.3
		},
		{
			"fips": 51011,
			"state": "VA",
			"area_name": "Appomattox County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 51013,
			"state": "VA",
			"area_name": "Arlington County",
			"bachelorsOrHigher": 72
		},
		{
			"fips": 51015,
			"state": "VA",
			"area_name": "Augusta County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 51017,
			"state": "VA",
			"area_name": "Bath County",
			"bachelorsOrHigher": 19.8
		},
		{
			"fips": 51019,
			"state": "VA",
			"area_name": "Bedford County",
			"bachelorsOrHigher": 26.3
		},
		{
			"fips": 51021,
			"state": "VA",
			"area_name": "Bland County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 51023,
			"state": "VA",
			"area_name": "Botetourt County",
			"bachelorsOrHigher": 25.4
		},
		{
			"fips": 51025,
			"state": "VA",
			"area_name": "Brunswick County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 51027,
			"state": "VA",
			"area_name": "Buchanan County",
			"bachelorsOrHigher": 8.6
		},
		{
			"fips": 51029,
			"state": "VA",
			"area_name": "Buckingham County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 51031,
			"state": "VA",
			"area_name": "Campbell County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 51033,
			"state": "VA",
			"area_name": "Caroline County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 51035,
			"state": "VA",
			"area_name": "Carroll County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 51036,
			"state": "VA",
			"area_name": "Charles City County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 51037,
			"state": "VA",
			"area_name": "Charlotte County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 51041,
			"state": "VA",
			"area_name": "Chesterfield County",
			"bachelorsOrHigher": 36.6
		},
		{
			"fips": 51043,
			"state": "VA",
			"area_name": "Clarke County",
			"bachelorsOrHigher": 32.2
		},
		{
			"fips": 51045,
			"state": "VA",
			"area_name": "Craig County",
			"bachelorsOrHigher": 13.1
		},
		{
			"fips": 51047,
			"state": "VA",
			"area_name": "Culpeper County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 51049,
			"state": "VA",
			"area_name": "Cumberland County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 51051,
			"state": "VA",
			"area_name": "Dickenson County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 51053,
			"state": "VA",
			"area_name": "Dinwiddie County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 51057,
			"state": "VA",
			"area_name": "Essex County",
			"bachelorsOrHigher": 13.7
		},
		{
			"fips": 51059,
			"state": "VA",
			"area_name": "Fairfax County",
			"bachelorsOrHigher": 59.2
		},
		{
			"fips": 51061,
			"state": "VA",
			"area_name": "Fauquier County",
			"bachelorsOrHigher": 34.3
		},
		{
			"fips": 51063,
			"state": "VA",
			"area_name": "Floyd County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 51065,
			"state": "VA",
			"area_name": "Fluvanna County",
			"bachelorsOrHigher": 29.6
		},
		{
			"fips": 51067,
			"state": "VA",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 19.8
		},
		{
			"fips": 51069,
			"state": "VA",
			"area_name": "Frederick County",
			"bachelorsOrHigher": 28.2
		},
		{
			"fips": 51071,
			"state": "VA",
			"area_name": "Giles County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 51073,
			"state": "VA",
			"area_name": "Gloucester County",
			"bachelorsOrHigher": 22.9
		},
		{
			"fips": 51075,
			"state": "VA",
			"area_name": "Goochland County",
			"bachelorsOrHigher": 38.3
		},
		{
			"fips": 51077,
			"state": "VA",
			"area_name": "Grayson County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 51079,
			"state": "VA",
			"area_name": "Greene County",
			"bachelorsOrHigher": 24.5
		},
		{
			"fips": 51081,
			"state": "VA",
			"area_name": "Greensville County",
			"bachelorsOrHigher": 8.5
		},
		{
			"fips": 51083,
			"state": "VA",
			"area_name": "Halifax County",
			"bachelorsOrHigher": 14.6
		},
		{
			"fips": 51085,
			"state": "VA",
			"area_name": "Hanover County",
			"bachelorsOrHigher": 36.3
		},
		{
			"fips": 51087,
			"state": "VA",
			"area_name": "Henrico County",
			"bachelorsOrHigher": 39.7
		},
		{
			"fips": 51089,
			"state": "VA",
			"area_name": "Henry County",
			"bachelorsOrHigher": 11.5
		},
		{
			"fips": 51091,
			"state": "VA",
			"area_name": "Highland County",
			"bachelorsOrHigher": 19.4
		},
		{
			"fips": 51093,
			"state": "VA",
			"area_name": "Isle of Wight County",
			"bachelorsOrHigher": 26.1
		},
		{
			"fips": 51095,
			"state": "VA",
			"area_name": "James City County",
			"bachelorsOrHigher": 46.1
		},
		{
			"fips": 51097,
			"state": "VA",
			"area_name": "King and Queen County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 51099,
			"state": "VA",
			"area_name": "King George County",
			"bachelorsOrHigher": 31.8
		},
		{
			"fips": 51101,
			"state": "VA",
			"area_name": "King William County",
			"bachelorsOrHigher": 19.1
		},
		{
			"fips": 51103,
			"state": "VA",
			"area_name": "Lancaster County",
			"bachelorsOrHigher": 28.7
		},
		{
			"fips": 51105,
			"state": "VA",
			"area_name": "Lee County",
			"bachelorsOrHigher": 11.1
		},
		{
			"fips": 51107,
			"state": "VA",
			"area_name": "Loudoun County",
			"bachelorsOrHigher": 58
		},
		{
			"fips": 51109,
			"state": "VA",
			"area_name": "Louisa County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 51111,
			"state": "VA",
			"area_name": "Lunenburg County",
			"bachelorsOrHigher": 12.5
		},
		{
			"fips": 51113,
			"state": "VA",
			"area_name": "Madison County",
			"bachelorsOrHigher": 23.1
		},
		{
			"fips": 51115,
			"state": "VA",
			"area_name": "Mathews County",
			"bachelorsOrHigher": 29
		},
		{
			"fips": 51117,
			"state": "VA",
			"area_name": "Mecklenburg County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 51119,
			"state": "VA",
			"area_name": "Middlesex County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 51121,
			"state": "VA",
			"area_name": "Montgomery County",
			"bachelorsOrHigher": 44.3
		},
		{
			"fips": 51125,
			"state": "VA",
			"area_name": "Nelson County",
			"bachelorsOrHigher": 29
		},
		{
			"fips": 51127,
			"state": "VA",
			"area_name": "New Kent County",
			"bachelorsOrHigher": 24.6
		},
		{
			"fips": 51131,
			"state": "VA",
			"area_name": "Northampton County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 51133,
			"state": "VA",
			"area_name": "Northumberland County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 51135,
			"state": "VA",
			"area_name": "Nottoway County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 51137,
			"state": "VA",
			"area_name": "Orange County",
			"bachelorsOrHigher": 24
		},
		{
			"fips": 51139,
			"state": "VA",
			"area_name": "Page County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 51141,
			"state": "VA",
			"area_name": "Patrick County",
			"bachelorsOrHigher": 11.2
		},
		{
			"fips": 51143,
			"state": "VA",
			"area_name": "Pittsylvania County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 51145,
			"state": "VA",
			"area_name": "Powhatan County",
			"bachelorsOrHigher": 28
		},
		{
			"fips": 51147,
			"state": "VA",
			"area_name": "Prince Edward County",
			"bachelorsOrHigher": 22.4
		},
		{
			"fips": 51149,
			"state": "VA",
			"area_name": "Prince George County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 51153,
			"state": "VA",
			"area_name": "Prince William County",
			"bachelorsOrHigher": 38.1
		},
		{
			"fips": 51155,
			"state": "VA",
			"area_name": "Pulaski County",
			"bachelorsOrHigher": 16.4
		},
		{
			"fips": 51157,
			"state": "VA",
			"area_name": "Rappahannock County",
			"bachelorsOrHigher": 32
		},
		{
			"fips": 51159,
			"state": "VA",
			"area_name": "Richmond County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 51161,
			"state": "VA",
			"area_name": "Roanoke County",
			"bachelorsOrHigher": 34
		},
		{
			"fips": 51163,
			"state": "VA",
			"area_name": "Rockbridge County",
			"bachelorsOrHigher": 23.5
		},
		{
			"fips": 51165,
			"state": "VA",
			"area_name": "Rockingham County",
			"bachelorsOrHigher": 23.7
		},
		{
			"fips": 51167,
			"state": "VA",
			"area_name": "Russell County",
			"bachelorsOrHigher": 11.9
		},
		{
			"fips": 51169,
			"state": "VA",
			"area_name": "Scott County",
			"bachelorsOrHigher": 11.6
		},
		{
			"fips": 51171,
			"state": "VA",
			"area_name": "Shenandoah County",
			"bachelorsOrHigher": 19.8
		},
		{
			"fips": 51173,
			"state": "VA",
			"area_name": "Smyth County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 51175,
			"state": "VA",
			"area_name": "Southampton County",
			"bachelorsOrHigher": 14.8
		},
		{
			"fips": 51177,
			"state": "VA",
			"area_name": "Spotsylvania County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 51179,
			"state": "VA",
			"area_name": "Stafford County",
			"bachelorsOrHigher": 37.1
		},
		{
			"fips": 51181,
			"state": "VA",
			"area_name": "Surry County",
			"bachelorsOrHigher": 18.8
		},
		{
			"fips": 51183,
			"state": "VA",
			"area_name": "Sussex County",
			"bachelorsOrHigher": 9
		},
		{
			"fips": 51185,
			"state": "VA",
			"area_name": "Tazewell County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 51187,
			"state": "VA",
			"area_name": "Warren County",
			"bachelorsOrHigher": 19.7
		},
		{
			"fips": 51191,
			"state": "VA",
			"area_name": "Washington County",
			"bachelorsOrHigher": 23.5
		},
		{
			"fips": 51193,
			"state": "VA",
			"area_name": "Westmoreland County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 51195,
			"state": "VA",
			"area_name": "Wise County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 51197,
			"state": "VA",
			"area_name": "Wythe County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 51199,
			"state": "VA",
			"area_name": "York County",
			"bachelorsOrHigher": 42
		},
		{
			"fips": 51510,
			"state": "VA",
			"area_name": "Alexandria city",
			"bachelorsOrHigher": 61.5
		},
		{
			"fips": 51520,
			"state": "VA",
			"area_name": "Bristol city",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 51530,
			"state": "VA",
			"area_name": "Buena Vista city",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 51540,
			"state": "VA",
			"area_name": "Charlottesville city",
			"bachelorsOrHigher": 49.3
		},
		{
			"fips": 51550,
			"state": "VA",
			"area_name": "Chesapeake city",
			"bachelorsOrHigher": 29.4
		},
		{
			"fips": 51570,
			"state": "VA",
			"area_name": "Colonial Heights city",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 51580,
			"state": "VA",
			"area_name": "Covington city",
			"bachelorsOrHigher": 9
		},
		{
			"fips": 51590,
			"state": "VA",
			"area_name": "Danville city",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 51595,
			"state": "VA",
			"area_name": "Emporia city",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 51600,
			"state": "VA",
			"area_name": "Fairfax city",
			"bachelorsOrHigher": 53.5
		},
		{
			"fips": 51610,
			"state": "VA",
			"area_name": "Falls Church city",
			"bachelorsOrHigher": 75.1
		},
		{
			"fips": 51620,
			"state": "VA",
			"area_name": "Franklin city",
			"bachelorsOrHigher": 19.8
		},
		{
			"fips": 51630,
			"state": "VA",
			"area_name": "Fredericksburg city",
			"bachelorsOrHigher": 37.7
		},
		{
			"fips": 51640,
			"state": "VA",
			"area_name": "Galax city",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 51650,
			"state": "VA",
			"area_name": "Hampton city",
			"bachelorsOrHigher": 23.3
		},
		{
			"fips": 51660,
			"state": "VA",
			"area_name": "Harrisonburg city",
			"bachelorsOrHigher": 35.6
		},
		{
			"fips": 51670,
			"state": "VA",
			"area_name": "Hopewell city",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 51678,
			"state": "VA",
			"area_name": "Lexington city",
			"bachelorsOrHigher": 44.8
		},
		{
			"fips": 51680,
			"state": "VA",
			"area_name": "Lynchburg city",
			"bachelorsOrHigher": 32.3
		},
		{
			"fips": 51683,
			"state": "VA",
			"area_name": "Manassas city",
			"bachelorsOrHigher": 29.1
		},
		{
			"fips": 51685,
			"state": "VA",
			"area_name": "Manassas Park city",
			"bachelorsOrHigher": 26.3
		},
		{
			"fips": 51690,
			"state": "VA",
			"area_name": "Martinsville city",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 51700,
			"state": "VA",
			"area_name": "Newport News city",
			"bachelorsOrHigher": 24.1
		},
		{
			"fips": 51710,
			"state": "VA",
			"area_name": "Norfolk city",
			"bachelorsOrHigher": 25.6
		},
		{
			"fips": 51720,
			"state": "VA",
			"area_name": "Norton city",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 51730,
			"state": "VA",
			"area_name": "Petersburg city",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 51735,
			"state": "VA",
			"area_name": "Poquoson city",
			"bachelorsOrHigher": 35.8
		},
		{
			"fips": 51740,
			"state": "VA",
			"area_name": "Portsmouth city",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 51750,
			"state": "VA",
			"area_name": "Radford city",
			"bachelorsOrHigher": 34.9
		},
		{
			"fips": 51760,
			"state": "VA",
			"area_name": "Richmond city",
			"bachelorsOrHigher": 35.4
		},
		{
			"fips": 51770,
			"state": "VA",
			"area_name": "Roanoke city",
			"bachelorsOrHigher": 24.1
		},
		{
			"fips": 51775,
			"state": "VA",
			"area_name": "Salem city",
			"bachelorsOrHigher": 30.7
		},
		{
			"fips": 51790,
			"state": "VA",
			"area_name": "Staunton city",
			"bachelorsOrHigher": 31.5
		},
		{
			"fips": 51800,
			"state": "VA",
			"area_name": "Suffolk city",
			"bachelorsOrHigher": 26.1
		},
		{
			"fips": 51810,
			"state": "VA",
			"area_name": "Virginia Beach city",
			"bachelorsOrHigher": 33.5
		},
		{
			"fips": 51820,
			"state": "VA",
			"area_name": "Waynesboro city",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 51830,
			"state": "VA",
			"area_name": "Williamsburg city",
			"bachelorsOrHigher": 48.6
		},
		{
			"fips": 51840,
			"state": "VA",
			"area_name": "Winchester city",
			"bachelorsOrHigher": 28.1
		},
		{
			"fips": 53001,
			"state": "WA",
			"area_name": "Adams County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 53003,
			"state": "WA",
			"area_name": "Asotin County",
			"bachelorsOrHigher": 18.5
		},
		{
			"fips": 53005,
			"state": "WA",
			"area_name": "Benton County",
			"bachelorsOrHigher": 29.2
		},
		{
			"fips": 53007,
			"state": "WA",
			"area_name": "Chelan County",
			"bachelorsOrHigher": 24
		},
		{
			"fips": 53009,
			"state": "WA",
			"area_name": "Clallam County",
			"bachelorsOrHigher": 24.5
		},
		{
			"fips": 53011,
			"state": "WA",
			"area_name": "Clark County",
			"bachelorsOrHigher": 26.5
		},
		{
			"fips": 53013,
			"state": "WA",
			"area_name": "Columbia County",
			"bachelorsOrHigher": 20.4
		},
		{
			"fips": 53015,
			"state": "WA",
			"area_name": "Cowlitz County",
			"bachelorsOrHigher": 15.6
		},
		{
			"fips": 53017,
			"state": "WA",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 53019,
			"state": "WA",
			"area_name": "Ferry County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 53021,
			"state": "WA",
			"area_name": "Franklin County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 53023,
			"state": "WA",
			"area_name": "Garfield County",
			"bachelorsOrHigher": 21.9
		},
		{
			"fips": 53025,
			"state": "WA",
			"area_name": "Grant County",
			"bachelorsOrHigher": 15.5
		},
		{
			"fips": 53027,
			"state": "WA",
			"area_name": "Grays Harbor County",
			"bachelorsOrHigher": 15
		},
		{
			"fips": 53029,
			"state": "WA",
			"area_name": "Island County",
			"bachelorsOrHigher": 31.7
		},
		{
			"fips": 53031,
			"state": "WA",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 37.3
		},
		{
			"fips": 53033,
			"state": "WA",
			"area_name": "King County",
			"bachelorsOrHigher": 47.1
		},
		{
			"fips": 53035,
			"state": "WA",
			"area_name": "Kitsap County",
			"bachelorsOrHigher": 30
		},
		{
			"fips": 53037,
			"state": "WA",
			"area_name": "Kittitas County",
			"bachelorsOrHigher": 34
		},
		{
			"fips": 53039,
			"state": "WA",
			"area_name": "Klickitat County",
			"bachelorsOrHigher": 20.6
		},
		{
			"fips": 53041,
			"state": "WA",
			"area_name": "Lewis County",
			"bachelorsOrHigher": 14.1
		},
		{
			"fips": 53043,
			"state": "WA",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 19.3
		},
		{
			"fips": 53045,
			"state": "WA",
			"area_name": "Mason County",
			"bachelorsOrHigher": 17.9
		},
		{
			"fips": 53047,
			"state": "WA",
			"area_name": "Okanogan County",
			"bachelorsOrHigher": 17
		},
		{
			"fips": 53049,
			"state": "WA",
			"area_name": "Pacific County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 53051,
			"state": "WA",
			"area_name": "Pend Oreille County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 53053,
			"state": "WA",
			"area_name": "Pierce County",
			"bachelorsOrHigher": 24.2
		},
		{
			"fips": 53055,
			"state": "WA",
			"area_name": "San Juan County",
			"bachelorsOrHigher": 45.2
		},
		{
			"fips": 53057,
			"state": "WA",
			"area_name": "Skagit County",
			"bachelorsOrHigher": 24.5
		},
		{
			"fips": 53059,
			"state": "WA",
			"area_name": "Skamania County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 53061,
			"state": "WA",
			"area_name": "Snohomish County",
			"bachelorsOrHigher": 29.3
		},
		{
			"fips": 53063,
			"state": "WA",
			"area_name": "Spokane County",
			"bachelorsOrHigher": 28.6
		},
		{
			"fips": 53065,
			"state": "WA",
			"area_name": "Stevens County",
			"bachelorsOrHigher": 17.6
		},
		{
			"fips": 53067,
			"state": "WA",
			"area_name": "Thurston County",
			"bachelorsOrHigher": 32.9
		},
		{
			"fips": 53069,
			"state": "WA",
			"area_name": "Wahkiakum County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 53071,
			"state": "WA",
			"area_name": "Walla Walla County",
			"bachelorsOrHigher": 26.5
		},
		{
			"fips": 53073,
			"state": "WA",
			"area_name": "Whatcom County",
			"bachelorsOrHigher": 32.4
		},
		{
			"fips": 53075,
			"state": "WA",
			"area_name": "Whitman County",
			"bachelorsOrHigher": 47.8
		},
		{
			"fips": 53077,
			"state": "WA",
			"area_name": "Yakima County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 54001,
			"state": "WV",
			"area_name": "Barbour County",
			"bachelorsOrHigher": 12.3
		},
		{
			"fips": 54003,
			"state": "WV",
			"area_name": "Berkeley County",
			"bachelorsOrHigher": 20.3
		},
		{
			"fips": 54005,
			"state": "WV",
			"area_name": "Boone County",
			"bachelorsOrHigher": 9.1
		},
		{
			"fips": 54007,
			"state": "WV",
			"area_name": "Braxton County",
			"bachelorsOrHigher": 10.8
		},
		{
			"fips": 54009,
			"state": "WV",
			"area_name": "Brooke County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 54011,
			"state": "WV",
			"area_name": "Cabell County",
			"bachelorsOrHigher": 26.4
		},
		{
			"fips": 54013,
			"state": "WV",
			"area_name": "Calhoun County",
			"bachelorsOrHigher": 8.9
		},
		{
			"fips": 54015,
			"state": "WV",
			"area_name": "Clay County",
			"bachelorsOrHigher": 9.4
		},
		{
			"fips": 54017,
			"state": "WV",
			"area_name": "Doddridge County",
			"bachelorsOrHigher": 12.7
		},
		{
			"fips": 54019,
			"state": "WV",
			"area_name": "Fayette County",
			"bachelorsOrHigher": 11.8
		},
		{
			"fips": 54021,
			"state": "WV",
			"area_name": "Gilmer County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 54023,
			"state": "WV",
			"area_name": "Grant County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 54025,
			"state": "WV",
			"area_name": "Greenbrier County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 54027,
			"state": "WV",
			"area_name": "Hampshire County",
			"bachelorsOrHigher": 8.7
		},
		{
			"fips": 54029,
			"state": "WV",
			"area_name": "Hancock County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 54031,
			"state": "WV",
			"area_name": "Hardy County",
			"bachelorsOrHigher": 12.2
		},
		{
			"fips": 54033,
			"state": "WV",
			"area_name": "Harrison County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 54035,
			"state": "WV",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 16.2
		},
		{
			"fips": 54037,
			"state": "WV",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 54039,
			"state": "WV",
			"area_name": "Kanawha County",
			"bachelorsOrHigher": 24.9
		},
		{
			"fips": 54041,
			"state": "WV",
			"area_name": "Lewis County",
			"bachelorsOrHigher": 14.9
		},
		{
			"fips": 54043,
			"state": "WV",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 9.1
		},
		{
			"fips": 54045,
			"state": "WV",
			"area_name": "Logan County",
			"bachelorsOrHigher": 8.5
		},
		{
			"fips": 54047,
			"state": "WV",
			"area_name": "McDowell County",
			"bachelorsOrHigher": 5.8
		},
		{
			"fips": 54049,
			"state": "WV",
			"area_name": "Marion County",
			"bachelorsOrHigher": 20.9
		},
		{
			"fips": 54051,
			"state": "WV",
			"area_name": "Marshall County",
			"bachelorsOrHigher": 15.9
		},
		{
			"fips": 54053,
			"state": "WV",
			"area_name": "Mason County",
			"bachelorsOrHigher": 10.1
		},
		{
			"fips": 54055,
			"state": "WV",
			"area_name": "Mercer County",
			"bachelorsOrHigher": 19
		},
		{
			"fips": 54057,
			"state": "WV",
			"area_name": "Mineral County",
			"bachelorsOrHigher": 12.8
		},
		{
			"fips": 54059,
			"state": "WV",
			"area_name": "Mingo County",
			"bachelorsOrHigher": 10.5
		},
		{
			"fips": 54061,
			"state": "WV",
			"area_name": "Monongalia County",
			"bachelorsOrHigher": 38.8
		},
		{
			"fips": 54063,
			"state": "WV",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 54065,
			"state": "WV",
			"area_name": "Morgan County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 54067,
			"state": "WV",
			"area_name": "Nicholas County",
			"bachelorsOrHigher": 13.6
		},
		{
			"fips": 54069,
			"state": "WV",
			"area_name": "Ohio County",
			"bachelorsOrHigher": 28.6
		},
		{
			"fips": 54071,
			"state": "WV",
			"area_name": "Pendleton County",
			"bachelorsOrHigher": 14
		},
		{
			"fips": 54073,
			"state": "WV",
			"area_name": "Pleasants County",
			"bachelorsOrHigher": 13.3
		},
		{
			"fips": 54075,
			"state": "WV",
			"area_name": "Pocahontas County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 54077,
			"state": "WV",
			"area_name": "Preston County",
			"bachelorsOrHigher": 12.9
		},
		{
			"fips": 54079,
			"state": "WV",
			"area_name": "Putnam County",
			"bachelorsOrHigher": 23.9
		},
		{
			"fips": 54081,
			"state": "WV",
			"area_name": "Raleigh County",
			"bachelorsOrHigher": 18.2
		},
		{
			"fips": 54083,
			"state": "WV",
			"area_name": "Randolph County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 54085,
			"state": "WV",
			"area_name": "Ritchie County",
			"bachelorsOrHigher": 10.4
		},
		{
			"fips": 54087,
			"state": "WV",
			"area_name": "Roane County",
			"bachelorsOrHigher": 10.3
		},
		{
			"fips": 54089,
			"state": "WV",
			"area_name": "Summers County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 54091,
			"state": "WV",
			"area_name": "Taylor County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 54093,
			"state": "WV",
			"area_name": "Tucker County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 54095,
			"state": "WV",
			"area_name": "Tyler County",
			"bachelorsOrHigher": 10
		},
		{
			"fips": 54097,
			"state": "WV",
			"area_name": "Upshur County",
			"bachelorsOrHigher": 15.8
		},
		{
			"fips": 54099,
			"state": "WV",
			"area_name": "Wayne County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 54101,
			"state": "WV",
			"area_name": "Webster County",
			"bachelorsOrHigher": 9.1
		},
		{
			"fips": 54103,
			"state": "WV",
			"area_name": "Wetzel County",
			"bachelorsOrHigher": 10.2
		},
		{
			"fips": 54105,
			"state": "WV",
			"area_name": "Wirt County",
			"bachelorsOrHigher": 10.9
		},
		{
			"fips": 54107,
			"state": "WV",
			"area_name": "Wood County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 54109,
			"state": "WV",
			"area_name": "Wyoming County",
			"bachelorsOrHigher": 9
		},
		{
			"fips": 55001,
			"state": "WI",
			"area_name": "Adams County",
			"bachelorsOrHigher": 12.6
		},
		{
			"fips": 55003,
			"state": "WI",
			"area_name": "Ashland County",
			"bachelorsOrHigher": 22.3
		},
		{
			"fips": 55005,
			"state": "WI",
			"area_name": "Barron County",
			"bachelorsOrHigher": 16.6
		},
		{
			"fips": 55007,
			"state": "WI",
			"area_name": "Bayfield County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 55009,
			"state": "WI",
			"area_name": "Brown County",
			"bachelorsOrHigher": 27.5
		},
		{
			"fips": 55011,
			"state": "WI",
			"area_name": "Buffalo County",
			"bachelorsOrHigher": 17.7
		},
		{
			"fips": 55013,
			"state": "WI",
			"area_name": "Burnett County",
			"bachelorsOrHigher": 16.8
		},
		{
			"fips": 55015,
			"state": "WI",
			"area_name": "Calumet County",
			"bachelorsOrHigher": 28
		},
		{
			"fips": 55017,
			"state": "WI",
			"area_name": "Chippewa County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 55019,
			"state": "WI",
			"area_name": "Clark County",
			"bachelorsOrHigher": 11.7
		},
		{
			"fips": 55021,
			"state": "WI",
			"area_name": "Columbia County",
			"bachelorsOrHigher": 22.2
		},
		{
			"fips": 55023,
			"state": "WI",
			"area_name": "Crawford County",
			"bachelorsOrHigher": 15.3
		},
		{
			"fips": 55025,
			"state": "WI",
			"area_name": "Dane County",
			"bachelorsOrHigher": 47.6
		},
		{
			"fips": 55027,
			"state": "WI",
			"area_name": "Dodge County",
			"bachelorsOrHigher": 15.7
		},
		{
			"fips": 55029,
			"state": "WI",
			"area_name": "Door County",
			"bachelorsOrHigher": 29.4
		},
		{
			"fips": 55031,
			"state": "WI",
			"area_name": "Douglas County",
			"bachelorsOrHigher": 21.9
		},
		{
			"fips": 55033,
			"state": "WI",
			"area_name": "Dunn County",
			"bachelorsOrHigher": 25.3
		},
		{
			"fips": 55035,
			"state": "WI",
			"area_name": "Eau Claire County",
			"bachelorsOrHigher": 31.1
		},
		{
			"fips": 55037,
			"state": "WI",
			"area_name": "Florence County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 55039,
			"state": "WI",
			"area_name": "Fond du Lac County",
			"bachelorsOrHigher": 20.9
		},
		{
			"fips": 55041,
			"state": "WI",
			"area_name": "Forest County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 55043,
			"state": "WI",
			"area_name": "Grant County",
			"bachelorsOrHigher": 20.2
		},
		{
			"fips": 55045,
			"state": "WI",
			"area_name": "Green County",
			"bachelorsOrHigher": 20.9
		},
		{
			"fips": 55047,
			"state": "WI",
			"area_name": "Green Lake County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 55049,
			"state": "WI",
			"area_name": "Iowa County",
			"bachelorsOrHigher": 23.2
		},
		{
			"fips": 55051,
			"state": "WI",
			"area_name": "Iron County",
			"bachelorsOrHigher": 20.6
		},
		{
			"fips": 55053,
			"state": "WI",
			"area_name": "Jackson County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 55055,
			"state": "WI",
			"area_name": "Jefferson County",
			"bachelorsOrHigher": 23.3
		},
		{
			"fips": 55057,
			"state": "WI",
			"area_name": "Juneau County",
			"bachelorsOrHigher": 12.4
		},
		{
			"fips": 55059,
			"state": "WI",
			"area_name": "Kenosha County",
			"bachelorsOrHigher": 24.3
		},
		{
			"fips": 55061,
			"state": "WI",
			"area_name": "Kewaunee County",
			"bachelorsOrHigher": 14.4
		},
		{
			"fips": 55063,
			"state": "WI",
			"area_name": "La Crosse County",
			"bachelorsOrHigher": 30.8
		},
		{
			"fips": 55065,
			"state": "WI",
			"area_name": "Lafayette County",
			"bachelorsOrHigher": 17.3
		},
		{
			"fips": 55067,
			"state": "WI",
			"area_name": "Langlade County",
			"bachelorsOrHigher": 13.5
		},
		{
			"fips": 55069,
			"state": "WI",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 55071,
			"state": "WI",
			"area_name": "Manitowoc County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 55073,
			"state": "WI",
			"area_name": "Marathon County",
			"bachelorsOrHigher": 23
		},
		{
			"fips": 55075,
			"state": "WI",
			"area_name": "Marinette County",
			"bachelorsOrHigher": 13.9
		},
		{
			"fips": 55077,
			"state": "WI",
			"area_name": "Marquette County",
			"bachelorsOrHigher": 13
		},
		{
			"fips": 55078,
			"state": "WI",
			"area_name": "Menominee County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 55079,
			"state": "WI",
			"area_name": "Milwaukee County",
			"bachelorsOrHigher": 28.7
		},
		{
			"fips": 55081,
			"state": "WI",
			"area_name": "Monroe County",
			"bachelorsOrHigher": 17.5
		},
		{
			"fips": 55083,
			"state": "WI",
			"area_name": "Oconto County",
			"bachelorsOrHigher": 15.4
		},
		{
			"fips": 55085,
			"state": "WI",
			"area_name": "Oneida County",
			"bachelorsOrHigher": 24.4
		},
		{
			"fips": 55087,
			"state": "WI",
			"area_name": "Outagamie County",
			"bachelorsOrHigher": 26.9
		},
		{
			"fips": 55089,
			"state": "WI",
			"area_name": "Ozaukee County",
			"bachelorsOrHigher": 46.4
		},
		{
			"fips": 55091,
			"state": "WI",
			"area_name": "Pepin County",
			"bachelorsOrHigher": 17.1
		},
		{
			"fips": 55093,
			"state": "WI",
			"area_name": "Pierce County",
			"bachelorsOrHigher": 26.3
		},
		{
			"fips": 55095,
			"state": "WI",
			"area_name": "Polk County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 55097,
			"state": "WI",
			"area_name": "Portage County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 55099,
			"state": "WI",
			"area_name": "Price County",
			"bachelorsOrHigher": 16.1
		},
		{
			"fips": 55101,
			"state": "WI",
			"area_name": "Racine County",
			"bachelorsOrHigher": 23.4
		},
		{
			"fips": 55103,
			"state": "WI",
			"area_name": "Richland County",
			"bachelorsOrHigher": 16.7
		},
		{
			"fips": 55105,
			"state": "WI",
			"area_name": "Rock County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 55107,
			"state": "WI",
			"area_name": "Rusk County",
			"bachelorsOrHigher": 14.2
		},
		{
			"fips": 55109,
			"state": "WI",
			"area_name": "St. Croix County",
			"bachelorsOrHigher": 32.4
		},
		{
			"fips": 55111,
			"state": "WI",
			"area_name": "Sauk County",
			"bachelorsOrHigher": 21.9
		},
		{
			"fips": 55113,
			"state": "WI",
			"area_name": "Sawyer County",
			"bachelorsOrHigher": 22.1
		},
		{
			"fips": 55115,
			"state": "WI",
			"area_name": "Shawano County",
			"bachelorsOrHigher": 15.1
		},
		{
			"fips": 55117,
			"state": "WI",
			"area_name": "Sheboygan County",
			"bachelorsOrHigher": 22.5
		},
		{
			"fips": 55119,
			"state": "WI",
			"area_name": "Taylor County",
			"bachelorsOrHigher": 13.8
		},
		{
			"fips": 55121,
			"state": "WI",
			"area_name": "Trempealeau County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 55123,
			"state": "WI",
			"area_name": "Vernon County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 55125,
			"state": "WI",
			"area_name": "Vilas County",
			"bachelorsOrHigher": 24.9
		},
		{
			"fips": 55127,
			"state": "WI",
			"area_name": "Walworth County",
			"bachelorsOrHigher": 26.3
		},
		{
			"fips": 55129,
			"state": "WI",
			"area_name": "Washburn County",
			"bachelorsOrHigher": 20.5
		},
		{
			"fips": 55131,
			"state": "WI",
			"area_name": "Washington County",
			"bachelorsOrHigher": 27.9
		},
		{
			"fips": 55133,
			"state": "WI",
			"area_name": "Waukesha County",
			"bachelorsOrHigher": 41
		},
		{
			"fips": 55135,
			"state": "WI",
			"area_name": "Waupaca County",
			"bachelorsOrHigher": 16.5
		},
		{
			"fips": 55137,
			"state": "WI",
			"area_name": "Waushara County",
			"bachelorsOrHigher": 15.2
		},
		{
			"fips": 55139,
			"state": "WI",
			"area_name": "Winnebago County",
			"bachelorsOrHigher": 26.1
		},
		{
			"fips": 55141,
			"state": "WI",
			"area_name": "Wood County",
			"bachelorsOrHigher": 18.9
		},
		{
			"fips": 56001,
			"state": "WY",
			"area_name": "Albany County",
			"bachelorsOrHigher": 48.8
		},
		{
			"fips": 56003,
			"state": "WY",
			"area_name": "Big Horn County",
			"bachelorsOrHigher": 20
		},
		{
			"fips": 56005,
			"state": "WY",
			"area_name": "Campbell County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 56007,
			"state": "WY",
			"area_name": "Carbon County",
			"bachelorsOrHigher": 17.2
		},
		{
			"fips": 56009,
			"state": "WY",
			"area_name": "Converse County",
			"bachelorsOrHigher": 19.6
		},
		{
			"fips": 56011,
			"state": "WY",
			"area_name": "Crook County",
			"bachelorsOrHigher": 21.6
		},
		{
			"fips": 56013,
			"state": "WY",
			"area_name": "Fremont County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 56015,
			"state": "WY",
			"area_name": "Goshen County",
			"bachelorsOrHigher": 21.5
		},
		{
			"fips": 56017,
			"state": "WY",
			"area_name": "Hot Springs County",
			"bachelorsOrHigher": 19.5
		},
		{
			"fips": 56019,
			"state": "WY",
			"area_name": "Johnson County",
			"bachelorsOrHigher": 27
		},
		{
			"fips": 56021,
			"state": "WY",
			"area_name": "Laramie County",
			"bachelorsOrHigher": 26.8
		},
		{
			"fips": 56023,
			"state": "WY",
			"area_name": "Lincoln County",
			"bachelorsOrHigher": 20.1
		},
		{
			"fips": 56025,
			"state": "WY",
			"area_name": "Natrona County",
			"bachelorsOrHigher": 21.3
		},
		{
			"fips": 56027,
			"state": "WY",
			"area_name": "Niobrara County",
			"bachelorsOrHigher": 21.4
		},
		{
			"fips": 56029,
			"state": "WY",
			"area_name": "Park County",
			"bachelorsOrHigher": 28.3
		},
		{
			"fips": 56031,
			"state": "WY",
			"area_name": "Platte County",
			"bachelorsOrHigher": 19.2
		},
		{
			"fips": 56033,
			"state": "WY",
			"area_name": "Sheridan County",
			"bachelorsOrHigher": 28.9
		},
		{
			"fips": 56035,
			"state": "WY",
			"area_name": "Sublette County",
			"bachelorsOrHigher": 23.6
		},
		{
			"fips": 56037,
			"state": "WY",
			"area_name": "Sweetwater County",
			"bachelorsOrHigher": 18.1
		},
		{
			"fips": 56039,
			"state": "WY",
			"area_name": "Teton County",
			"bachelorsOrHigher": 51.9
		},
		{
			"fips": 56041,
			"state": "WY",
			"area_name": "Uinta County",
			"bachelorsOrHigher": 18.7
		},
		{
			"fips": 56043,
			"state": "WY",
			"area_name": "Washakie County",
			"bachelorsOrHigher": 21.2
		},
		{
			"fips": 56045,
			"state": "WY",
			"area_name": "Weston County",
			"bachelorsOrHigher": 16.8
		}
	]

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createTreeMapTests;

	var _chai = __webpack_require__(2);

	var _globalD3Tests = __webpack_require__(56);

	function createTreeMapTests() {

	  describe('#TreeMapTests', function () {
	    describe('#Content', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. My tree map should have a title with a corresponding\n      id="title"', function () {
	        _chai.assert.isNotNull(document.getElementById('title'), 'Could not find element with id="title" ');
	      });

	      reqNum++;
	      it(reqNum + '. My tree map should have a description with a corresponding\n      id="description"', function () {
	        _chai.assert.isNotNull(document.getElementById('description'), 'Could not find element with id="description" ');
	      });

	      reqNum++;
	      it(reqNum + '. My tree map should have <rect> elements with a\n      corresponding class="tile" that represent the data', function () {
	        _chai.assert.isAbove(document.querySelectorAll('.tile').length, 0, 'Could not find elements with class="tile" ');
	      });

	      reqNum++;
	      it(reqNum + '. There should be at least 2 different fill colors used for\n      the tiles', function () {
	        var tiles = document.querySelectorAll('.tile');
	        var uniqueColors = [];

	        for (var i = 0; i < tiles.length; i++) {
	          var tileColor = tiles[i].style.fill || tiles[i].getAttribute('fill');

	          // If the current color isn't in the uniqueColors arr, push it.
	          // TODO: Isn't this logic in another D3 test too? Maybe Choropleth?
	          // We should put it in an external module if so.
	          if (uniqueColors.indexOf(tileColor) === -1) {
	            uniqueColors.push(tileColor);
	          }
	        }
	        _chai.assert.isAtLeast(uniqueColors.length, 2, 'There should be more than two fill colors used for the tiles');
	      });

	      reqNum++;
	      it(reqNum + '. Each tile should have the properties "data-name",\n      "data-category",  and "data-value" containing their corresponding name,\n      category, and value', function () {
	        var tiles = document.querySelectorAll('.tile');
	        _chai.assert.isAbove(tiles.length, 0, 'Could not find any elements with a class="tile"');

	        for (var i = 0; i < tiles.length; i++) {
	          var tile = tiles[i];
	          _chai.assert.isNotNull(tile.getAttribute('data-name'), 'Could not find property \'data-name\' in tile');
	          _chai.assert.isNotNull(tile.getAttribute('data-category'), 'Could not find property \'data-category\' in tile');
	          _chai.assert.isNotNull(tile.getAttribute('data-value'), 'Could not find property \'data-value\' in tile');
	        }
	      });

	      reqNum++;
	      it(reqNum + '.  The area of each tile should correspond to the data-value\n      amount', function () {
	        var tilesCollection = document.querySelectorAll('.tile');
	        var category = void 0;

	        _chai.assert.isAbove(tilesCollection.length, 0, 'Could not find any elements with a class="tile"');

	        var tiles = [].slice.call(tilesCollection);

	        // Group tiles by category.
	        var tilesByCategory = {};
	        for (var j = 1; j < tiles.length; j++) {
	          category = tiles[j].getAttribute('data-category');
	          if (!tilesByCategory[category]) {
	            tilesByCategory[category] = [];
	          }
	          tilesByCategory[category].push(tiles[j]);
	        }

	        // Sort tile values in each category.
	        for (var i = 0; i < tilesByCategory.length; i++) {
	          category = tilesByCategory[i];
	          category.sort(function (tile1, tile2) {
	            var tile1Value = tile1.getAttribute('data-value');
	            var tile2Value = tile2.getAttribute('data-value');
	            return tile1Value - tile2Value;
	          });
	        }

	        // Outer loop loops through array category arrays.
	        for (var k = 0; k < tilesByCategory.length; k++) {
	          if (tilesByCategory[k].length > 1) {
	            // Loops through each item in playfrom array.
	            for (var m = 0; m < tilesByCategory[k].length - 1; m++) {
	              var firstTile = +tilesByCategory[k][m].getAttribute('data-value');
	              var secondTile = +tilesByCategory[k][m + 1].getAttribute('data-value');

	              _chai.assert.isAtMost(firstTile, secondTile, 'data-value property does not match tile area');
	            }
	          }
	        }
	      });

	      reqNum++;
	      it(reqNum + '. My tree map should have a legend with corresponding\n      id="legend"', function () {
	        _chai.assert.isNotNull(document.getElementById('legend'), 'Could not find element with id="legend" ');
	      });

	      reqNum++;
	      it(reqNum + '. The legend should have items which use at least 2 different\n      fill colors', function () {
	        _chai.assert.isNotNull(document.getElementById('legend'), 'Could not find element with id="legend" ');

	        // TODO: Isn't this logic in another D3 test too? Maybe Choropleth?
	        // We should put it in an external module if so.
	        // Get all children of the legend to gather their color data.
	        var legendItems = document.querySelector('#legend').querySelectorAll('*');
	        var uniqueColors = [];

	        for (var i = 0; i < legendItems.length; i++) {
	          var legendItemColors = legendItems[i].style.fill || legendItems[i].getAttribute('fill');

	          // If the current color isn't in the uniqueColors arr, push it.
	          if (uniqueColors.indexOf(legendItemColors) === -1) {
	            uniqueColors.push(legendItemColors);
	          }
	        }

	        _chai.assert.isAtLeast(uniqueColors.length, 2, 'There should be at least two fill colors used for the legend ');
	      });
	    });

	    // Additional tests.
	    (0, _globalD3Tests.testToolTip)(document.querySelectorAll('.tile'), 'data-value', 'data-value');
	  });
	}

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createRandomQuoteMachineTests;

	var _chai = __webpack_require__(2);

	var _elementUtils = __webpack_require__(63);

	var _sharedTestStrings = __webpack_require__(46);

	function createRandomQuoteMachineTests() {
	  describe('Random Quote Machine tests', function () {

	    // We set the timeout at a very generous 15 seconds because it might take
	    // a long time on a slow network to load a new quote. The tests are
	    // written in a way that they will pass as soon as we detect success,
	    // usually far sooner than 15 seconds.
	    var requestTimeout = 15000;

	    describe('#Technology Stack', function () {
	      it(_sharedTestStrings.frontEndLibrariesStack, function () {
	        return true;
	      });
	    });

	    describe('#Content', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. I can see a wrapper element with a corresponding\n      id="quote-box".', function () {
	        _chai.assert.isNotNull(document.getElementById('quote-box'));
	      });

	      reqNum++;
	      it(reqNum + '. Within #quote-box, I can see an element with corresponding\n      id="text".', function () {
	        _chai.assert.isNotNull(document.getElementById('text'), '#text is not defined ');
	        _chai.assert.strictEqual(document.querySelectorAll('#quote-box #text').length, 1, '#text is not a child of #quote-box ');
	      });

	      reqNum++;
	      it(reqNum + '. Within #quote-box, I can see an element with corresponding\n      id="author".', function () {
	        _chai.assert.isNotNull(document.getElementById('author'), '#author is not defined ');
	        _chai.assert.strictEqual(document.querySelectorAll('#quote-box #author').length, 1, '#author is not a child of #quote-box ');
	      });

	      reqNum++;
	      it(reqNum + '. Within #quote-box, I can see a clickable element with\n      corresponding id="new-quote".', function () {
	        _chai.assert.isNotNull(document.getElementById('new-quote'), '#new-quote is not defined ');
	        _chai.assert.strictEqual(document.querySelectorAll('#quote-box #new-quote').length, 1, '#new-quote button is not a child of #quote-box ');
	      });

	      reqNum++;
	      it(reqNum + '. Within #quote-box, I can see a clickable <a> element with\n      corresponding id="tweet-quote".', function () {
	        _chai.assert.isNotNull(document.getElementById('tweet-quote'));
	        _chai.assert.strictEqual(document.getElementById('tweet-quote').nodeName, 'A', '#tweet-quote element is not an <a> element');
	        _chai.assert.strictEqual(document.querySelectorAll('#quote-box #tweet-quote').length, 1, '#tweet-quote element is not a child of #quote-box ');
	      });

	      reqNum++;
	      it(reqNum + '. On first load, my quote machine displays a random quote in\n      the element with id="text".', function () {
	        this.timeout(requestTimeout);
	        // Check every half second if the test passes. If we don't ever detect
	        // the success condition, the test will fail by timing out.
	        return new Promise(function (resolve) {
	          var intervalId = setInterval(function () {
	            var text = document.getElementById('text');
	            if (text.innerText.length > 0) {
	              console.log('Clearing interval ' + intervalId);
	              clearInterval(intervalId);
	              resolve();
	            }
	          }, 500);
	        });
	      });

	      reqNum++;
	      it(reqNum + '. On first load, my quote machine displays the random quote\'s\n      author in the element with id="author".', function () {
	        this.timeout(requestTimeout);
	        return new Promise(function (resolve) {
	          var intervalId = setInterval(function () {
	            var author = document.getElementById('author');
	            if (author.innerText.length > 0) {
	              console.log('Clearing interval ' + intervalId);
	              clearInterval(intervalId);
	              resolve();
	            }
	          }, 500);
	        });
	      });

	      reqNum++;
	      it(reqNum + '. When the #new-quote button is clicked, my quote machine\n      should fetch a new quote and display it in the #text element.', function () {
	        var prevText = void 0;

	        this.timeout(requestTimeout);

	        prevText = document.getElementById('text').innerText;
	        document.getElementById('new-quote').click();

	        return new Promise(function (resolve) {
	          var intervalId = setInterval(function () {
	            var newText = document.getElementById('text').innerText;
	            if (newText !== prevText) {
	              clearInterval(intervalId);
	              resolve();
	            }
	          }, 500);
	        });
	      });

	      reqNum++;
	      it(reqNum + '. My quote machine should fetch the new quote\'s author when\n      the #new-quote button is clicked and display it in the #author element.', function () {
	        var prevAuth = void 0;

	        this.timeout(requestTimeout);

	        prevAuth = document.getElementById('author').innerText;
	        document.getElementById('new-quote').click();

	        return new Promise(function (resolve) {
	          var intervalId = setInterval(function () {
	            var newAuth = document.getElementById('author').innerText;
	            if (newAuth !== prevAuth) {
	              clearInterval(intervalId);
	              resolve();
	            }
	          }, 500);
	        });
	      });

	      reqNum++;
	      it(reqNum + '. I can tweet the current quote by clicking on the\n      #tweet-quote <a> element. This <a> element should include the\n      "twitter.com/intent/tweet" path in it\'s href attribute to tweet the\n      current quote.', function () {
	        _chai.assert.isOk(document.getElementById('tweet-quote').hasAttribute('href'), '#tweet-quote <a> element must have an href attribute ');
	        var href = document.getElementById('tweet-quote').href;
	        _chai.assert.include(href.toLowerCase(), 'twitter.com/intent/tweet', 'The #tweet-quote element does not utilize the correct twitter ' + 'intent ');
	      });

	      // END #Content
	    });

	    describe('#Layout', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. The #quote-box wrapper element should be horizontally\n      centered. Please run tests with browser\'s zoom level at 100% and page\n      maximized.', function () {
	        _chai.assert.isOk((0, _elementUtils.testHorizontallyCentered)('quote-box', window));
	      });

	      // END #Layout
	    });

	    // END Random Quote Machine tests
	  });

	  // END createRandomQuoteMachineTests()
	}

/***/ }),
/* 63 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.testHorizontallyCentered = testHorizontallyCentered;
	function testHorizontallyCentered(elName, window) {
	  var centeredElement = window.document.getElementById(elName);
	  var centeredElementBounds = centeredElement.getBoundingClientRect();
	  var leftGap = centeredElementBounds.left;
	  var rightGap = window.innerWidth - centeredElementBounds.right;
	  // allow for scrollbar width
	  return Math.abs(leftGap - rightGap) < 20;
	}

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createHeatMapTests;

	var _alignmentD3Tests = __webpack_require__(58);

	var _chai = __webpack_require__(2);

	var _globalD3Tests = __webpack_require__(56);

	var months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];

	function createHeatMapTests() {

	  describe('#HeatMapTests', function () {
	    describe('#Content', function () {
	      var reqNum = 0;

	      reqNum++;
	      it(reqNum + '. My heat map should have a title with a corresponding\n      id="title".', function () {
	        _chai.assert.isNotNull(document.getElementById('title'), 'Could not find an element with id="title" ');
	      });

	      reqNum++;
	      it(reqNum + '. My heat map should have a description with a corresponding\n      id="description".', function () {
	        _chai.assert.isNotNull(document.getElementById('description'), 'Could not find an element with id="description" ');
	      });

	      reqNum++;
	      it(reqNum + '. My heat map should have an x-axis with a corresponding\n      id="x-axis".', function () {
	        _chai.assert.isNotNull(document.getElementById('x-axis'), 'Could not find an element with id="x-axis" ');
	      });

	      reqNum++;
	      it(reqNum + '. My heat map should have a y-axis with a corresponding\n      id="y-axis".', function () {
	        _chai.assert.isNotNull(document.getElementById('y-axis'), 'Could not find an element with id="y-axis" ');
	      });

	      reqNum++;
	      it(reqNum + '. My heat map should have cells with a corresponding\n      class="cell" that represent the data.', function () {
	        _chai.assert.isAbove(document.querySelectorAll('.cell').length, 0, 'Could not find any elements with a class="cell" ');
	      });

	      reqNum++;
	      it(reqNum + '. There should be at least 4 different fill colors used for\n      the cells.', function () {
	        var cells = document.querySelectorAll('.cell');
	        var uniqueColors = [];

	        for (var i = 0; i < cells.length; i++) {
	          var cellColor = cells[i].style.fill || cells[i].getAttribute('fill');

	          // if the current color isn't in the uniqueColors arr, push it
	          if (uniqueColors.indexOf(cellColor) === -1) {
	            uniqueColors.push(cellColor);
	          }
	        }
	        _chai.assert.isAtLeast(uniqueColors.length, 4, 'There should be more than four fill colors used for the cells ');
	      });

	      reqNum++;
	      it(reqNum + '. Each cell will have the properties "data-month",\n      "data-year", "data-temp" containing their corresponding month, year, and\n      temperature values.', function () {
	        var cells = document.querySelectorAll('.cell');

	        _chai.assert.isAbove(cells.length, 0, 'Could not find any elements with a class="cell" ');

	        for (var i = 0; i < cells.length; i++) {
	          var cell = cells[i];
	          _chai.assert.isNotNull(cell.getAttribute('data-month'), 'Could not find property "data-month" in cell ');
	          _chai.assert.isNotNull(cell.getAttribute('data-year'), 'Could not find property "data-year" in cell ');
	          _chai.assert.isNotNull(cell.getAttribute('data-temp'), 'Could not find property "data-temp" in cell ');
	        }
	      });

	      reqNum++;
	      it(reqNum + '. The "data-month", "data-year" of each cell should be\n      within the range of the data.', function () {

	        // NOTE:  This test contains the same exact tests from 6 and 7.
	        // Is there a way to only run test 8 if test 6 and 7 pass?
	        // Should we be putting this code in a utility function?
	        var cells = document.querySelectorAll('.cell');
	        _chai.assert.isAbove(cells.length, 0, 'Could not find any elements with a class="cell" ');

	        for (var i = 0; i < cells.length; i++) {
	          var cell = cells[i];
	          _chai.assert.isNotNull(cell.getAttribute('data-month'), 'Could not find property "data-month" in cell ');
	          _chai.assert.isNotNull(cell.getAttribute('data-year'), 'Could not find property "data-year" in cell ');
	          _chai.assert.isNotNull(cell.getAttribute('data-temp'), 'Could not find property "data-temp" in cell ');
	        }

	        var cellMonths = [];
	        var cellYears = [];

	        for (i = 0; i < cells.length; i++) {
	          cell = cells[i];

	          cellMonths.push(cell.getAttribute('data-month'));
	          cellYears.push(cell.getAttribute('data-year'));
	        }

	        function valuesAreBetween(min, max, data) {
	          for (var i = 0; i < data.length; i++) {
	            var item = data[i];
	            if (item < min || item > max) {
	              return false;
	            }
	          }
	          return true;
	        }
	        (0, _chai.assert)(valuesAreBetween(0, 11, cellMonths), 'Month data values should be between 0 and 11 ');
	        (0, _chai.assert)(valuesAreBetween(1753, 2015, cellYears), 'Year data values should be between 1753 and 2015 ');
	      });

	      reqNum++;
	      it(reqNum + '. My heat map should have cells that align with the\n      corresponding month on the y-axis.', function () {
	        var cellsCollection = document.querySelectorAll('.cell');
	        var dataAttr = 'data-month';
	        var coordAttr = 'y';

	        _chai.assert.isAbove(cellsCollection.length, 0, 'Could not find any elements with a class="cell" ');

	        // construct an object with information about axis and data-type
	        // supply hard-coded units for an axis if necessary
	        var yAxisInfo = (0, _alignmentD3Tests.getYAxisInfo)(document.querySelector('#y-axis'), dataAttr, coordAttr, months);
	        _chai.assert.isTrue((0, _alignmentD3Tests.isAxisAlignedWithDataPoints)(yAxisInfo, cellsCollection, _alignmentD3Tests.getYMisalignmentCount, _alignmentD3Tests.getFeatureValueMonths, _alignmentD3Tests.getTickValueMonths), 'month values don\'t line up with y locations ');
	      });

	      reqNum++;
	      it(reqNum + '. My heat map should have cells that align with the\n      corresponding year on the x-axis.', function () {
	        var cellsCollection = document.querySelectorAll('.cell');
	        var dataAttr = 'data-year';
	        var coordAttr = 'x';

	        _chai.assert.isAbove(cellsCollection.length, 0, 'Could not find any elements with a class="cell" ');

	        // construct an object with information about axis and data-type
	        var xAxisInfo = (0, _alignmentD3Tests.getXAxisInfo)(document.querySelector('#x-axis'), dataAttr, coordAttr);

	        _chai.assert.isTrue((0, _alignmentD3Tests.isAxisAlignedWithDataPoints)(xAxisInfo, cellsCollection, _alignmentD3Tests.getXMisalignmentCount, _alignmentD3Tests.getFeatureValueInteger, _alignmentD3Tests.getTickValueInteger), 'year values don\'t line up with x locations ');
	      });

	      reqNum++;
	      it(reqNum + '. My heat map should have multiple tick labels on the y-axis\n      with the full month name.', function () {
	        var yAxisTickLabels = document.querySelectorAll('#y-axis .tick');

	        _chai.assert.isAbove(yAxisTickLabels.length, 0, 'Could not find tick labels on the y axis');

	        for (var i = 0; i < yAxisTickLabels.length; i++) {
	          _chai.assert.include(months, yAxisTickLabels[i].textContent.toLowerCase(), 'Y axis labels should contain month names ');
	        }
	      });

	      reqNum++;
	      it(reqNum + '. My heat map should have multiple tick labels on the x-axis\n      with the years between 1754 and 2015.', function () {
	        var xAxisTickLabels = document.querySelectorAll('#x-axis .tick');

	        _chai.assert.isAbove(xAxisTickLabels.length, 0, 'Could not find tick labels on the x axis');

	        for (var i = 0; i < xAxisTickLabels.length; i++) {

	          _chai.assert.isAtLeast(xAxisTickLabels[i].textContent, 1754, 'X axis labels should contain a year that\'s at least 1754 ');

	          _chai.assert.isAtMost(xAxisTickLabels[i].textContent, 2015, 'X axis labels should contain a year that\'s at most 2015 ');
	        }
	      });

	      reqNum++;
	      it(reqNum + '. My heat map should have a legend with corresponding\n      id="legend".', function () {
	        _chai.assert.isNotNull(document.getElementById('legend'), 'Could not find an element with id="legend" ');
	      });
	    });

	    // Addtional tests.
	    (0, _globalD3Tests.testToolTip)(document.querySelectorAll('.cell'), 'data-year', 'data-year');
	  });
	}

/***/ })
/******/ ]);